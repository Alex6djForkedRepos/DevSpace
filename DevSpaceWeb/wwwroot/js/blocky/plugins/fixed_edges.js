!function (t, e) { if ("object" == typeof exports && "object" == typeof module) module.exports = e(require("blockly/core")); else if ("function" == typeof define && define.amd) define(["blockly/core"], e); else { var o = "object" == typeof exports ? e(require("blockly/core")) : e(t.Blockly); for (var r in o) ("object" == typeof exports ? exports : t)[r] = o[r] } }(this, (t => (() => { "use strict"; var e = { 370: e => { e.exports = t } }, o = {}; function r(t) { var i = o[t]; if (void 0 !== i) return i.exports; var d = o[t] = { exports: {} }; return e[t](d, d.exports, r), d.exports } r.n = t => { var e = t && t.__esModule ? () => t.default : () => t; return r.d(e, { a: e }), e }, r.d = (t, e) => { for (var o in e) r.o(e, o) && !r.o(t, o) && Object.defineProperty(t, o, { enumerable: !0, get: e[o] }) }, r.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), r.r = t => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }; var i = {}; r.r(i), r.d(i, { FixedEdgesMetricsManager: () => s }); var d = r(370); const l = {}; class s extends d.MetricsManager { constructor(t) { super(t) } static setFixedEdges(t) { l.top = !!t.top, l.bottom = !!t.bottom, l.left = !!t.left, l.right = !!t.right } hasFixedEdges() { return !0 } getComputedFixedEdges_(t = void 0) { const e = this.workspace_.isMovableHorizontally(), o = this.workspace_.isMovableVertically(), r = t || this.getViewMetrics(!1), i = { top: l.top ? 0 : void 0, bottom: l.bottom ? 0 : void 0, left: l.left ? 0 : void 0, right: l.right ? 0 : void 0 }; return l.top && l.bottom && (i.bottom = r.height), l.left && l.right && (i.right = r.width), o || (void 0 !== i.top ? i.bottom = i.top + r.height : void 0 !== i.bottom ? i.top = i.bottom - r.height : (i.top = r.top, i.bottom = r.top + r.height)), e || (void 0 !== i.left ? i.right = i.left + r.width : void 0 !== i.right ? i.left = i.right - r.width : (i.left = r.left, i.right = r.left + r.width)), i } } return i })()));