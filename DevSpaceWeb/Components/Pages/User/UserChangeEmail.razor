@page "/user/change_email"
@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Specialized
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityOptions IdentityOptions
@inject EmailService Email

<PageTitle>Change Email | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:email-edit"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Change Account Email</RadzenText>
    </div>
    <br />
    <EditForm Model="@ChangeEmailForm" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                @ErrorMessage
            </RadzenAlert>
        }

        <RadzenLabel Text="Email" class="rz-my-0"></RadzenLabel>
        <RadzenTextBox @bind-Value="@ChangeEmailForm.Email" Style="width: 100%" aria-label="Email TextBox" autocomplete="false" autofocus inputmode="email"
                       autocapitalize="none" MaxLength="100" Disabled="!string.IsNullOrEmpty(CodeGenerated)" />
        <ValidationMessage For="() => ChangeEmailForm.Email" style="color: var(--rz-danger);" />

        @if (!ConfirmChange)
        {
            @if (!string.IsNullOrEmpty(CodeGenerated))
            {
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                    An email code has been sent to @ChangeEmailForm.Email you will need to enter this below.
                </RadzenAlert>

                <RadzenLabel Text="Code" class="rz-my-0"></RadzenLabel>
                <div>
                    <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@ChangeEmailForm.Code" Count="8" aria-label="Email Code" autofocus />
                </div>
                <br />
            }
            else
            {
                <br />
                <br />
            }
        }
        else
        {
            @if (!EmailHasChanged)
            {
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                    Your account email address has been changed!
                </RadzenAlert>
            }
            else
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    Are you sure you want to change email address?
                    <br />
                    This will also reset your 2FA (Two-factor authentication) methods and recovery code!
                </RadzenAlert>
            }
            
        }
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Submit" Disabled="@IsLoading" />
    </EditForm>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NameValueCollection query = NavigationManager.ParseQuery();
        Token = query["token"];
        string Email = query["email"];

        if (!string.IsNullOrEmpty(Token))
        {
            Token = Uri.UnescapeDataString(Token);
        }

        if (!string.IsNullOrEmpty(Email))
        {
            ChangeEmailForm.Email = Uri.UnescapeDataString(Email);
        }

    }

    public AccountChangeEmailModel ChangeEmailForm = new AccountChangeEmailModel();
    public bool IsLoading { get; set; }
    public string Token { get; set; }
    public string ErrorMessage { get; set; }
    public string CodeGenerated { get; set; }
    public bool ConfirmChange { get; set; }
    public bool EmailHasChanged { get; set; }


    public async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        ErrorMessage = string.Empty;

        if (string.IsNullOrEmpty(Token))
        {
            ErrorMessage = "Invalid change email token.";
            return;
        }

        IsLoading = true;

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            IsLoading = false;
            ErrorMessage = "Failed to get user account.";
            return;
        }

        bool TokenValidate = await UserManager.VerifyUserTokenAsync(user, IdentityOptions.Tokens.ChangeEmailTokenProvider, UserManager<AuthUser>.GetChangeEmailTokenPurpose(ChangeEmailForm.Email), Token);
        if (!TokenValidate)
        {
            IsLoading = false;
            ErrorMessage = "Invalid change email token.";
            return;
        }

        if (user.Email.Equals(ChangeEmailForm.Email, StringComparison.OrdinalIgnoreCase))
        {
            IsLoading = false;
            ErrorMessage = "This is your current email address already.";
            return;
        }

        AuthUser? FindUser = await UserManager.FindByEmailAsync(ChangeEmailForm.Email);
        if (FindUser != null)
        {
            IsLoading = false;
            ErrorMessage = "This email address is already registered.";
            return;
        }

        if (string.IsNullOrEmpty(CodeGenerated))
        {
            string Code = Email.RandomCodeGenerator();
            bool EmailSent = await Email.SendEmailChangeCode(user, ChangeEmailForm.Email, Code);
            IsLoading = false;
            if (!EmailSent)
            {
                ErrorMessage = "Failed to send email to " + ChangeEmailForm.Email;
                return;
            }
            CodeGenerated = Code;
            return;
        }

        if (string.IsNullOrEmpty(ChangeEmailForm.Code) || ChangeEmailForm.Code != CodeGenerated)
        {
            IsLoading = false;
            ErrorMessage = "Invalid email confirmation code.";
            return;
        }

        if (!ConfirmChange)
        {
            IsLoading = false;
            ConfirmChange = true;
            return;
        }

        IdentityResult ChangeValidate = await UserManager.ChangeEmailAsync(user, ChangeEmailForm.Email, Token);
        if (!ChangeValidate.Succeeded)
        {
            IsLoading = false;
            ErrorMessage = ChangeValidate.Errors.First().Description;
            return;
        }

        user.Mfa.AuthenticatorDevices.Clear();

        user.Mfa.AuthenticatorLastRegisteredAt = null;
        user.Mfa.AuthenticatorLastUsedAt = null;

        user.Account.EmailChangedAt = DateTime.UtcNow;
        user.Mfa.EmailCodeLastSentAt = DateTime.UtcNow;
        user.Mfa.EmailCodeLastUsedAt = DateTime.UtcNow;

        user.Mfa.IsTwoFactorEnabled = false;

        user.Mfa.PasskeyId = null;
        user.Mfa.PasskeyLastRegisteredAt = null;
        user.Mfa.PasskeyLastUsedAt = null;
        user.Mfa.PasskeyLastUsedDevice = null;
        user.Mfa.Passkeys.Clear();

        user.Mfa.RecoveryCodeLastUsedAt = null;
        user.Mfa.RecoveryCode = null;
        user.Mfa.RecoveryCodeCreatedAt = null;
        await UserManager.UpdateAsync(user);
        user.UpdatePartial();

        _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);

        EmailHasChanged = true;
    }
}
