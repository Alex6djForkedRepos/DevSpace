@inject UserManager<AuthUser> UserManager

<PageTitle>Account Connections | @_Data.Config.Instance.Name</PageTitle>

<div class="settings-box">
    <h6>Current Connections</h6>

    @if (AuthUser == null)
    {
        <br />
        <RadzenSkeleton Height="48" Style="width: 100%;"></RadzenSkeleton>
    }
    else if (!AuthUser.EmailConfirmed)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You need to verify your email address to connect external accounts.
        </RadzenAlert>
    }
    else
    {
        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" class="mt-4">
            @foreach(UserLoginInfo i in AuthUser.Logins)
            {
                <div class="passkey-item">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceAround">
                        @if (i.LoginProvider == "fluxpoint")
                        {
                            <img src="@("https://fluxpoint.dev/img/icons/fluxpoint.png")" style="margin-top: -4px;">
                        }
                        else
                        {
                            <img src="@("https://cdn.fluxpoint.dev/icons/" + i.LoginProvider + ".webp")" style="margin-top: -4px;">
                        }
                        <RadzenStack Gap="0px" Style="flex-grow: 2;">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                                @i.ProviderDisplayName
                            </RadzenText>
                        </RadzenStack>
                        <RadzenStack Gap="10px" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.Center">
                            <RadzenButton Text="Remove" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" Click="@(() => RemoveConnection(i))" />
                        </RadzenStack>

                    </RadzenStack>
                </div>
            }
        </RadzenStack>
    }
</div>
<div class="settings-box">
    <h6>Available Connections</h6>
    @if (AuthUser == null)
    {
        <br />
        <RadzenSkeleton Height="48" Style="width: 100%;"></RadzenSkeleton>
    }
    else if (!AuthUser.EmailConfirmed)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You need to verify your email address to connect external accounts.
        </RadzenAlert>
    }
    else
    {
        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" class="mt-4">
            @foreach (KeyValuePair<string, string> i in ValidConnections)
            {
                <div class="passkey-item">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceAround">
                        @if (i.Key == "fluxpoint")
                        {
                            <img src="@("https://fluxpoint.dev/img/icons/fluxpoint.png")" style="margin-top: -4px;">
                        }
                        else
                        {
                            <img src="@("https://cdn.fluxpoint.dev/icons/" + i.Key + ".webp")" style="margin-top: -4px;">
                        }

                        <RadzenStack Gap="0px" Style="flex-grow: 2;">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                                @i.Value
                            </RadzenText>
                        </RadzenStack>
                        <RadzenStack Gap="10px" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.Center">
                            <form id="login-external-form" action="/auth/login/external" method="post" class="form-horizontal">
                                <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" ButtonType="ButtonType.Submit" value="@i.Key" name="provider" Disabled="@(IsDisabled(i.Key))" />
                            </form>
                        </RadzenStack>
                    </RadzenStack>
                </div>
            }
        </RadzenStack>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public AuthUser? AuthUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser == null)
            return;

        if (_Data.Config.Providers.Fluxpoint.IsConfigured())
            ValidConnections.Add("fluxpoint", "Fluxpoint");
        if (_Data.Config.Providers.Apple.IsConfigured())
            ValidConnections.Add("apple", "Apple");
        if (_Data.Config.Providers.Discord.IsConfigured())
            ValidConnections.Add("discord", "Discord");
        if (_Data.Config.Providers.Google.IsConfigured())
            ValidConnections.Add("google", "Google");
        if (_Data.Config.Providers.GitHub.IsConfigured())
            ValidConnections.Add("github", "GitHub");
        if (_Data.Config.Providers.GitLab.IsConfigured())
            ValidConnections.Add("gitlab", "GitLab");
        if (_Data.Config.Providers.Slack.IsConfigured())
            ValidConnections.Add("slack", "Slack");
        if (_Data.Config.Providers.Twitter.IsConfigured())
            ValidConnections.Add("twitter", "Twitter");
        if (_Data.Config.Providers.Microsoft.IsConfigured())
            ValidConnections.Add("microsoft", "Microsoft");


        foreach(UserLoginInfo i in AuthUser.Logins)
        {
            ValidConnections.Remove(i.LoginProvider);
        }
    }

    public Dictionary<string, string> ValidConnections = new Dictionary<string, string>();

    public bool IsDisabled(string provider)
    {
        switch (provider)
        {
            case "fluxpoint":
                return _Data.Config.Providers.Fluxpoint.IsDisabled;
            case "apple":
                return _Data.Config.Providers.Apple.IsDisabled;
            case "discord":
                return _Data.Config.Providers.Discord.IsDisabled;
            case "google":
                return _Data.Config.Providers.Google.IsDisabled;
            case "github":
                return _Data.Config.Providers.GitHub.IsDisabled;
            case "gitlab":
                return _Data.Config.Providers.GitLab.IsDisabled;
            case "slack":
                return _Data.Config.Providers.Slack.IsDisabled;
            case "twitter":
                return _Data.Config.Providers.Twitter.IsDisabled;
            case "microsoft":
                return _Data.Config.Providers.Microsoft.IsDisabled;
        }

        return true;
    }

    public async Task RemoveConnection(UserLoginInfo login)
    {
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser != null && AuthUser.Logins.RemoveAll(x => x.LoginProvider == login.LoginProvider) != 0)
        {
            ValidConnections.Add(login.LoginProvider, login.ProviderDisplayName!);
            await UserManager.UpdateAsync(AuthUser);

        }
    }
}
