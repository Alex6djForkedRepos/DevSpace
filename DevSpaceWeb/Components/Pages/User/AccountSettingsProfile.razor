@using DevSpaceWeb.Components.Dialogs.Users
@using DevSpaceWeb.Models.Account
@using System.Reflection
@implements IDisposable
@inject DialogService DialogService
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject EmailService Email
@inject IJSRuntime JS

<PageTitle>Account Profile | @_Data.Config.Instance.Name</PageTitle>

<div class="settings-box">
    <h6>Profile</h6>

    @if (AuthUser != null && AuthUser.IsManaged)
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
            Your account is managed by your Team, some options will be unavailable to you.
        </RadzenAlert>
    }

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenStack Gap="10px" AlignItems="AlignItems.Center">
            @if (AuthUser == null)
            {
                <RadzenSkeleton Width="80" Height="80" Style="border-radius: 50%;"></RadzenSkeleton>
            }
            else
            {
                <RadzenImage class="account-avatar" Path="@AuthUser.GetAvatarOrDefault()" Style="width: 80px; height: 80px; border-radius: 50%;" Click="@EditAvatar" />
            }
            <RadzenButton Click="@RemoveAvatar" Variant="Variant.Text" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Text="Remove Avatar" Disabled="@(AuthUser == null || !AuthUser.AvatarId.HasValue)" />
        </RadzenStack>
        <RadzenStack Gap="8px">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center">
                <div style="width: 120px;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Username</RadzenText>
                    @if (AuthUser == null)
                    {
                        <RadzenSkeleton></RadzenSkeleton>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            @AuthUser.UserName
                        </RadzenText>
                    }
                </div>
                <RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Light" Click="@EditAccountUsername" Size="ButtonSize.Small" Disabled="@(AuthUser == null)" />
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center">
                <div style="width: 120px;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Display Name</RadzenText>
                    @if (AuthUser == null)
                    {
                        <RadzenSkeleton></RadzenSkeleton>
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            @(AuthUser.DisplayName ?? "⠀")
                        </RadzenText>
                    }
                </div>
                <RadzenButton Text="Edit" ButtonStyle="ButtonStyle.Light" Click="@EditAccountDisplayName" Size="ButtonSize.Small" Disabled="@(AuthUser == null)" />
            </RadzenStack>

            <div>
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Email</RadzenText>
                @if (AuthUser == null)
                {
                    <RadzenSkeleton></RadzenSkeleton>
                }
                else
                {
                    <RadzenTextMask Value="@AuthUser.Email" IsEmail="true"></RadzenTextMask>
                }
            </div>

            <div>
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Account Created</RadzenText>
                @if (AuthUser == null)
                {
                    <RadzenSkeleton></RadzenSkeleton>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body2">
                        @Utils.GetLocalDate(Session, AuthUser.CreatedOn, true)
                    </RadzenText>
                }
            </div>

        </RadzenStack>
    </RadzenStack>

    <div class="mb-4" />
    @if (AuthUser != null && !AuthUser.EmailConfirmed)
    {
        if (EmailVerifySent)
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                Check your email address to confirm your account.
                <RadzenButton Disabled="true" Text="Verify" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Base" />
            </RadzenAlert>
        }
        else
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You need to confirm your email address.
                <RadzenButton Click="@SendEmailVerify" Text="Verify" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" />
            </RadzenAlert>
        }
    }
    <br />
    <h6 class="mb-2">Manage</h6>

    <RadzenStack Gap="4px;" Orientation="Orientation.Vertical" Wrap="FlexWrap.Wrap">
        <div>
            <RadzenButton Text="Change Email" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@ChangeEmail" Disabled="@(AuthUser == null || AuthUser.IsManaged || !AuthUser.EmailConfirmed)" />
            <RadzenButton Text="Change Password" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@ChangePassword" Disabled="@(AuthUser == null)" />
        </div>
        <div>
            <RadzenButton Text="Disable Account" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Click="@DisableAccount" Disabled="@(AuthUser == null || AuthUser.IsManaged || !AuthUser.EmailConfirmed)" />
            <RadzenButton Text="Delete Account" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Click="@DeleteAccount" Disabled="@(AuthUser == null || AuthUser.IsManaged)" />
        </div>
    </RadzenStack>
</div>

<div class="settings-box">
    <h6>Settings</h6>
    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1 mt-2">Date Format</RadzenText>
    <RadzenDropDown TValue="DateFormatLang" Data="@(Enum.GetValues(typeof(DateFormatLang)).Cast<Enum>())" @bind-Value="@UserDateFormat" Style="width: 100%;" Disabled="@(AuthUser == null)">
        <Template>

            @if (((DateFormatLang)context) == DateFormatLang.Automatic)
            {
                @($"Automatic - {Country}")
            }
            else
            {
                @(GetDisplayName((DateFormatLang)context))
            }
        </Template>
    </RadzenDropDown>
    <br />
    <br />
    @if (AuthUser == null)
    {
        <RadzenSkeleton></RadzenSkeleton>
    }
    else
    {
        <RadzenText TextStyle="TextStyle.Body2">
            @("Current Date: " + Utils.GetLocalDate(Session, DateTime.UtcNow, false))
        </RadzenText>
    }
    <br />
    <RadzenButton Text="Change Background" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@ChangeBackgroundDialog" Disabled="@(AuthUser == null)" />
    <RadzenButton Click="@RemoveBackground" Variant="Variant.Text" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Text="Remove Background" Disabled="@(AuthUser == null || !AuthUser.BackgroundId.HasValue)" />
</div>

<style>
    .account-avatar:hover {
        cursor: pointer;
        opacity: 0.6;
        padding: 1px;
        box-shadow: var(--rz-shadow-2) !important;
    }
</style>

@code {
    [CascadingParameter]
    public SessionProvider Session { get; set; } = null!;

    public AuthUser? AuthUser { get; set; }

    private DateFormatLang _userDateFormat = DateFormatLang.Automatic;
    public DateFormatLang UserDateFormat { get { return _userDateFormat; } set { _userDateFormat = value; Session.UserDateFormat = value; SaveUser(); } }

    public bool ShowEmailAddress { get; set; }

    public void ToggleShowEmailAddress()
    {
        ShowEmailAddress = !ShowEmailAddress;
    }

    public bool EmailVerifySent { get; set; }
    public string? Country { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _DB.SessionUpdated += SessionChangedEvent;
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser != null)
            _userDateFormat = AuthUser.Settings.DateFormat;
        Country = await Session.GetCountryAsync();
    }

    public string GetDisplayName(Enum enumValue)
    {
        string enumValueAsString = enumValue.ToString();
        MemberInfo? val = enumValue.GetType().GetMember(enumValueAsString).FirstOrDefault();
        string? enumVal = val?.GetCustomAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>()?.GetDescription() ?? enumValueAsString;

        return enumVal;
    }

    public async Task SaveUser()
    {
        if (!Program.IsPreviewMode)
        {
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            AuthUser.Settings.DateFormat = _userDateFormat;
            await UserManager.UpdateAsync(AuthUser);
        }
    }

    public void Dispose()
    {
        _DB.SessionUpdated -= SessionChangedEvent;
    }

    public async void SessionChangedEvent(ObjectId user, SessionEventType type)
    {
        if (AuthUser.Id != user || type != SessionEventType.AccountUpdate)
            return;

        AuthUser = await Session.GetCurrentUserAsync();
        _ = InvokeAsync(StateHasChanged);

    }



    public async Task EditAccountUsername()
    {
        await DialogService.OpenAsync<EditAccountUsernameDialog>("Edit Username", options: new DialogOptions
        {
            AutoFocusFirstElement = true
        });
    }

    public async Task EditAccountDisplayName()
    {
        await DialogService.OpenAsync<EditAccountDisplayNameDialog>("Edit Display Name", options: new DialogOptions
        {
            AutoFocusFirstElement = true
        });
    }

    public async Task EditAvatar()
    {
        dynamic Dialog = await DialogService.OpenAsync<ChangeAccountAvatarDialog>("Change Avatar", options: new DialogOptions
        {

        });
        if (Dialog != null)
        {
            if (Dialog == true)
            {
                AuthUser = await Session.GetCurrentUserAsync();
            }
        }
    }

    public async Task RemoveAvatar()
    {
        bool Confirm = await DialogService.ShowConfirmAsync("Remove Avatar", "Are you sure you want to remove your avatar?", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            if (!AuthUser.HasAvatar)
                return;

            Guid? CurrentAvatar = AuthUser.AvatarId.GetValueOrDefault();

            AuthUser.AvatarId = null;

            IdentityResult Result = await UserManager.UpdateAsync(AuthUser);
            if (Result.Succeeded)
            {
                try
                {
                    File.Delete(new FileResource("Avatar", AuthUser.ResourceId, CurrentAvatar).Path("webp"));
                }
                catch { }

                try
                {
                    File.Delete(new FileResource("Avatar", AuthUser.ResourceId, CurrentAvatar).Path("png"));
                }
                catch { }

                Session.CurrentUser.AvatarId = null;

                AuthUser.UpdatePartial();
                Session.TriggerChange();
            }
        }
    }

    public async Task ChangeEmail()
    {
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser == null)
            return;

        if (!AuthUser.EmailConfirmed)
        {
            await DialogService.ShowInfoAsync("Account Info", "You can't change your email because your current email is not verified.");
            return;
        }
        bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, true);
        if (!TwoFactorValid)
        {
            await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
            return;
        }


        DialogOptions options = new DialogOptions() { };

        dynamic Dialog = await DialogService.OpenAsync<ChangeAccountEmailDialog>("Change Account Email", new Dictionary<string, object>(), options);

        if (Dialog != null)
        {
            if (Dialog == true)
            {
                AuthUser = await Session.GetCurrentUserAsync();
                if (AuthUser == null)
                    return;

                await DialogService.ShowInfoAsync("Check your Emails", $"We have sent a confirmation link so you can change your account email address.");
            }
        }
    }

    public async Task ChangePassword()
    {
        if (AuthUser.Mfa.IsTwoFactorEnabled)
        {
            bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, false);
            if (!TwoFactorValid)
            {
                await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
                return;
            }
        }

        await DialogService.OpenAsync<ChangeAccountPasswordDialog>("Change Account Password", new Dictionary<string, object>(), new DialogOptions { });

    }

    public async Task DisableAccount()
    {
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser == null)
            return;

        if (AuthUser.IsInstanceAdmin)
        {
            await DialogService.ShowInfoAsync("Account Info", "You can't disable your instance admin account.");
            return;
        }
        if (!AuthUser.EmailConfirmed)
        {
            await DialogService.ShowInfoAsync("Account Info", "You can't disable your account because your email is not verified.");
            return;
        }

        bool Result = await DialogService.ShowConfirmAsync("Disable Account", "Are you sure you want to disable your account?", "Confirm Disable", ButtonStyle.Warning);
        if (Result)
        {
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, true);
            if (!TwoFactorValid)
            {
                await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
                return;
            }

            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            if (AuthUser == null)
            {
                return;
            }
            AuthUser.Disabled = new UserDisabled
            {
                State = UserDisabledState.User,
                DisabledAt = DateTime.UtcNow
            };
            await UserManager.UpdateAsync(AuthUser);
            _DB.TriggerSessionEvent(AuthUser.Id, SessionEventType.AccountUpdate);
            await Email.SendAccountDisabled(AuthUser, "You have disabled your account.");
            NavigationManager.Refresh(true);
        }
    }

    public async Task DeleteAccount()
    {
        AuthUser = await Session.GetCurrentUserAsync();
        if (AuthUser == null)
            return;

        if (AuthUser.IsInstanceAdmin)
        {
            await DialogService.ShowInfoAsync("Account Info", "You can't delete your instance admin account.");
            return;
        }
        if (_DB.Teams.Cache.Values.Any(x => x.OwnerId == AuthUser.Id))
        {
            await DialogService.ShowInfoAsync("Account Info", "You can't delete your account with owned teams.");
            return;
        }

        bool Result = await DialogService.ShowConfirmAsync("Delete Account", "Are you sure you want to delete your account?", "Confirm Delete", ButtonStyle.Warning);
        if (Result)
        {
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            if (AuthUser.EmailConfirmed)
            {
                bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, true);
                if (!TwoFactorValid)
                {
                    await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
                    return;
                }
            }
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            await UserManager.DeleteAsync(AuthUser);
            _DB.TriggerSessionEvent(AuthUser.Id, SessionEventType.Logout);
            if (AuthUser.EmailConfirmed)
                await Email.SendAccountDeleted(AuthUser);

            NavigationManager.NavigateTo("/logout", true);
        }
    }

    public async Task SendEmailVerify()
    {
        EmailVerifySent = true;
        string Code = await UserManager.GenerateEmailConfirmationTokenAsync(AuthUser);
        Code = Uri.EscapeDataString(Code);
        await Email.SendAccountConfirm(AuthUser, (NavigationManager.BaseUri + "auth/account/confirmEmail?token=" + Code));
    }

    public async Task ChangeBackgroundDialog()
    {
        if (Program.IsPreviewMode)
        {
            await DialogService.ShowDynamicFormAsync<AccountBackgroundModel>("Change Background", new AccountBackgroundModel() { BackgroundUrl = Session.BackgroundUrl }, (AccountBackgroundModel data) =>
            {
                Session.BackgroundUrl = data.BackgroundUrl;
                Session.TriggerChange();
                return null;
            });
        }
        else
        {
            await DialogService.OpenAsync<ChangeAccountBackgroundDialog>("Change Background");
        }
    }

    public async Task RemoveBackground()
    {
        bool Confirm = await DialogService.ShowConfirmAsync("Remove Background", "Are you sure you want to remove your background?", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            AuthUser = await Session.GetCurrentUserAsync();
            if (AuthUser == null)
                return;

            if (!AuthUser.BackgroundId.HasValue)
                return;

            Guid? CurrentBackground = AuthUser.BackgroundId.GetValueOrDefault();

            AuthUser.BackgroundId = null;

            IdentityResult Result = await UserManager.UpdateAsync(AuthUser);
            if (Result.Succeeded)
            {
                try
                {
                    File.Delete(new FileResource("Background", AuthUser.ResourceId, CurrentBackground).Path("webp"));
                }
                catch{ }
                Session.BackgroundUrl = "https://cdn.fluxpoint.dev/devspace/background.webp";
                Session.TriggerChange();
            }
        }
    }
}
