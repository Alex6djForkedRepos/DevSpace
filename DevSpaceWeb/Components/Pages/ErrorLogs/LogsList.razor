@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService

@if (ShowProjectsList)
{
    <div class="mb-2">
        <ActionBar>
            <RadzenDropDown Placeholder="All Projects" AllowClear="true" AllowFiltering="true" ClearSearchAfterSelection="true" Disabled="@IsLoading"
                            TextProperty="@nameof(ProjectData.Name)" @bind-Value="@SelectedProject" Data="@CurrentProjects" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Style="width: 230px; max-width: 300px; height: 30px; padding-top: 4px;" Change="@(() => Grid.Reload())" />
            <a href="https://docs.fluxpoint.dev/cloudfrost-dev/logs" target="_blank"><RadzenButton Text="Log Docs" Icon="menu_book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
        </ActionBar>
    </div>
}

<ActionBar>
    <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Resolve" Icon="check" Click="@(() => RunLogsAction(LogActivityType.Resolved))" IconColor="@Colors.SuccessDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Disabled="@(!AnySelected || IsLoading || Member == null)" />
    <RadzenButton Variant="Variant.Outlined" Text="Review" Icon="person_alert" Click="@(() => RunLogsAction(LogActivityType.Reviewed))" IconColor="@Colors.InfoDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Disabled="@(!AnySelected || IsLoading || Member == null)" />
    <RadzenButton Variant="Variant.Outlined" Text="Ignore" Icon="alarm_pause" Click="@(() => RunLogsAction(LogActivityType.Ignored))" IconColor="@Colors.WarningDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Disabled="@(!AnySelected || IsLoading || Member == null)" />
    <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Delete" Icon="delete" Click="@(() => RunLogsAction(LogActivityType.Opened))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Disabled="@(!AnySelected || IsLoading || Member == null)" />
    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@(() => { CurrentProjects = new List<ProjectData>(); Grid.RefreshDataAsync(); })" Disabled="@(IsLoading)" />
    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
        <Start>
            <RadzenIcon Icon="search" />
        </Start>
        <ChildContent>
            <RadzenTextBox id="actionSearch" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                           autocapitalize="none" MaxLength="100" inputmode="search" Placeholder="Search logs"
                           @bind-Value="@SearchText" @oninput="@(args => SetNameFilter(args.Value as string))" />
        </ChildContent>
        <End>
            @if (!string.IsNullOrWhiteSpace(SearchText))
            {
                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
            }
        </End>
    </RadzenFormField>
</ActionBar>
<br />
<RadzenDataGrid @ref="@Grid" Data="@ContainersList" LoadData="@LoadData" IsLoading="@IsLoading"
                Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No logs."
                PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                GridLines="DataGridGridLines.Horizontal" @bind-Value="@SelectedContainers" SelectionMode="DataGridSelectionMode.Multiple"
                PageSizeOptions="@Static.TablePageSizeOptions"
                AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                TItem="LogData" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
    <Columns>
        <RadzenDataGridColumn Width="36px" Frozen="true" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                Value="@(SelectedContainers == null || SelectedContainers?.Any() != true ? false : !ContainersList.All(i => SelectedContainers.Contains(i)) ? null : ContainersList.Any(i => SelectedContainers.Contains(i)))"
                                Change="@(args => SelectedContainers = args == true ? (SelectedContainers != null && SelectedContainers.Any()) ? null : ContainersList.ToList() : null)" Disabled="@(IsLoading)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedContainers != null && SelectedContainers.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Project" Filterable="false" Width="@GridWidth.Name" Frozen="true">
            <Template>
                @_DB.Projects.Cache[context.ProjectId].Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Number" Filterable="true" Frozen="true" Width="@GridWidth.Number" Property="@nameof(LogData.IssueNumber)" FilterOperators="@GridOperators.Number">
            <Template>
                <span><span style="color: var(--rz-text-tertiary-color);">#</span>@context.IssueNumber</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Issue" Filterable="true" Frozen="true" Width="@GridWidth.LongField" Property="@nameof(LogData.Message)" FilterOperators="@GridOperators.Text">
            <Template>
                @if (!context.IsRead)
                {
                    <RadzenBadge Shade="Shade.Default" BadgeStyle="BadgeStyle.Info" Text="" IsPill="true" Style="height: 12px; min-width: 12px; max-width: 12px; margin-right: 4px;" />
                }
                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/logs/" + context.Id)" Text="@context.Message" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsOne" Filterable="false">
            <Template>
                <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading)" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Type" Filterable="true" Width="@GridWidth.Type" Property="@nameof(LogData.LogType)" FilterMode="FilterMode.CheckBoxList" FilterOperator="FilterOperator.In" FilterValue="@selectedLogTypes">
            <FilterTemplate>
                <div class="rz-grid-filter">
                    <RadzenListBox @bind-Value="@selectedLogTypes" Multiple="true" AllowSelectAll="true" AllowFiltering="true" Style="width:100%;"
                                   Data="@(Enum.GetValues<LogType>())" />
                </div>
            </FilterTemplate>
            <Template>
                @switch (context.LogType)
                {
                    case LogType.Debug:
                        {
                            <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Primary" Text="Debug" IsPill="true" />
                        }
                        break;
                    case LogType.Error:
                        {
                            <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Danger" Text="Error" IsPill="true" />
                        }
                        break;
                    case LogType.Fatal:
                        {
                            <RadzenBadge Shade="Shade.Light" BadgeStyle="BadgeStyle.Danger" Text="Fatal" IsPill="true" />
                        }
                        break;
                    case LogType.Info:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Info" IsPill="true" />
                        }
                        break;
                    case LogType.Trace:
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Trace" IsPill="true" />
                        }
                        break;
                    case LogType.Warn:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Warning" IsPill="true" />
                        }
                        break;
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Status" Filterable="true" Width="@GridWidth.Type" Property="@nameof(LogData.Status)" FilterMode="FilterMode.CheckBoxList" FilterOperator="FilterOperator.In" FilterValue="@selectedLogStatus">
            <FilterTemplate>
                <div class="rz-grid-filter">
                    <RadzenListBox @bind-Value="@selectedLogStatus" Multiple="true" AllowSelectAll="true" AllowFiltering="true" Style="width:100%;"
                                   Data="@(Enum.GetValues<LogStatus>())" />
                </div>
            </FilterTemplate>
            <Template>
                @switch (context.Status)
                {
                    case LogStatus.New:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="New" IsPill="true" />
                        }
                        break;
                    case LogStatus.Open:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Open" IsPill="true" />
                        }
                        break;
                    case LogStatus.Reviewed:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Primary" Text="Reviewed" IsPill="true" />
                        }
                        break;
                    case LogStatus.Ignored:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Light" Text="Ignored" IsPill="true" />
                        }
                        break;
                    case LogStatus.Resolved:
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Resolved" IsPill="true" />
                        }
                        break;
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Last Seen" Filterable="true" Width="@GridWidth.Date" Property="@nameof(LogData.LastSeenAt)" FilterOperator="FilterOperator.GreaterThanOrEquals" SecondFilterOperator="FilterOperator.GreaterThanOrEquals" FilterOperators="@GridOperators.Date">
            <Template>
                @Utils.GetLocalDate(Session, context.LastSeenAt, true)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Created" Filterable="true" Width="@GridWidth.Date" Property="@nameof(LogData.CreatedAt)" FilterOperator="FilterOperator.GreaterThanOrEquals" SecondFilterOperator="FilterOperator.GreaterThanOrEquals" FilterOperators="@GridOperators.Date">
            <Template>
                @Utils.GetLocalDate(Session, context.CreatedAt, true)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Events" Filterable="true" Width="@GridWidth.Number" Property="@nameof(LogData.EventsCount)" FilterOperators="@GridOperators.Number">
            <Template>
                @context.EventsCount
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Assigned" Filterable="false">
            <Template>
                @if (context.AssignedUser.HasValue)
                {
                    <MemberStrip Team="@Team" UserId="@context.AssignedUser.Value"></MemberStrip>
                }
                else
                {
                    @("Not Assigned")
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<style>
    .rz-frozen-cell-left-end .rz-cell-data {
        overflow: hidden !important;
        display: -webkit-box !important;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    [Parameter]
    public ProjectData? SelectedProject { get; set; }

    [Parameter]
    public bool ShowProjectsList { get; set; }

    IEnumerable<ProjectData> CurrentProjects = new List<ProjectData>();

    IQueryable<LogData>? ContainersList;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(3).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }


    public async Task LoadData(LoadDataArgs args)
    {
        if (Team == null || Member == null)
            return;

        IsLoading = true;
        if (!CurrentProjects.Any())
            CurrentProjects = _DB.Projects.Cache.Values.Where(x => x.TeamId == Team.Id && Member.HasLogPermission(Team, x, LogPermission.ViewLogs));

        List<FilterDefinition<LogData>> AndFilters = new List<FilterDefinition<LogData>>
        {
            new FilterDefinitionBuilder<LogData>().Eq(x => x.TeamId, Team.Id)
        };
        if (SelectedProject != null)
            AndFilters.Add(new FilterDefinitionBuilder<LogData>().Eq(x => x.ProjectId, SelectedProject.Id));
        else
            AndFilters.Add(new FilterDefinitionBuilder<LogData>().In(x => x.ProjectId, CurrentProjects.Select(x => x.Id)));

        GridFilters.Parse(Session, ref AndFilters, args);

        var Logs = _DB.Logs.Find(new FilterDefinitionBuilder<LogData>().And(AndFilters)).SortByDescending(x => x.Id).Limit(args.Top.GetValueOrDefault()).Skip(args.Skip.GetValueOrDefault());
        var List = await Logs.ToListAsync();
        ContainersList = List.AsQueryable();
        IsLoading = false;
    }


    IList<LogData>? SelectedContainers;
    List<LogType>? selectedLogTypes;
    List<LogStatus>? selectedLogStatus;
    public bool AnySelected => SelectedContainers != null ? SelectedContainers.Any() : false;
    RadzenDataGrid<LogData> Grid;
    public bool IsLoading = true;



    void ShowContextMenuWithManageItems(LogData item, MouseEventArgs args)
    {
        if (!_DB.Projects.Cache.TryGetValue(item.ProjectId, out var project))
            return;

        ContextMenuService.Open(args,
            new List<ContextMenuItem>
            {
                new ContextMenuItem() { Text = "Resolve", Value = "resolve", Icon = "check", IconColor = Colors.InfoDark, Disabled = IsLoading || Member == null || !Member.HasLogPermission(Team, project, LogPermission.ManageLogs) },
                new ContextMenuItem() { Text = "Review", Value = "review", Icon = "person_alert", IconColor = Colors.InfoDark, Disabled = IsLoading || Member == null || !Member.HasLogPermission(Team, project, LogPermission.ManageLogs) },
                new ContextMenuItem() { Text = "Ignore", Value = "ignore", Icon = "alarm_pause", IconColor = Colors.InfoDark, Disabled = IsLoading || Member == null || !Member.HasLogPermission(Team, project, LogPermission.ManageLogs) },
                new ContextMenuItem() { Text = "Delete", Value = "delete", Icon = "delete", IconColor = Colors.Danger, Disabled = IsLoading || Member == null || !Member.HasLogPermission(Team, project, LogPermission.ManageLogs) }
            }, x => MenuItemClick(x, item));
    }

    async Task RunLogsAction(LogActivityType type)
    {
        if (Member == null || SelectedContainers == null || !SelectedContainers.Any())
            return;

        var User = await Session.GetCurrentUserAsync();
        if (User == null)
            return;

        IsLoading = true;

        foreach (var i in SelectedContainers)
        {
            if (!_DB.Projects.Cache.TryGetValue(i.ProjectId, out var project))
                continue;

            if (!Member.HasLogPermission(Team, project, LogPermission.ManageLogs))
                continue;

            switch (type)
            {
                case LogActivityType.Resolved:
                    {
                        await i.ResolveIssueAsync(User);
                    }
                    break;
                case LogActivityType.Reviewed:
                    {
                        await i.ReviewIssueAsync(User);
                    }
                    break;
                case LogActivityType.Ignored:
                    {
                        await i.IgnoreIssueAsync(User);
                    }
                    break;
                // This is deleted but kept in for type usage
                case LogActivityType.Opened:
                    {
                        await i.DeleteAsync();
                    }
                    break;
            }
        }
        IsLoading = false;
    }

    async Task MenuItemClick(MenuItemEventArgs args, LogData item)
    {
        ContextMenuService.Close();
        if (!_DB.Projects.Cache.TryGetValue(item.ProjectId, out var project))
            return;

        if (Member == null || project == null || !Member.HasLogPermission(Team, project, LogPermission.ManageLogs))
            return;

        var User = await Session.GetCurrentUserAsync();
        if (User == null)
            return;

        IsLoading = true;
        switch (args.Value.ToString())
        {
            case "resolve":
                {
                    await item.ResolveIssueAsync(User);
                }
                break;
            case "review":
                {
                    await item.ReviewIssueAsync(User);
                }
                break;
            case "ignore":
                {
                    await item.IgnoreIssueAsync(User);
                }
                break;
            case "delete":
                {
                    await item.DeleteAsync();
                }
                break;
        }
        IsLoading = false;
        await Grid.RefreshDataAsync();

    }
}
