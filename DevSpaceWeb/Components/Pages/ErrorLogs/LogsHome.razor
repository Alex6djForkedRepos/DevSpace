@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:warning"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Logs</RadzenText>
    </div>
    <br />
    <ActionBar>
        <RadzenDropDown Placeholder="All Projects" AllowClear="true" AllowFiltering="true" ClearSearchAfterSelection="true" Disabled="@IsLoading"
            TextProperty="@nameof(ProjectData.Name)" @bind-Value="@SelectedProject" Data="@CurrentProjects" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            Style="width: 230px; max-width: 300px; height: 30px; padding-top: 4px;" Change="@(() => Grid.Reload())" />
        <a href="https://docs.fluxpoint.dev/devspace/logs" target="_blank"><RadzenButton Text="Log Docs" Icon="menu_book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
    </ActionBar>
    <div class="mt-2">
        <ActionBar>
            <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Mark Resolved" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Disabled="true" />
            <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@(() => { CurrentProjects = new List<ProjectData>(); Grid.RefreshDataAsync(); })" Disabled="@(IsLoading)" />
            <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                <Start>
                    <RadzenIcon Icon="search" />
                </Start>
                <ChildContent>
                    <RadzenTextBox id="actionSearch" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                   autocapitalize="none" MaxLength="100" inputmode="search" Placeholder="Search logs"
                                   @bind-Value="@SearchText" @oninput="@(args => SetNameFilter(args.Value as string))" Disabled="true" />
                </ChildContent>
                <End>
                </End>
            </RadzenFormField>
        </ActionBar>
    </div>
    <br />
    <RadzenDataGrid @ref="@Grid" Data="@ContainersList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No containers."
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                        GridLines="DataGridGridLines.Horizontal" @bind-Value="@SelectedContainers" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagingSummaryFormat="@(Count + " log" + (Count != 1 ? "s" : "") )"
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    TItem="LogData" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
                    <Columns>
            <RadzenDataGridColumn Width="36px" Frozen="true" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                    Value="@(SelectedContainers == null || SelectedContainers?.Any() != true ? false : !ContainersList.All(i => SelectedContainers.Contains(i)) ? null : ContainersList.Any(i => SelectedContainers.Contains(i)))"
                                    Change="@(args => SelectedContainers = args == true ? (SelectedContainers != null && SelectedContainers.Any()) ? null : ContainersList.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedContainers != null && SelectedContainers.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                    TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Project" Filterable="false" Width="160px" Frozen="true">
                <Template>
                    @_DB.Projects.Cache[context.ProjectId].Name
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Number" Filterable="false" Frozen="true" Width="60px">
                <Template>
                    <span><span style="color: var(--rz-text-tertiary-color);">#</span>@context.IssueNumber</span>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Issue" Filterable="false" Frozen="true" Width="240px">
                <Template>
                    @if (!context.IsRead)
                    {
                        <RadzenBadge Shade="Shade.Default" BadgeStyle="BadgeStyle.Info" Text="" IsPill="true" Style="height: 12px; min-width: 12px; max-width: 12px; margin-right: 4px;" />
                    }
                    <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/logs/" + context.Id)" Text="@context.Message" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Type" Filterable="false" Width="90px">
                <Template>
                    @switch (context.LogType)
                    {
                        case LogType.Debug:
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Primary" Text="Debug" IsPill="true" />
                            }
                            break;
                        case LogType.Error:
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Danger" Text="Error" IsPill="true" />
                            }
                            break;
                        case LogType.Fatal:
                            {
                                <RadzenBadge Shade="Shade.Light" BadgeStyle="BadgeStyle.Danger" Text="Fatal" IsPill="true" />
                            }
                            break;
                        case LogType.Info:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Info" IsPill="true" />
                            }
                            break;
                        case LogType.Trace:
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Trace" IsPill="true" />
                            }
                            break;
                        case LogType.Warn:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Warning" IsPill="true" />
                            }
                            break;
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Filterable="false" Width="90px">
                <Template>
                    @switch (context.Status)
                    {
                        case LogStatus.New:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="New" IsPill="true" />
                            }
                            break;
                        case LogStatus.Open:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Open" IsPill="true" />
                            }
                            break;
                        case LogStatus.Reviewed:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Primary" Text="Reviewed" IsPill="true" />
                            }
                            break;
                        case LogStatus.Ignored:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Light" Text="Ignored" IsPill="true" />
                            }
                            break;
                        case LogStatus.Resolved:
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Resolved" IsPill="true" />
                            }
                            break;
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Last Seen" Filterable="false" Width="130px">
                <Template>
                    @Utils.GetLocalDate(Session, context.LastSeenAt, true)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Filterable="false" Width="130px">
                <Template>
                    @Utils.GetLocalDate(Session, context.CreatedAt, true)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Events" Filterable="false" Width="90px">
                <Template>
                    @context.EventsCount
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Assigned" Filterable="false">
                <Template>
                    @if (context.AssignedUser.HasValue)
                    {
                        <MemberStrip Team="@Team" UserId="@context.AssignedUser.Value"></MemberStrip>
                    }
                    else
                    {
                        @("Not Assigned")
                    }
                </Template>
            </RadzenDataGridColumn>
            </Columns>
    </RadzenDataGrid>
</div>

<style>
    .rz-frozen-cell-left-end .rz-cell-data {
        overflow: hidden !important;
        display: -webkit-box !important;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ProjectData? Project => Session.Selected.Project;

    public ProjectData? SelectedProject { get; set; }
    IEnumerable<ProjectData> CurrentProjects = new List<ProjectData>();

    IQueryable<LogData>? ContainersList;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(2).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Team == null || Member == null)
            return;

        IsLoading = true;
        if (!CurrentProjects.Any())
            CurrentProjects = _DB.Projects.Cache.Values.Where(x => x.TeamId == Team.Id && Member.HasLogPermission(Team, x, LogPermission.ViewLogs));

        List<FilterDefinition<LogData>> AndFilters = new List<FilterDefinition<LogData>>
        {
            new FilterDefinitionBuilder<LogData>().Eq(x => x.TeamId, Team.Id)
        };
        if (SelectedProject != null)
            AndFilters.Add(new FilterDefinitionBuilder<LogData>().Eq(x => x.ProjectId, SelectedProject.Id));
        else
            AndFilters.Add(new FilterDefinitionBuilder<LogData>().In(x => x.ProjectId, CurrentProjects.Select(x => x.Id)));

        if (!string.IsNullOrEmpty(SearchText))
        {
            Console.WriteLine("Match Search: " + SearchText);
            AndFilters.Add(new FilterDefinitionBuilder<LogData>().StringIn(x => x.Message, SearchText));
        }

        var Logs = _DB.Logs.Find(new FilterDefinitionBuilder<LogData>().And(AndFilters)).SortByDescending(x => x.Id).Limit(args.Top.GetValueOrDefault()).Skip(args.Skip.GetValueOrDefault());
        var List = await Logs.ToListAsync();
        ContainersList = List.AsQueryable();
        IsLoading = false;
    }

    public int Count = 0;
    IList<LogData>? SelectedContainers;
    public bool AnySelected => SelectedContainers != null ? SelectedContainers.Any() : false;
    RadzenDataGrid<LogData> Grid;
    public bool IsLoading = true;

    void ShowContextMenuWithManageItems(LogData item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                                             }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, LogData item)
    {
    }
}
