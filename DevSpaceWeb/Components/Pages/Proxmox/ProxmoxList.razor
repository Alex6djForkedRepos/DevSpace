@using Corsinvest.ProxmoxVE.Api.Shared.Models.Cluster
@using DevSpaceWeb.Agents
@using DevSpaceWeb.Data.Proxmox
@using DevSpaceWeb.Models.Setup
@using System.Net
@using Newtonsoft.Json
@inject DialogService Dialogs

<PageTitle>Proxmox Nodes | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:network-pos"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Proxmox Nodes</RadzenText>
    </div>
    <br />
    <ActionBar>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Setup Proxmox" Click="@SetupProxmox" Disabled="(Member == null ||!Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator))" Size="ButtonSize.Small" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshNodes" />
        <RadzenFormField Variant="Variant.Outlined">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
    </ActionBar>
    <br />
    @if (Nodes != null)
    {
    @foreach (IClusterResourceNode i in Nodes.Where(x => Member != null && Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator) && (string.IsNullOrEmpty(SearchText) || x.Node.Contains(SearchText, StringComparison.OrdinalIgnoreCase))).OrderBy(x => x.Node))
    {
        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/proxmox/" + i.Id + "/home")">
                <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;">
                    <div class="server-item-icon flex-none d-flex">
                        <span class="iconify" data-icon="mdi:server"></span>
                    </div>
                    <div>
                    <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                        @i.Node
                        @if (i.IsOnline)
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Online" IsPill="true" class="ml-2" />
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" class="ml-2" />
                        }
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" class="ml-2 mb-2" Wrap="FlexWrap.Wrap">
                        <RadzenText TextStyle="TextStyle.Body2">Uptime @Utils.GetLocalDate(Session, DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(i.Uptime)))</RadzenText>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" class="mb-2 ml-2" Wrap="FlexWrap.Wrap">
                        
                            <RadzenText TextStyle="TextStyle.Body2"><span class="iconify" data-icon="mdi:storage"></span> @Utils.ToPrettySize(i.DiskSize) DISK</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2"><span class="iconify" data-icon="mdi:cpu-64-bit"></span> @i.CpuSize CPU</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2"><span class="iconify" data-icon="mdi:memory"></span> @Utils.ToPrettySize(i.MemorySize) RAM</RadzenText>
                            
                    </RadzenStack>
                    </div>
                </div>
            </a>
        
        <br />
    }
    }
</div>

<style>
    .server-item {
    background-color: #21262d !important;
    border-radius: 12px;
    border: 1px solid rgba(0,135,201,0.3) !important;
    padding-left: 10px;
    cursor: pointer;
    }

    .server-item:hover {
    border-color: rgba(0,135,201,0.5) !important;
    }

    .server-item-icon {
    vertical-align: center;
    }

    .server-item-icon .iconify {
    width: 40px;
    height: 40px;
    margin-top: 16px;
    color: rgba(0,135,201,0.7) !important;
    }

    .server-item:hover .server-item-icon .iconify {
    color: rgba(0,135,201,0.9) !important;
    }

    .server-item-info {
    padding-left: 10px;
    }

    .server-item-buttons .rz-button {
    min-width: 34px !important;
    display: block !important;
    text-align: right;
    height: 42px;
    max-height: 42px !important;
    }

    .server-item .server-item-buttons .rz-button:hover {
    background-color: rgba(0,135,201,0.3) !important;
    }

    .server-item-buttons .rz-button:first-child {
    border-radius: 0px 12px 0px 0px;
    }

    .server-item-buttons .rz-button:last-child {
    border-radius: 0px 0px 12px 0px;
    }

    .server-item-buttons p {
    display: inline-block !important;
    text-transform: capitalize;
    display: none !important;
    }

    .server-item-buttons .iconify {
    width: 20px;
    height: 20px;
    margin-left: 8px;
    margin-bottom: -4px;
    margin-right: 6px;
    }

    .server-item-buttons:hover .rz-button, .server-item-buttons:hover {
    min-width: 130px !important;
    }

    .server-item-buttons:hover p {
    display: inline-block !important;
    }

    .server-item .rz-stack .iconify {
    height: 16px;
    width: 16px;
    margin-right: 2px;
    margin-bottom: 2px;
}
</style>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();

        await RefreshNodes();
    }

    public string? SearchText { get; set; }
    public void SetNameFilter(string? text)
    {
        SearchText = text;
    }

    public IEnumerable<IClusterResourceNode> Nodes;

    public async Task RefreshNodes()
    {
        if (Team != null && _Data.ProxmoxAgents.TryGetValue(Team.Id, out ProxmoxAgent? agent))
        {
            try
            {
                Nodes = await agent.Client.GetNodesAsync();
                StateHasChanged();
            }
            catch{ }
        }
    }

    public async Task SetupProxmox()
    {
        if (Member == null)
            return;

        if (!Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator))
            return;

        await Dialogs.ShowDynamicFormAsync<ServerSetupModel>("Setup Server", new ServerSetupModel(), async (ServerSetupModel data) =>
            {
                if (Team == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
                    return "You do not have Manage Resource permissions";

                if (data.Port == 0)
                    return "Server port is required.";

                if (string.IsNullOrEmpty(data.Ip))
                    return "Server ip is required.";

                if (Uri.CheckHostName(data.Ip) == UriHostNameType.Unknown)
                    return "Server ip has invalid format.";

                IPAddress? address = null;
                if (!IPAddress.TryParse(data.Ip, out address))
                {
                    IPHostEntry? Host = null;
                    try
                    {
                        Host = Dns.GetHostEntry(data.Ip);
                    }
                    catch { }
                    if (Host != null)
                        address = Host.AddressList.FirstOrDefault();
                }

                if (address == null)
                    return "Server ip is invalid.";

                VanityUrlData Vanity = Team.GetVanityUrlData();

                ClientAgent Client = new ClientAgent
                {
                    Server = null
                };
                ServerData TempServer = new ServerData
                {
                    Name = ":)",
                    AgentIp = data.Ip,
                    AgentPort = data.Port,
                    AgentKey = data.AgentKey
                };

                string? VanityUrl = Utils.FormatVanityUrl(data.VanityUrl);

                if (Vanity.CheckAlreadyExists(null, VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;

                await Client.DiscoverAsync(data.Ip, data.Port);
                if (Client.Discover == null)
                    return "Failed to discover server.";

                TempServer.AgentId = Client.Discover.Id;

                HttpRequestMessage Req = new HttpRequestMessage(HttpMethod.Get, "https://" + TempServer.AgentIp + ":" + TempServer.AgentPort + "/setup");
                Req.Headers.TryAddWithoutValidation("Authorization", TempServer.AgentKey);
                HttpResponseMessage DiscoverResponse = await Program.AgentDiscoverHttp.SendAsync(Req);
                if (!DiscoverResponse.IsSuccessStatusCode)
                {
                    return "Failed to setup server.";
                }

                await Client.Connect(data.Ip, data.Port, data.AgentKey, false);
                await Task.Delay(new TimeSpan(0, 0, 2));
                if (Client == null || !Client.IsConnected)
                {
                    if (Client.WebSocket != null)
                    {
                        Client.WebSocket.DisconnectAndStop();
                        Client.WebSocket.Dispose();
                    }
                    return "Failed to connect to server: " + Client.Error.ToString();
                }

                ServerData Server = new ServerData
                    {
                        Name = data.Name,
                        OwnerId = Member.UserId,
                        TeamId = Member.TeamId,
                        AgentId = Client.Discover.Id,
                        AgentIp = data.Ip,
                        AgentPort = data.Port,
                        AgentKey = data.AgentKey
                    };

                if (Vanity.CheckAlreadyExists(null, VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;
                

                await _DB.Servers.CreateAsync(Server);
                Server.SetWebSocket(Client);
                _DB.Servers.Cache.TryAdd(Server.Id, Server);
                await Vanity.UpdateAsync(Server, VanityUrl);

                _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ServerCreated)
                .SetTarget(Server)
                .SetSensitive()
                .AddProperty("IP", data.Ip)
                .AddProperty("Port", data.Port)
                .AddProperty("Vanity URL", VanityUrl));



                _ =  InvokeAsync(StateHasChanged);
                return null;
            });
    }
}
