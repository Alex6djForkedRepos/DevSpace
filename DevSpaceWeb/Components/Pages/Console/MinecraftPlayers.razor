@using DaRT
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using LibMCRcon.RCon
@using Newtonsoft.Json.Linq
@inject ContextMenuService ContextMenuService
@inject DialogService Dialogs

<PageTitle>Console Players | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:account"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Players</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Resource?.VanityUrl)" Text="@Session.Selected.Team?.Resource?.Data.Name" />
        <RadzenBreadCrumbItem Text="Players" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewPlayers))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Players
            </RadzenAlert>
        </div>

    }
    else
    {
        <br />
        <div class="dash-box-content">
            <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Refresh" Click="@(() => LoadData(new LoadDataArgs { Top = Session.ItemsPerPage }))" Icon="refresh" Disabled="@(!Member.HasConsolePermission(Team, Console, ConsolePermission.ViewPlayers))" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Size="ButtonSize.Small" />
                <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" Placeholder="Search players" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
            </ActionBar>
        </div>
        <RadzenDataGrid @ref="@Grid" Count="@PlayerCount" Data="@Players" LoadData="@LoadData" Density="Density.Compact"
                        PagingSummaryFormat="@($"{PlayerCount} player" + (PlayerCount != 1 ? "s" : ""))"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        EmptyText="No players." PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal">
            <Columns>
                <RadzenDataGridColumn Title="Name" Width="@GridWidth.Name" Property="@nameof(Player.name)">
                    <Template>
                        @context.name
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Filterable="false">
                    <Template>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenButton Icon="build" Click="@(args => ShowContextMenuWithManageItems(context, args))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Resource as ConsoleData;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenDataGrid<Player> Grid { get; set; }

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(0).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public IQueryable<Player> Players { get; set; }

    public int PlayerCount { get; set; }

    async Task LoadData(LoadDataArgs args)
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewPlayers))
            return;

        if (_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc))
        {
            if (rc.IsConnected)
            {
                string ListCommand = await rc.ExecuteCmd("list");
                try
                {
                    ListCommand = ListCommand.Split("online:").Last();
                }
                catch { }

                List<Player> list = new List<Player>();

                foreach (Player i in ListCommand.Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Select(x => new Player(0, null, null, null, x, null)))
                {
                    if (!string.IsNullOrEmpty(i.name) && i.name.Contains(" and "))
                    {
                        string[] SplitAnd = i.name.Split(" and ");
                        list.Add(new Player(0, null, null, null, SplitAnd[0], null));
                        list.Add(new Player(0, null, null, null, SplitAnd[1], null));
                    }
                    else
                        list.Add(i);
                }

                IQueryable<Player> query = list.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                PlayerCount = query.Count();
                Players = query.OrderBy(x => x.name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
            else
            {
                PlayerCount = 0;
                Players = new List<Player>().AsQueryable();
            }

            StateHasChanged();
        }
        else
        {
            PlayerCount = 0;
            Players = new List<Player>().AsQueryable();
        }

    }


    void ShowContextMenuWithManageItems(Player item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Message", Value = "message", Icon = "chat", Disabled = !Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers) },
                new ContextMenuItem(){ Text = "Teleport To", Value = "teleport", Icon = "move_location", Disabled = !Member.HasConsolePermission(Team, Console, ConsolePermission.UseConsoleCommands) },
                new ContextMenuItem(){ Text = "Ban Player", Value = "ban", Icon = "hardware", Disabled = !Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers) },
                new ContextMenuItem(){ Text = "Ban IP", Value = "ban_ip", Icon = "hardware", Disabled = !Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers) },
                new ContextMenuItem(){ Text = "Kick Player", Value = "kick", Icon = "podiatry", Disabled = !Member.HasConsolePermission(Team, Console, ConsolePermission.KickPlayers) },
                                                             }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, Player item)
    {
        ContextMenuService.Close();
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Console == null || Member == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "ban":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
                            return;
                        }

                        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to ban", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Ban " + item.name, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                                return "You do not have permission for Ban Players";

                            if (!rcon.IsConnected)
                                return "Could not connect to server.";
                            string Command = "ban " + item.name;
                            if (!string.IsNullOrEmpty(data.Reason))
                                Command += " " + data.Reason;

                            string Result = await rcon.ExecuteCmd(Command);
                            await Dialogs.ShowInfoAsync("Ban Result", Result);
                            Grid.Reload();
                            return null;
                        });
                    }
                    break;
                case "ban_ip":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
                            return;
                        }

                        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to ban", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Ban IP " + item.name, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                                return "You do not have permission for Ban Players";

                            if (!rcon.IsConnected)
                                return "Could not connect to server.";

                            string Command = "ban-ip " + item.name;
                            if (!string.IsNullOrEmpty(data.Reason))
                                Command += " " + data.Reason;

                            string Result = await rcon.ExecuteCmd(Command);
                            await Dialogs.ShowInfoAsync("Ban Result", Result);
                            Grid.Reload();
                            return null;
                        });
                    }
                    break;
                case "kick":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.KickPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.KickPlayers);
                            return;
                        }

                        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Kick " + item.name, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.KickPlayers))
                                return "You do not have permission for Kick Players";

                            if (!rcon.IsConnected)
                                return "Could not connect to server.";

                            string Command = "kick " + item.name;
                            if (!string.IsNullOrEmpty(data.Reason))
                                Command += " " + data.Reason;

                            string Result = await rcon.ExecuteCmd(Command);
                            await Dialogs.ShowInfoAsync("Kick Result", Result);
                            Grid.Reload();
                            return null;
                        });
                    }
                    break;
                case "teleport":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.UseConsoleCommands))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.UseConsoleCommands);
                            return;
                        }

                        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Teleport", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsolePlayerModel>("Teleport " + item.name, new ConsolePlayerModel(), async (ConsolePlayerModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.UseConsoleCommands))
                                return "You do not have permission for Use Console Commands";

                            if (!rcon.IsConnected)
                                return "Could not connect to server.";

                            string Command = $"tp {item.name} {data.Player}";

                            string Result = await rcon.ExecuteCmd(Command);
                            await Dialogs.ShowInfoAsync("Teleport Result", Result);
                            return null;
                        });
                    }
                    break;
                case "message":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.MessagePlayers);
                            return;
                        }

                        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleMessageModel>("Message " + item.name, new ConsoleMessageModel(), async (ConsoleMessageModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers))
                                return "You do not have permission for Message Players";

                            if (!rcon.IsConnected)
                                return "Could not connect to server.";

                            string Result = await rcon.ExecuteCmd("tell " + item.name + " " + data.Message);
                            await Dialogs.ShowInfoAsync("Message Result", Result);
                            return null;
                        });
                    }
                    break;
            }
        });
    }

}
