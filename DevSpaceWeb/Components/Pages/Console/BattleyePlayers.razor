@using DaRT
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using Newtonsoft.Json.Linq
@inject ContextMenuService ContextMenuService
@inject DialogService Dialogs

<PageTitle>Console Players | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:account"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Players</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Console?.VanityUrl)" Text="@Session.Selected.Team?.Console?.Data.Name" />
        <RadzenBreadCrumbItem Text="Players" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewPlayers))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Players
            </RadzenAlert>
        </div>
    }
    else
    {
        <br />
        <div class="dash-box-content">
            <ActionBar>
                <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" Placeholder="Search players" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
            </ActionBar>
        </div>
        <RadzenDataGrid @ref="@Grid" Count="@PlayerCount" Data="@Players" LoadData="@LoadData"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        EmptyText="No players." PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal">
            <Columns>
                <RadzenDataGridColumn Title="ID" Width="60px" Property="@nameof(Player.number)">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.number</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="GUID" Width="240px" Property="@nameof(Player.guid)">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.guid</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Property="@nameof(Player.name)">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.name</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Ping" Width="80px" Filterable="false">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.ping ms</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="100px" Property="@nameof(Player.status)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.status</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsOne" Filterable="false">
                    <Template>
                        <RadzenButton Icon="build" Click="@(args => ShowContextMenuWithManageItems(context, args))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    public IEnumerable<Player>? Players { get; set; }
    public int PlayerCount { get; set; }

    public RadzenDataGrid<Player> Grid { get; set; }

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(2).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    void LoadData(LoadDataArgs args)
    {
        if (Console == null)
            return;

        if (_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc))
        {
            if (rc.IsConnected)
            {
                IQueryable<Player> query = rc.GetPlayers().AsQueryable();
                rc.GetMissions();

                PlayerCount = query.Count();
                Players = query.Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault()).ToList();
            }
            else
            {
                PlayerCount = 0;
                Players = new List<Player>();
            }

            StateHasChanged();
        }
        else
        {
            PlayerCount = 0;
            Players = new List<Player>();
        }

    }

    public string ParseTime(int time)
    {
        if (time > 1440)
        {
            return $"{(int)new TimeSpan(0, time, 0).TotalDays} days";
        }
        else if (time > 60)
        {
            return $"{(int)new TimeSpan(0, time, 0).TotalHours} hours";
        }

        return $"{time} minutes";
    }

    void ShowContextMenuWithManageItems(Player item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Message", Value = "message", Icon = "chat" },
                new ContextMenuItem(){ Text = "Ban Player", Value = "ban", Icon = "hardware" },
                new ContextMenuItem(){ Text = "Ban IP", Value = "ban_ip", Icon = "plumbing" },
                new ContextMenuItem(){ Text = "Kick Player", Value = "kick", Icon = "podiatry" },
                                                                 }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, Player item)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Console == null || Member == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "ban":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
                            return;
                        }

                        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Ban", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Ban " + item.name, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                                return "You do not have permission for Ban Players";

                            if (!rc.IsConnected)
                                return "Could not connect to server.";

                            rc.BanPlayer(new Ban(item.guid, 0, data.Reason));
                            await Dialogs.ShowInfoAsync("Ban Result", $"{item.name} has been banned.");
                            return null;
                        });
                    }
                    break;
                case "ban_ip":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
                            return;
                        }

                        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Ban IP", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Ban IP " + item.ip, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
                                return "You do not have permission for Ban Players";

                            if (!rc.IsConnected)
                                return "Could not connect to server.";

                            rc.BanIP(new BanIP(item.number, item.name, "0", data.Reason));
                            await Dialogs.ShowInfoAsync("IP Ban Result", $"{item.name}'s IP has been banned.");
                            return null;
                        });
                    }
                    break;
                case "kick":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.KickPlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.KickPlayers);
                            return;
                        }

                        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Kick", "Could not connect to server.");
                            return;
                        }
                        await Dialogs.ShowDynamicFormAsync<ConsoleReasonModel>("Kick " + item.name, new ConsoleReasonModel(), async (ConsoleReasonModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.KickPlayers))
                                return "You do not have permission for Kick Players";

                            if (!rc.IsConnected)
                                return "Could not connect to server.";

                            rc.KickPlayer(new Kick(item.number, item.name, data.Reason));
                            await Dialogs.ShowInfoAsync("Kick Result", $"{item.name} has been kicked.");
                            return null;
                        });
                    }
                    break;
                case "message":
                    {
                        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers))
                        {
                            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.MessagePlayers);
                            return;
                        }

                        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                        {
                            await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                            return;
                        }

                        await Dialogs.ShowDynamicFormAsync<ConsoleMessageModel>("Message " + item.name, new ConsoleMessageModel(), async (ConsoleMessageModel data) =>
                        {
                            if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers))
                                return "You do not have permission for Message Players";

                            if (!rc.IsConnected)
                                return "Could not connect to server.";

                            rc.SayPrivate(new Message(item.number, item.name, data.Message));
                            await Dialogs.ShowInfoAsync("Message Result", $"Message sent to {item.name}");
                            return null;
                        });
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

}
