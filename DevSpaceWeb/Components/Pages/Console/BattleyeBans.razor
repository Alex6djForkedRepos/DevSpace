@using DaRT
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Data.Consoles
@using Newtonsoft.Json.Linq
@using System.Text
@inject DialogService Dialogs

<PageTitle>Console Bans | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:court-hammer"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Bans</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Console?.VanityUrl)" Text="@Session.Selected.Team?.Console?.Data.Name" />
        <RadzenBreadCrumbItem Text="Bans" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewBans))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Bans
            </RadzenAlert>
        </div>

    }
    else
    {
        <br />
        <div class="dash-box-content">
            <ActionBar>
                <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" Placeholder="Search bans" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
            </ActionBar>
        </div>
        <RadzenDataGrid @ref="@Grid" Count="@BanCount" Data="@Bans" LoadData="@LoadData"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        EmptyText="No bans." PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal">
            <Columns>
                <RadzenDataGridColumn Title="ID/IP" Width="@GridWidth.IP" Filterable="@Member.HasConsolePermission(Team, Console, ConsolePermission.ViewIPs)" Property="@nameof(Ban.ipguid)">
                    <Template>
                        @if (!string.IsNullOrEmpty(context.ipguid) && context.ipguid.Contains('.'))
                        {
                            @if (Member.HasConsolePermission(Team, Console, ConsolePermission.ViewIPs))
                            {
                                <RadzenTextMask Value="@context.ipguid" Type="RadzenTextMaskType.IP"></RadzenTextMask>
                            }
                            else
                            {
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @GetMask(context.ipguid)
                                </RadzenText>
                        }
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@context.ipguid</RadzenText>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Reason" Property="@nameof(Ban.reason)">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.reason</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Duration" Width="@GridWidth.Date" Filterable="false">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@ParseTime(context.Duration)</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Action" Width="@GridWidth.ActionsOne" Filterable="false">
                    <Template>
                        <RadzenButton Text="Unban" Click="@(() => UnbanPlayer(context))" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    public IEnumerable<Ban>? Bans { get; set; }
    public int BanCount { get; set; }

    public RadzenDataGrid<Ban> Grid { get; set; }

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(0).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public string GetMask(string value)
    {
        bool FirstDot = false;
        StringBuilder result = new StringBuilder();
        foreach (char c in value)
        {
            if (c == '.')
            {
                result.Append(c);
                FirstDot = true;
            }
            else
            {
                if (FirstDot)
                    result.Append('*');
                else
                    result.Append(c);
            }
        }
        return result.ToString();
    }

    void LoadData(LoadDataArgs args)
    {
        if (Console == null)
            return;

        if (_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc))
        {
            if (rc.IsConnected)
            {
                IQueryable<Ban> query = rc.GetBans().AsQueryable();

                BanCount = query.Count();
                Bans = query.Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault()).ToList();
            }
            else
            {
                BanCount = 0;
                Bans = new List<Ban>();
            }

            StateHasChanged();
        }
        else
        {
            BanCount = 0;
            Bans = new List<Ban>();
        }
    }

    public string ParseTime(int time)
    {
        if (time == 0)
            return "Permanent";

        if (time > 1440)
        {
            return $"{(int)new TimeSpan(0, time, 0).TotalDays} days";
        }
        else if (time > 60)
        {
            return $"{(int)new TimeSpan(0, time, 0).TotalHours} hours";
        }

        return $"{time} minutes";
    }

    public async Task UnbanPlayer(Ban ban)
    {
        if (Member == null || Console == null)
            return;

        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
            return;
        }

        bool Confirm = await Dialogs.ShowConfirmAsync($"Unban {ban.ipguid}", "Are you sure you want to unban?", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (!Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
            return;
        }

        if (!rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
            return;
        }
        rc.UnbanPlayer(ban.GUID);
    }
}
