@using DaRT
@using DevSpaceWeb.Data.Consoles
@using LibMCRcon.RCon
@inject DialogService Dialogs

<PageTitle>Console Commands | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:console"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Console</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Console?.VanityUrl)" Text="@Session.Selected.Team?.Console?.Data.Name" />
        <RadzenBreadCrumbItem Text="Console" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewConsoleLogs))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Console Logs
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenStack Orientation="Orientation.Horizontal" Gap="2" class="dash-box-content">
            <RadzenDropDown @bind-Value="@SelectedCommandType" Data="@CommandTypes" Style="min-width: 120px;" />
            @if (SelectedCommandType == "Say Player")
            {
                <RadzenDropDown @bind-Value="@SelectedPlayer" Data="@Players" TextProperty="@nameof(Player.name)" Style="min-width: 200px;" />
            }
            <RadzenTextBox @bind-Value="@CommandInput" Style="width: 100%" aria-label="Command TextBox" />
            <RadzenButton Click="@SendCommand" Text="Send" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Style="min-width: 60px;" />
        </RadzenStack>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    public string SelectedCommandType = "Command";

    [Parameter]
    public ObjectId ConsoleId { get; set; }

    public string[] CommandTypes = new string[]
    {
        "Command",
        "Say Global",
        "Say Player"
    };

    public Player? SelectedPlayer;

    public List<Player> Players = new List<Player>();

    public string? CommandInput;

    public async Task SendCommand()
    {
        if (Console == null || Member == null)
            return;

        switch (SelectedCommandType)
        {
            case "Command":
                {
                    if (!Member.HasConsolePermission(Team, Console, ConsolePermission.UseConsoleCommands))
                    {
                        await Dialogs.ShowPermissionErrorAsync(ConsolePermission.UseConsoleCommands);
                        return;
                    }

                    if (string.IsNullOrEmpty(CommandInput))
                        return;

                    switch (Console.Type)
                    {
                        case ConsoleType.Battleye:
                            {
                                if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Command", "Could not connect to server.");
                                    return;
                                }
                                rc.ExecuteCommand(CommandInput);
                            }
                            break;
                        case ConsoleType.Minecraft:
                            {
                                if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }

                                string Result = await rc.ExecuteCmd(CommandInput);
                                await Dialogs.ShowInfoAsync("Command Result", Result);
                            }
                            break;
                        case ConsoleType.Source:
                            {
                                if (!_Data.SourceRcons.TryGetValue(Console.Id, out var rc) || !rc.Connected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }
                                string Result = await rc.SendCommandAsync(CommandInput);
                                await Dialogs.ShowInfoAsync("Command Result", Result);

                            }
                            break;
                    }


                }
                break;
            case "Say Global":
                {
                    if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessageGlobal))
                    {
                        await Dialogs.ShowPermissionErrorAsync(ConsolePermission.MessageGlobal);
                        return;
                    }

                    if (string.IsNullOrEmpty(CommandInput))
                        return;

                    switch (Console.Type)
                    {
                        case ConsoleType.Battleye:
                            {
                                if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }

                                rc.SayGlobal(CommandInput);
                            }
                            break;
                        case ConsoleType.Minecraft:
                            {
                                if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }

                                string Result = await rc.SayGlobal(CommandInput);
                                await Dialogs.ShowInfoAsync("Message Result", Result);
                            }
                            break;
                        case ConsoleType.Source:
                            {
                                if (!_Data.SourceRcons.TryGetValue(Console.Id, out var rc) || !rc.Connected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }
                                string Result = await rc.SendCommandAsync("say " + CommandInput);
                                await Dialogs.ShowInfoAsync("Command Result", Result);

                            }
                            break;
                    }


                }
                break;
            case "Say Player":
                {
                    if (!Member.HasConsolePermission(Team, Console, ConsolePermission.MessagePlayers))
                    {
                        await Dialogs.ShowPermissionErrorAsync(ConsolePermission.MessagePlayers);
                        return;
                    }

                    if (SelectedPlayer == null || string.IsNullOrEmpty(CommandInput))
                        return;

                    switch (Console.Type)
                    {
                        case ConsoleType.Battleye:
                            {
                                if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }

                                if (string.IsNullOrEmpty(SelectedPlayer.name))
                                    return;

                                rc.SayPrivate(new Message(SelectedPlayer.number, SelectedPlayer.name, CommandInput));
                            }
                            break;
                        case ConsoleType.Minecraft:
                            {
                                if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc) || !rc.IsConnected)
                                {
                                    await Dialogs.ShowInfoAsync("Failed to Send Message", "Could not connect to server.");
                                    return;
                                }

                                if (string.IsNullOrEmpty(SelectedPlayer.name))
                                    return;

                                string Result = await rc.SayPlayer(SelectedPlayer.name, CommandInput);
                                await Dialogs.ShowInfoAsync("Message Result", Result);
                            }
                            break;
                        case ConsoleType.Source:
                            {
                                await Dialogs.ShowInfoAsync("Failed to Send Message", "Feature not implemented.");
                            }
                            break;
                    }


                }
                break;
        }

        CommandInput = null;
    }
}
