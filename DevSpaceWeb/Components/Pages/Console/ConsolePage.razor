@using BattleNET
@using DaRT
@using DevSpaceWeb.Data.Consoles
@using LibMCRcon.RCon
@inject DialogService Dialogs

<PageTitle>@Console?.Name | @_Data.Config.Instance.Name</PageTitle>

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-right-sidebar'">
    <RadzenBody>
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon dash-box-back" onclick="history.back()">
                    <span class="iconify" data-icon="mdi:console-line"></span>
                    <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
                </div>
                <RadzenText TextStyle="TextStyle.H6">@Console?.Name</RadzenText>
                @if (Console != null && Console.Type == ConsoleType.Battleye)
                {
                    <div @onclick="@(() => LogSidebarExpanded = !LogSidebarExpanded)" style="margin-left: auto;">
                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:view-split-vertical"></span></div>
                    </div>
                }
            </div>
            <br />
            @switch (Console?.Type)
            {
                case ConsoleType.Battleye:
                    {
                        if (_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rcon))
                        {
                            switch (rcon.BEResult)
                            {
                                case BattlEyeConnectionResult.Success:
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Success" Text="Connected" IsPill="true" />
                                    break;
                                case BattlEyeConnectionResult.InvalidLogin:
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="Invalid Login" IsPill="true" />
                                    break;
                                case BattlEyeConnectionResult.ConnectionFailed:
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="Connection Failed" IsPill="true" />
                                    break;
                            }
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="Error" IsPill="true" />
                        }
                    }
                    break;
                case ConsoleType.Minecraft:
                    {
                        if (_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon))
                        {
                            switch (rcon.IsConnected)
                            {
                                case true:
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Success" Text="Connected" IsPill="true" />
                                    break;
                                case false:
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="Connection Failed" IsPill="true" />
                                    break;
                            }
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="Error" IsPill="true" />
                        }
                    }
                    break;
            }

            @switch (Console?.Type)
            {
                case ConsoleType.Battleye:
                    {
                        @switch (Page)
                        {
                            case null:
                            case "":
                            case "home":
                                <br />
                                <br />
                                <div>
                                    <RadzenButton Click="@LockServer" Text="Lock Server" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@UnlockServer" Text="Unlock Server" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@RestartServer" Text="Restart Server" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@ShutdownServer" Text="Shutdown Server" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                </div>
                                <div class="mt-4">
                                    <RadzenButton Click="@ReloadConfig" Text="Reload Config" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@ReloadEvents" Text="Reload Events" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@ReloadScripts" Text="Reload Scripts" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@ReloadBans" Text="Reload Bans" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                    <RadzenButton Click="@Reassign" Text="Reassign" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                                </div>
                                break;
                        }
                    }
                    break;
                case ConsoleType.Minecraft:
                    {
                        <br />
                        <br />
                        <div>
                            <RadzenButton Click="@RestartServer" Text="Restart Server" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                            <RadzenButton Click="@ShutdownServer" Text="Shutdown Server" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Disabled="@(Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))" />
                        </div>
                    }
                    break;
            }

        </div>
        @switch (Page)
        {
            case null:
            case "":
            case "home":
                <ConsoleSettings></ConsoleSettings>
                break;
            case "test":
                @if (Program.IsDevMode)
                {
                    <ConsoleTests></ConsoleTests>
                }
                else
                {
                    <p>The cake is a lie</p>
                }
                break;
            case "players":
                @switch (Console?.Type)
                {
                    case ConsoleType.Battleye:
                        {
                            <BattleyePlayers></BattleyePlayers>
                        }
                        break;
                    case ConsoleType.Minecraft:
                        {
                            <MinecraftPlayers></MinecraftPlayers>
                        }
                        break;
                }

                break;
            case "bans":
                @switch (Console?.Type)
                {
                    case ConsoleType.Battleye:
                        {
                            <BattleyeBans></BattleyeBans>
                        }
                        break;
                    case ConsoleType.Minecraft:
                        {
                            <MinecraftBans></MinecraftBans>
                        }
                        break;
                }

                break;
            case "console":
                @switch (Console?.Type)
                {
                    case ConsoleType.Battleye:
                        {
                            <ConsoleCommands></ConsoleCommands>
                        }
                        break;
                    case ConsoleType.Minecraft:
                        {
                            <ConsoleCommands></ConsoleCommands>
                        }
                        break;
                }

                break;
            case "connections":
                @switch (Console?.Type)
                {
                    case ConsoleType.Battleye:
                        {
                            <BattleyeAdmins></BattleyeAdmins>
                        }
                        break;
                    case ConsoleType.Minecraft:
                        {

                        }
                        break;
                }
                break;
            case"settings":
                <ConsoleSettingsBasic></ConsoleSettingsBasic>
                break;
            case "permissions":
                <ConsolePermissions></ConsolePermissions>
                break;
            case "rcon":
                <ConsoleSettingsRcon></ConsoleSettingsRcon>
                break;
        }
    </RadzenBody>

    @if (Console != null && Console.Type == ConsoleType.Battleye)
    {
        <RadzenSidebar @bind-Expanded="@LogSidebarExpanded" class="rz-right-sidebar" Style="@("width: " + (LogSidebarExpanded ? "340px" : "0px") + " !important; grid-area: rz-right-sidebar")">
            @if (Member != null && Member.HasConsolePermission(Team, Console, ConsolePermission.ViewConsoleLogs) && _Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rcon))
            {
                <div>
                    <div class="dash-box-header dash-box-content">
                        <div class="dash-box-icon">
                            <span class="iconify" data-icon="mdi:view-list"></span>
                        </div>
                        <RadzenText TextStyle="TextStyle.H6">Logs</RadzenText>

                    </div>
                    @switch (Console.Type)
                    {
                        case ConsoleType.Battleye:
                            {
                                <RadzenDataGrid Data="@rcon.CachedMessages"
                                        EmptyText="No logs." 
                                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal">
                                    <Columns>
                                        <RadzenDataGridColumn Width="90px">
                                            <Template>
                                                <RadzenText TextStyle="TextStyle.Body2" class="log-time">@context.Time</RadzenText>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn>
                                            <Template>
                                                <RadzenText TextStyle="TextStyle.Body2">@context.FilteredMessage</RadzenText>
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>

                                </RadzenDataGrid>

                            }
                            break;
                        case ConsoleType.Minecraft:
                            {

                            }
                            break;
                    }

                </div>
            }
        </RadzenSidebar>
    }
</RadzenLayout>
<style>
    .rz-body .rz-sidebar {
    background: none !important;
    border-color: none !important;
    width: 260px !important;
    background-color: rgba(24,25,28,0.85) !important;
    border: 1px solid rgba(47,48,49,0.8) !important;
    border-radius: 8px;
    height: calc(100vh - 90px);
    }

    .rz-body .rz-body {
    padding: 0px;
    }

    .log-time {
    text-align: center;
    text-wrap: wrap;
    }

    .rz-right-sidebar thead {
    display: none;
    }

    .rz-right-sidebar td {
    padding: 2px !important;
    }

    .rz-right-sidebar {
    padding: 0px;
    margin-left: 18px;
    }

</style>



@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    public bool LogSidebarExpanded { get; set; }

    [Parameter]
    public string? Page { get; set; }

    public async Task LockServer()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Lock Server", "Could not connect to server.");
            return;
        }

        rc.LockServer();
    }

    public async Task UnlockServer()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Unlock Server", "Could not connect to server.");
            return;
        }

        rc.UnlockServer();
    }

    public async Task RestartServer()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        switch (Console.Type)
        {
            case ConsoleType.Battleye:
                {
                    if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                    {
                        await Dialogs.ShowInfoAsync("Failed to Restart Server", "Could not connect to server.");
                        return;
                    }

                    rc.RestartServer();
                }
                break;
            case ConsoleType.Minecraft:
                {
                    if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc) || !rc.IsConnected)
                    {
                        await Dialogs.ShowInfoAsync("Failed to Restart Server", "Could not connect to server.");
                        return;
                    }

                    string Result = await rc.ExecuteCmd("restart");
                    if (Result.Contains("unknown command", StringComparison.OrdinalIgnoreCase))
                    {
                        await Dialogs.ShowInfoAsync("Failed to Restart Server", "Server does not support restart.");
                        return;
                    }
                }
                break;
        }


    }

    public async Task ShutdownServer()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        switch (Console.Type)
        {
            case ConsoleType.Battleye:
                {
                    if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
                    {
                        await Dialogs.ShowInfoAsync("Failed to Stop Server", "Could not connect to server.");
                        return;
                    }

                    rc.ShutdownServer();
                }
                break;
            case ConsoleType.Minecraft:
                {
                    if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc) || !rc.IsConnected)
                    {
                        await Dialogs.ShowInfoAsync("Failed to Stop Server", "Could not connect to server.");
                        return;
                    }

                    await rc.ExecuteCmd("stop");
                }
                break;
        }
    }

    public async Task ReloadConfig()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Reload Config", "Could not connect to server.");
            return;
        }

        rc.ReloadConfig();
    }

    public async Task ReloadEvents()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Reload Events", "Could not connect to server.");
            return;
        }
        rc.ReloadEvents();
    }

    public async Task ReloadScripts()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Reload Scripts", "Could not connect to server.");
            return;
        }

        rc.ReloadScripts();
    }

    public async Task ReloadBans()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Reload Bans", "Could not connect to server.");
            return;
        }

        rc.ReloadBans();
    }

    public async Task Reassign()
    {
        if (Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ControlServer))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.ControlServer);
            return;
        }

        if (!_Data.BattleyeRcons.TryGetValue(Console.Id, out RCon? rc) || !rc.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Reassign", "Could not connect to server.");
            return;
        }

        rc.Reassign();
    }
}
