@using DaRT
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using System.Net
@using LibMCRcon.RCon


<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Rcon Settings</RadzenText>
    </div>
    @if (!Member.HasConsolePermission(Console, ConsolePermission.ManageConnection))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Manage Connection
        </RadzenAlert>
    }
    else
    {
        <br />
        <DynamicFormDialog Model="@ModifyRconModel" ModelData="@Data" OnSubmit="@UpdateRconSettings"></DynamicFormDialog>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;
    public ConsoleData Console => Session.Selected.Console;
    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        Data = new ModifyRconModel
        {
            Ip = Console.Ip,
            Port = Console.Port
        };
    }

    public ModifyRconModel Data { get; set; }

    public async Task<string?> UpdateRconSettings(ModifyRconModel model)
    {
        if (!Member.HasConsolePermission(Console, ConsolePermission.ManageConsole))
            return "You do not have Manage Console permissions.";


        if (!IPAddress.TryParse(model.Ip, out _))
            return "Invalid IP address.";
        


        if (model.Port == 0)
            return "Console port is required.";

        switch (Console.Type)
        {
            case ConsoleType.Battleye:
                {
                    RCon rcon = new RCon();
                    rcon.Connect(IPAddress.Parse(model.Ip), model.Port, model.Password);
                    if (!rcon.IsConnected)
                        return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                }
                break;
            case ConsoleType.Minecraft:
                {
                    TCPRconAsync rcon = new TCPRconAsync
                        {
                            RConHost = model.Ip,
                            RConPort = model.Port,
                            RConPass = model.Password
                        };
                    bool Success = await rcon.StartComms();
                    if (!Success)
                        return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                }
                break;
        }


        await Console.UpdateAsync(new UpdateDefinitionBuilder<ConsoleData>()
        .Set(x => x.Ip, model.Ip)
        .Set(x => x.Port, model.Port)
        .Set(x => x.EncryptedPassword, string.IsNullOrEmpty(model.Password) ? Console.EncryptedPassword : model.Password),
        async () =>
        {
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Setting, AuditLogEventType.ConsoleRconChanged)
                .SetTarget(Console)
                .SetSensitive()
                .AddPropertyChange("IP", Console.Ip, model.Ip)
                .AddPropertyChange("Port", Console.Port, model.Port));

            Console.Ip = model.Ip;
            Console.EncryptedPassword = model.Password;
            Console.ResetDecryptedPassword();
            Console.Port = model.Port;

            switch (Console.Type)
            {
                case ConsoleType.Battleye:
                    {
                        RCon rcon = new RCon();
                        rcon.Connect(IPAddress.Parse(model.Ip), model.Port, model.Password);
                        _Data.BattleyeRcons.Remove(Console.Id);
                        _Data.BattleyeRcons.TryAdd(Console.Id, rcon);
                    }
                    break;
                case ConsoleType.Minecraft:
                    {
                        TCPRconAsync rcon = new TCPRconAsync
                            {
                                RConHost = model.Ip,
                                RConPort = model.Port,
                                RConPass = model.Password
                            };
                        await rcon.StartComms();
                        _Data.MinecraftRcons.Remove(Console.Id);
                        _Data.MinecraftRcons.TryAdd(Console.Id, rcon);
                    }
                    break;
            }

            Session.TriggerNavMenuChange();
        });
        return null;
    }
}
