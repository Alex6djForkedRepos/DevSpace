@using DevSpaceWeb.Data.Consoles
@inject DialogService DialogService

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Settings</RadzenText>
    </div>
    <br />
    <RadzenStack Gap="10px" JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
        <a href="@("/teams/" + Session.Selected.Team.VanityUrl + "/consoles/" + Session.Selected.Team.Console.VanityUrl + "/settings")">
            <RadzenCard class="@("rz-p-1 rz-text-align-center settings-item" + (Member.HasConsolePermission(Console, ConsolePermission.ManageConsole) ? "" : " settings-item-disabled"))">
                <span class="iconify" data-icon="mdi:list-box"></span>
                <RadzenText TextStyle="TextStyle.H6">Basic</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/teams/" + Session.Selected.Team.VanityUrl + "/consoles/" + Session.Selected.Team.Console.VanityUrl + "/rcon")">
            <RadzenCard class="@("rz-p-1 rz-text-align-center settings-item" + (Member.HasConsolePermission(Console, ConsolePermission.ManageConnection) ? "" : " settings-item-disabled"))">
                <span class="iconify" data-icon="mdi:console-line"></span>
                <RadzenText TextStyle="TextStyle.H6">Rcon</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/teams/" + Session.Selected.Team.VanityUrl + "/consoles/" + Session.Selected.Team.Console.VanityUrl + "/permissions")">
            <RadzenCard class="@("rz-p-1 rz-text-align-center settings-item" + (Member.HasConsolePermission(Console, ConsolePermission.ManagePermissions) ? "" : " settings-item-disabled"))">
                <span class="iconify" data-icon="mdi:shield-key"></span>
                <RadzenText TextStyle="TextStyle.H6">Permissions</RadzenText>
            </RadzenCard>
        </a>
    </RadzenStack>
</div>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Manage</RadzenText>
    </div>
    <br />
    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Owner</RadzenText>
    <RadzenUserSelector Value="@OwnerUser" Disabled="@(!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))" OnSelected="@ChangeOwner"></RadzenUserSelector>
    <br />
    <RadzenButton Click="@Delete" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Text="Delete Console" Disabled="@(!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))" />
</div>

<style>
    .settings-item {
    width: 140px;
    height: 140px;
    }

    .settings-item .iconify {
    width: 36px;
    height: 36px;
    margin-top: 26px;
    color: var(--rz-info);
    }

    .settings-item .rz-text-h6 {
    margin-top: 14px;
    font-size: 1.1rem;
    color: var(--rz-base-200) !important;
    }

    .rz-stack a {
    text-decoration: none !important;
    }

    .settings-item:hover {
    background-color: var(--rz-base-dark);
    outline: solid 1px var(--rz-secondary-dark) !important;
    }

    .settings-item-disabled {
        opacity: 0.6;
        cursor: not-allowed !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public ConsoleData Console => Session.Selected.Console;
    public TeamMemberData Member => Session.Selected.Member;

    public string OwnerUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Console != null)
        {
            if (_DB.Users.TryGetValue(Console.OwnerId, out var user))
                OwnerUser = user.UserName;
            else
                OwnerUser = "Unknown?";

        }
    }

    public async Task Delete()
    {
        if (!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Delete Console", "Are you sure your want to delete this?.", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            if (!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))
                return;

            await Console.DeleteAsync(Member, () =>
            {
                Session.Selected.Team.Console = null;
            });
        }
    }


    public async Task ChangeOwner(PartialUserData user)
    {
        if (!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Change Ownership", "Change API client owner, this will also reset the token.", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            if (!Member.HasConsolePermission(Console, ConsolePermission.ManageResource))
                return;

            await Console.UpdateAsync(new UpdateDefinitionBuilder<ConsoleData>()
            .Set(x => x.OwnerId, user.Id), () =>
            {
                Console.OwnerId = user.Id;
                OwnerUser = user.UserName;

                _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Member, AuditLogEventType.ConsoleOwnershipChanged)
                .SetTarget(Console)
                .AddProperty("User", user.UserName)
                .AddProperty("ID", user.Id.ToString()));

                StateHasChanged();
            });
        }
    }
}
