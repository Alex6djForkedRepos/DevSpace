@using DaRT
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using System.Net
@using LibMCRcon.RCon


<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Basic Settings</RadzenText>
    </div>
    <br />
    <DynamicFormDialog Model="@ModifyConsoleModel" ModelData="@Data" OnSubmit="@UpdateSettings"></DynamicFormDialog>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;
    public ConsoleData Console => Session.Selected.Console;
    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        Data = new ModifyConsoleModel
        {
            Name = Console.Name,
            VanityUrl = Console.VanityUrl
        };
    }

    public ModifyConsoleModel Data { get; set; }

    public async Task<string?> UpdateSettings(ModifyConsoleModel model)
    {
        if (!Member.HasConsolePermission(Console, ConsolePermission.ManageConsoles))
            return "You do not have Manage Console permissions.";

        VanityUrlData Vanity = Team.GetVanityUrlData();
        if (!string.IsNullOrEmpty(model.VanityUrl))
            model.VanityUrl = Utils.FormatVanityUrl(model.VanityUrl);

        if (Vanity.CheckAlreadyExists(Console, model.VanityUrl))
            return Lang.Errors.vanity_url_already_taken;

        await Console.UpdateAsync(new UpdateDefinitionBuilder<ConsoleData>()
        .Set(x => x.Name, model.Name)
        .Set(x => x.VanityUrl, Utils.FormatVanityUrl(model.VanityUrl)),
        async () =>
        {
            Console.Name = model.Name;
            VanityUrlData Vanity = Team.GetVanityUrlData();
            await Vanity.UpdateAsync(Console, Utils.FormatVanityUrl(model.VanityUrl));
            Session.Selected.Team.Console.VanityUrl = Console.GetVanityUrlOrId();
            Session.TriggerNavMenuChange();
        });
        return null;
    }
}
