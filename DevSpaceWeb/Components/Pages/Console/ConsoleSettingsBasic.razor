@using DaRT
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using System.Net
@using LibMCRcon.RCon

<PageTitle>Console Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:gear"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Console Settings</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Console?.VanityUrl)" Text="@Session.Selected.Team?.Console?.Data.Name" />
        <RadzenBreadCrumbItem Text="Settings" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ManageConsole))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Manage Console
        </RadzenAlert>
    }
    else
    {
        <br />
        @if (Data != null)
        {
            <DynamicFormDialog Model="@ModifyConsoleModel" ModelData="@Data" OnSubmit="@UpdateSettings"></DynamicFormDialog>
        }
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        if (Console != null)
            Data = new ModifyConsoleModel
            {
                Name = Console.Name,
                VanityUrl = Console.VanityUrl
            };
    }

    public ModifyConsoleModel? Data { get; set; }

    public async Task<string?> UpdateSettings(ModifyConsoleModel model)
    {
        if (Team == null || Console == null || Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ManageConsole))
            return "You do not have Manage Console permissions.";

        VanityUrlData Vanity = Team.GetVanityUrlData();
        if (!string.IsNullOrEmpty(model.VanityUrl))
            model.VanityUrl = Utils.FormatVanityUrl(model.VanityUrl);

        if (Vanity.CheckAlreadyExists(Console, model.VanityUrl))
            return Lang.Errors.vanity_url_already_taken;

        string? VanityUrl = Utils.FormatVanityUrl(model.VanityUrl);

        await Console.UpdateAsync(new UpdateDefinitionBuilder<ConsoleData>()
        .Set(x => x.Name, model.Name)
        .Set(x => x.VanityUrl, VanityUrl),
        async () =>
        {
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Setting, AuditLogEventType.ConsoleSettingsChanged)
                .SetTarget(Console)
                .AddPropertyChange("Name", Console.Name, model.Name)
                .AddPropertyChange("Vanity URL", Console.VanityUrl, VanityUrl));

            Console.Name = model.Name;
            Console.VanityUrl = model.VanityUrl;
            VanityUrlData Vanity = Team.GetVanityUrlData();
            await Vanity.UpdateAsync(Console, VanityUrl);

            if (Session.Selected.Team != null && Session.Selected.Team.Console != null)
                Session.Selected.Team.Console.VanityUrl = Console.GetVanityUrlOrId();
            Session.TriggerNavMenuChange();
        });
        return null;
    }
}
