@using DaRT
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using LibMCRcon.RCon
@using Newtonsoft.Json.Linq
@using System.Text
@inject DialogService Dialogs

<PageTitle>Console Bans | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:court-hammer"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Bans</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" Text="Consoles" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + Session.Selected.Team?.Console?.VanityUrl)" Text="@Session.Selected.Team?.Console?.Data.Name" />
        <RadzenBreadCrumbItem Text="Bans" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewBans))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Bans
            </RadzenAlert>
        </div>

    }
    else
    {
        <br />
        <div class="dash-box-content">
            <ActionBar>
                <RadzenFormField Variant="Variant.Outlined">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
            </ActionBar>
        </div>
        <RadzenDataGrid @ref="@Grid" Count="@PlayerCount" Data="@Players" LoadData="@LoadData"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        EmptyText="No bans."
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal">
            <Columns>
                <RadzenDataGridColumn Title="Name" Width="200px" Property="@nameof(Player.name)">
                    <Template>
                        @if (context.number == 0)
                        {
                            <RadzenText TextStyle="TextStyle.Body2">@context.name</RadzenText>
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="Player" IsPill="true" />
                        }
                        else
                        {
                            @if (Member.HasConsolePermission(Team, Console, ConsolePermission.ViewIPs))
                            {
                                <RadzenTextMask Value="@context.name" IsIp="true"></RadzenTextMask>
                                <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="IP" IsPill="true" />
                            }
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="80px" Filterable="false">
                    <Template>
                        <RadzenButton Icon="hardware" Click="@(() => Unban(context))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public ConsoleData? Console => Session.Selected.Console;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenDataGrid<Player> Grid { get; set; }

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(0).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public IEnumerable<Player> Players { get; set; }
    public int PlayerCount { get; set; }

    public string? GetMask(string? value)
    {
        if (string.IsNullOrEmpty(value))
            return null;
        bool FirstDot = false;
        StringBuilder result = new StringBuilder();
        foreach (char c in value)
        {
            if (c == '.')
            {
                result.Append(c);
                FirstDot = true;
            }
            else
            {
                if (FirstDot)
                    result.Append('*');
                else
                    result.Append(c);
            }
        }
        return result.ToString();
    }


    async Task LoadData(LoadDataArgs args)
    {
        if (Console == null)
            return;

        if (_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rc))
        {
            if (rc.IsConnected)
            {
                string ListCommand = await rc.ExecuteCmd("banlist");
                try
                {
                    ListCommand = ListCommand.Split("players:").Last();
                }
                catch { }
                string[] lines = ListCommand.SplitNewlines(trim: true);
                List<Player> list = new List<Player>();

                foreach (Player i in lines.First().Split(", ").Select(x => new Player(1, null, null, null, x, null)))
                {
                    if (i.name.Contains(" and "))
                    {
                        string[] SplitAnd = lines.First().Split(" and ");
                        list.Add(new Player(0, null, null, null, SplitAnd[0], null));
                        list.Add(new Player(0, null, null, null, SplitAnd[1], null));
                    }
                    else
                        list.Add(i);
                }


                try
                {
                    ListCommand = await rc.ExecuteCmd("banlist ips");
                    try
                    {
                        ListCommand = ListCommand.Split("addresses:").Last();
                    }
                    catch { }
                    lines = ListCommand.SplitNewlines(trim: true);
                    foreach (Player i in lines.First().Split(", ").Select(x => new Player(1, null, null, null, x, null)))
                    {
                        if (i.name.Contains(" and "))
                        {
                            string[] SplitAnd = lines.First().Split(" and ");
                            list.Add(new Player(1, null, null, null, SplitAnd[0], null));
                            list.Add(new Player(1, null, null, null, SplitAnd[1], null));
                        }
                        else
                            list.Add(i);
                    }

                }
                catch { }

                PlayerCount = list.Count();
                Players = list.Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault()).ToList();
            }
            else
            {
                PlayerCount = 0;
                Players = new List<Player>();
            }

            StateHasChanged();
        }
        else
        {
            PlayerCount = 0;
            Players = new List<Player>();
        }

    }

    public async Task Unban(Player player)
    {
        if (Member == null || Console == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.BanPlayers))
        {
            await Dialogs.ShowPermissionErrorAsync(ConsolePermission.BanPlayers);
            return;
        }

        if (!_Data.MinecraftRcons.TryGetValue(Console.Id, out TCPRconAsync? rcon) || !rcon.IsConnected)
        {
            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
            return;
        }

        bool Confirm = await Dialogs.ShowConfirmAsync($"Unban {player.name}", "Are you sure you want to unban?", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (rcon.IsConnected)
        {
            string Result = await rcon.ExecuteCmd("pardon " + player.name);
            await Dialogs.ShowInfoAsync("Unban Result", Result);
        }
        else
            await Dialogs.ShowInfoAsync("Failed to Unban", "Could not connect to server.");
    }

}
