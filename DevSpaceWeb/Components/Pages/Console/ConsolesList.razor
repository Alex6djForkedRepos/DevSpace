@using DaRT
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using DevSpaceWeb.Models.Setup
@using System.Net
@using LibMCRcon.RCon
@inject DialogService Dialogs

<PageTitle>My Consoles | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:console-line"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Consoles</RadzenText>
    </div>
    <br />
    <ActionBar>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Setup Console" Click="@SetupConsole" Disabled="(Member == null || !Member.HasConsolePermission(Team, null, ConsolePermission.CreateConsoleResource))" Size="ButtonSize.Small" />
        <RadzenFormField Variant="Variant.Outlined">
            <Start>
                <RadzenIcon Icon="search" />
            </Start>
            <ChildContent>
                <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                               autocapitalize="none" MaxLength="100" inputmode="search"
                               @oninput="@(args => SetNameFilter(args.Value as string))" />
            </ChildContent>
            <End>
                @if (!string.IsNullOrWhiteSpace(SearchText))
                {
                    <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                }
            </End>
        </RadzenFormField>
    </ActionBar>
    <br />
    @foreach (ConsoleData i in _DB.Consoles.Cache.Values.Where(x => Member != null && Member.HasConsolePermission(Team, x, ConsolePermission.ViewConsole) && (string.IsNullOrEmpty(SearchText) || x.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))).OrderBy(x => x.Name))
    {
        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + i.GetVanityUrlOrId() + "/home")">
            <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;">
                <div class="server-item-icon flex-none d-flex">
                    <span class="iconify" data-icon="mdi:console-line"></span>
                </div>
                <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                    @i.Name
                </RadzenText>
                
            </div>
        </a>
        <br />
    }

</div>

<style>
    .server-item {
    background-color: #21262d !important;
    border-radius: 12px;
    border: 1px solid rgba(0,135,201,0.3) !important;
    padding-left: 10px;
    cursor: pointer;
    }

    .server-item:hover {
    border-color: rgba(0,135,201,0.5) !important;
    }

    .server-item-icon {
    vertical-align: center;
    }

    .server-item-icon .iconify {
    width: 40px;
    height: 40px;
    margin-top: 16px;
    color: rgba(0,135,201,0.7) !important;
    }

    .server-item:hover .server-item-icon .iconify {
    color: rgba(0,135,201,0.9) !important;
    }

    .server-item-info {
    padding-left: 10px;
    }

    .server-item-buttons .rz-button {
    min-width: 34px !important;
    display: block !important;
    text-align: right;
    height: 42px;
    max-height: 42px !important;
    }

    .server-item .server-item-buttons .rz-button:hover {
    background-color: rgba(0,135,201,0.3) !important;
    }

    .server-item-buttons .rz-button:first-child {
    border-radius: 0px 12px 0px 0px;
    }

    .server-item-buttons .rz-button:last-child {
    border-radius: 0px 0px 12px 0px;
    }

    .server-item-buttons p {
    display: inline-block !important;
    text-transform: capitalize;
    display: none !important;
    }

    .server-item-buttons .iconify {
    width: 20px;
    height: 20px;
    margin-left: 8px;
    margin-bottom: -4px;
    margin-right: 6px;
    }

    .server-item-buttons:hover .rz-button, .server-item-buttons:hover {
    min-width: 130px !important;
    }

    .server-item-buttons:hover p {
    display: inline-block !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public string? SearchText { get; set; }
    public void SetNameFilter(string? text)
    {
        SearchText = text;
    }

    public async Task SetupConsole()
    {
        if (Member == null || Team == null)
            return;

        await Dialogs.ShowDynamicFormAsync<SetupConsoleModel>("Setup Console", new SetupConsoleModel(), async (SetupConsoleModel data) =>
        {
            if (Member == null || Team == null || !Member.HasConsolePermission(Team, null, ConsolePermission.CreateConsoleResource))
                return "You do not have permission for Create Console Resources";

            if (string.IsNullOrEmpty(data.Ip))
                return "Console ip is required.";

            if (Uri.CheckHostName(data.Ip) == UriHostNameType.Unknown)
                return "Console ip has invalid format.";

            if (data.Port == 0)
                return "Console port is required.";


            IPAddress? address = null;
            if (!IPAddress.TryParse(data.Ip, out address))
            {
                IPHostEntry? Host = null;
                try
                {
                    Host = Dns.GetHostEntry(data.Ip);
                }
                catch { }
                if (Host != null)
                    address = Host.AddressList.FirstOrDefault();
            }

            if (address == null)
                return "Console ip invalid.";

            if (Session.CurrentUser == null)
                return "Session user is invalid.";

            if (Session.Selected.Team == null)
                return "Selected team is invalid.";

            ConsoleData NewConsole = new ConsoleData
            {
                Ip = data.Ip,
                Port = data.Port,
                Name = data.Name!,
                OwnerId = Session.CurrentUser.Id,
                TeamId = Session.Selected.Team.Data.Id,
                Type = Enum.Parse<ConsoleType>(data.Type!),
                EncryptedPassword = data.Password!,
                VanityUrl = data.VanityUrl
            };

            VanityUrlData Vanity = Session.Selected.Team.Data.GetVanityUrlData();
            if (Vanity.CheckAlreadyExists(null, NewConsole.VanityUrl))
                return Lang.Errors.vanity_url_already_taken;

            switch (NewConsole.Type)
            {
                case ConsoleType.Battleye:
                    {
                        RCon rcon = new RCon();
                        rcon.Connect(address, data.Port, data.Password!);
                        if (!rcon.IsConnected)
                            return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                        _Data.BattleyeRcons.Add(NewConsole.Id, rcon);
                    }
                    break;
                case ConsoleType.Minecraft:
                    {
                        TCPRconAsync rcon = new TCPRconAsync
                            {
                                RConHost = data.Ip,
                                RConPort = data.Port,
                                RConPass = data.Password!
                            };
                        bool Success = await rcon.StartComms();
                        if (!Success)
                            return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                        _Data.MinecraftRcons.Add(NewConsole.Id, rcon);
                    }
                    break;
            }


            await _DB.Consoles.CreateAsync(NewConsole);

            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ConsoleCreated)
                .SetTarget(NewConsole)
                .SetSensitive()
                .AddProperty("IP", data.Ip)
                .AddProperty("Port", data.Port)
                .AddProperty("Vanity URL", data.VanityUrl));

            _DB.Consoles.Cache.TryAdd(NewConsole.Id, NewConsole);
            await Vanity.UpdateAsync(NewConsole, NewConsole.VanityUrl);
            return null;
        });
    }
}