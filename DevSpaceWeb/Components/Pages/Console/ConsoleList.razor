@using DaRT
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models.Consoles
@using DevSpaceWeb.Models.Setup
@using System.Net
@using LibMCRcon
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>My Consoles | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:console-line"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Consoles</RadzenText>
    </div>
    <br />
    <ActionBar>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Setup Console" Icon="add" Click="@SetupConsole" Disabled="(Member == null || !Member.HasConsolePermission(Team, null, ConsolePermission.CreateConsoleResource))" Size="ButtonSize.Small" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshConsoles" />
        <a href="https://docs.fluxpoint.dev/cloudfrost-dev/consoles" target="_blank"><RadzenButton Text="Console Docs" Icon="menu_book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
        <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
            <Start>
                <RadzenIcon Icon="search" />
            </Start>
            <ChildContent>
                <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                               autocapitalize="none" MaxLength="100" Placeholder="Search consoles" inputmode="search"
                               @oninput="@(args => SetNameFilter(args.Value as string))" />
            </ChildContent>
            <End>
                @if (!string.IsNullOrWhiteSpace(SearchText))
                {
                    <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                }
            </End>
        </RadzenFormField>
    </ActionBar>
    <br />
    <RadzenDataListFixed @ref="@Grid" AllowPaging="true" Density="Density.Compact" EmptyText="No consoles." IsLoading="@(ConsolesCount == -1)"
                    LoadData="@LoadConsoles" Data="@ConsolesList" Count="ConsolesCount" PagingSummaryFormat="@(ConsolesCount + " console" + (ConsolesCount != 1 ? "s" : ""))" ShowPagingSummary="@(ConsolesCount != -1)"
                    @bind-PageSize="@Session.ListItemsPerPage" PageSizeOptions="@Static.ListPageSizeOptions" PagerHorizontalAlign="HorizontalAlign.Center">
        <LoadingTemplate>
            <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;">
                <div class="server-item-icon flex-none d-flex">
                    <iconify-icon icon="console-line"></iconify-icon>
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                        <RadzenSkeleton></RadzenSkeleton>
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" class="ml-2 mb-2" Wrap="FlexWrap.Wrap">
                        <RadzenSkeleton></RadzenSkeleton>
                    </RadzenStack>
                </div>
            </div>
        </LoadingTemplate>
        <Template>
            <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + context.GetVanityUrlOrId() + "/home")">
                <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;" @oncontextmenu=@(args => ShowContextMenuWithContent(args, context)) @oncontextmenu:preventDefault="true">
                    <div class="server-item-icon flex-none d-flex">
                        <iconify-icon icon="mdi:console-line"></iconify-icon>
                    </div>
                    <div>
                        <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                            @context.Name
                            @if (context.IsOnline())
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Online" IsPill="true" class="ml-2" />
                            }
                            else
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" class="ml-2" />
                            }
                        </RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal" class="ml-2 mb-2" Wrap="FlexWrap.Wrap">
                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-tertiary-color);">@(context.Type == ConsoleType.Battleye ? "Battleye" : "Minecraft")</RadzenText>
                        </RadzenStack>
                    </div>

                </div>
            </a>
        </Template>
    </RadzenDataListFixed>
</div>

<style>
    .server-item {
        background-color: #21262d !important;
        border-radius: 12px;
        border: 1px solid rgba(0,135,201,0.3) !important;
        padding-left: 10px;
        cursor: pointer;
    }

        .server-item:hover {
            border-color: rgba(0,135,201,0.5) !important;
        }

    .server-item-icon {
        vertical-align: center;
    }

        .server-item-icon iconify-icon {
            font-size: 40px;
            margin-top: 16px;
            color: rgba(0,135,201,0.7) !important;
        }

    .server-item:hover .server-item-icon iconify-icon {
        color: rgba(0,135,201,0.9) !important;
    }

    .server-item-info {
        padding-left: 10px;
    }

    .server-item-buttons .rz-button {
        min-width: 34px !important;
        display: block !important;
        text-align: right;
        height: 42px;
        max-height: 42px !important;
    }

    .server-item .server-item-buttons .rz-button:hover {
        background-color: rgba(0,135,201,0.3) !important;
    }

    .server-item-buttons .rz-button:first-child {
        border-radius: 0px 12px 0px 0px;
    }

    .server-item-buttons .rz-button:last-child {
        border-radius: 0px 0px 12px 0px;
    }

    .server-item-buttons p {
        display: inline-block !important;
        text-transform: capitalize;
        display: none !important;
    }

    .server-item-buttons iconify-icon {
        font-size: 20px;
        margin-left: 8px;
        margin-bottom: -4px;
        margin-right: 6px;
    }

    .server-item-buttons:hover .rz-button, .server-item-buttons:hover {
        min-width: 130px !important;
    }

        .server-item-buttons:hover p {
            display: inline-block !important;
        }

    .rz-datalist-data > li {
        background: none;
        border: none;
        box-shadow: none;
        padding: 0;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public string? SearchText { get; set; }
    public void SetNameFilter(string? text)
    {
        SearchText = text;
    }

    public IQueryable<ConsoleData>? ConsolesList = null;
    public RadzenDataList<ConsoleData> Grid { get; set; } = null!;
    public int ConsolesCount { get; set; } = -1;

    public async Task LoadConsoles(LoadDataArgs args)
    {
        var Consoles = _DB.Consoles.Cache.Values.Where(x => Member != null && Member.HasConsolePermission(Team, x, ConsolePermission.ViewConsole) && (string.IsNullOrEmpty(SearchText) || x.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))).OrderBy(x => x.Name);
        ConsolesCount = Consoles.Count();
        ConsolesList = Consoles.AsQueryable().Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
    }

    public async Task RefreshConsoles()
    {
        await Grid.Reload();
    }

    void ShowContextMenuWithContent(MouseEventArgs args, ConsoleData console) => ContextMenuService.Open(args, new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Settings", Icon = "settings", Disabled = Member == null || !Member.HasConsolePermission(Team, console, ConsolePermission.ManageConsole) },
                new ContextMenuItem(){ Text = "Permissions", Icon = "key", Disabled = Member == null || !Member.HasConsolePermission(Team, console, ConsolePermission.ViewPermissions) },
                new ContextMenuItem(){ Text = "Players", Icon = "person", Disabled = Member == null || !Member.HasConsolePermission(Team, console, ConsolePermission.ViewPlayers) },
                new ContextMenuItem(){ Text = "Bans", Icon = "gavel", Disabled = Member == null || !Member.HasConsolePermission(Team, console, ConsolePermission.ViewBans) },
                new ContextMenuItem(){ Text = "Console", Icon = "terminal", Disabled = Member == null || !Member.HasConsolePermission(Team, console, ConsolePermission.ViewConsole) },
                new ContextMenuItem(){ Text = "Copy Console ID", Icon = "content_copy" }
         }, (arg) => OnMenuItemClick(arg, console));

    void OnMenuItemClick(MenuItemEventArgs arg, ConsoleData console)
    {
        switch (arg.Text)
        {
            case "Copy Console ID":
                _ = JS.CopyTextAsync(console.Id);
                break;
            default:
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles/" + console.GetVanityUrlOrId() + "/" + arg.Text.ToLower());
                break;
        }
        ContextMenuService.Close();
    }

    public async Task SetupConsole()
    {
        if (Member == null || Team == null || !Member.HasConsolePermission(Team, null, ConsolePermission.CreateConsoleResource))
            return;

        await Dialogs.ShowDynamicFormAsync<SetupConsoleModel>("Setup Console", new SetupConsoleModel(), async (SetupConsoleModel data) =>
        {
            if (Member == null || Team == null || !Member.HasConsolePermission(Team, null, ConsolePermission.CreateConsoleResource))
                return "You do not have permission for Create Console Resources";

            if (Uri.CheckHostName(data.Ip) == UriHostNameType.Unknown)
                return "Console ip has invalid format.";

            if (data.Port == 0)
                return "Console port is required.";


            IPAddress? address = null;
            if (!IPAddress.TryParse(data.Ip, out address))
            {
                IPHostEntry? Host = null;
                try
                {
                    Host = Dns.GetHostEntry(data.Ip);
                }
                catch { }
                if (Host != null)
                    address = Host.AddressList.FirstOrDefault();
            }

            if (address == null)
                return "Console ip invalid.";

            ConsoleData NewConsole = new ConsoleData
            {
                Ip = data.Ip!,
                Port = data.Port,
                Name = data.Name!,
                OwnerId = Session.CurrentUser.Id,
                TeamId = Session.Selected.Team.Data.Id,
                Type = data.Type,
                EncryptedPassword = data.Password!
            };

            string? VanityUrl = Utils.FormatVanityUrl(data.VanityUrl);

            VanityUrlData Vanity = Session.Selected.Team.Data.GetVanityUrlData();
            if (Vanity.CheckAlreadyExists(null, VanityUrl))
                return Lang.Errors.vanity_url_already_taken;

            switch (NewConsole.Type)
            {
                case ConsoleType.Battleye:
                    {
                        BattlEyeRcon rcon = new BattlEyeRcon();
                        rcon.Connect(address, data.Port, data.Password!);
                        if (!rcon.IsConnected)
                            return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                        _Data.BattleyeRcons.Add(NewConsole.Id, rcon);
                    }
                    break;
                case ConsoleType.Minecraft:
                    {
                        MCRconAsync rcon = new MCRconAsync(data.Ip!, data.Port, data.Password!);
                        bool Success = await rcon.StartComms();
                        if (!Success)
                            return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                        _Data.MinecraftRcons.Add(NewConsole.Id, rcon);
                    }
                    break;
                case ConsoleType.Source:
                    {
                        CoreRCON.RCON rcon = new CoreRCON.RCON(address, (ushort)data.Port, data.Password);
                        try
                        {
                            await rcon.ConnectAsync();
                        }
                        catch { }
                        if (!rcon.Connected)
                            return "Failed to connect to server with rcon, please check your settings and make sure rcon is enabled.";

                        _Data.SourceRcons.Add(NewConsole.Id, rcon);
                    }
                    break;
            }


            await _DB.Consoles.CreateAsync(NewConsole);

            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ConsoleCreated)
                .SetTarget(NewConsole)
                .SetSensitive()
                .AddProperty("IP", data.Ip)
                .AddProperty("Port", data.Port)
                .AddProperty("Vanity URL", VanityUrl));

            _DB.Consoles.Cache.TryAdd(NewConsole.Id, NewConsole);
            await Vanity.UpdateAsync(NewConsole, VanityUrl);
            return null;
        });
    }
}