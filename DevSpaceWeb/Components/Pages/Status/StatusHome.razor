@using DevSpaceWeb.Components.Dialogs.Status
@using DevSpaceWeb.Data.Status
@using DevSpaceWeb.Models.Status
@inject DialogService Dialogs

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:information"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Status</RadzenText>
    </div>
    <br />
    <div class="mb-2">
        <ActionBar>
            @switch (SelectedStatusType)
            {
                case 1:
                    {
                        <RadzenButton Variant="Variant.Filled" Text="Create Monitor" Icon="add" Click="@Create" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(!Member.HasStatusMonitorPermission(Team, null, StatusMonitorPermission.CreateMonitorResource))" />
                    }
                    break;
                case 2:
                    {
                        <RadzenButton Variant="Variant.Filled" Text="Create Issue" Icon="add" Click="@Create" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(!Member.HasStatusPagePermission(Team, null, StatusPagePermission.CreatePageResource))" />
                    }
                    break;
                    case 3:
                    {
                        <RadzenButton Variant="Variant.Filled" Text="Create Page" Icon="add" Click="@Create" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(!Member.HasStatusPagePermission(Team, null, StatusPagePermission.CreatePageResource))" />
                    }
                    break;
            }
            <a href="https://docs.fluxpoint.dev/devspace/status" target="_blank"><RadzenButton Text="Status Docs" Icon="menu_book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
            <RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="@SelectedStatusType">
                <Items>
                    <RadzenSelectBarItem Value="1" Text="Monitors" />
                    <RadzenSelectBarItem Value="2" Text="Issues" />
                    <RadzenSelectBarItem Value="3" Text="Pages" />
                </Items>
            </RadzenSelectBar>
        </ActionBar>
    </div>
    @switch (SelectedStatusType)
    {
        case 1:
            {
                <StatusMonitors></StatusMonitors>
            }
            break;
        case 2:
            {
                <StatusIssues></StatusIssues>
            }
            break;
        case 3:
            {
                <StatusPages></StatusPages>
            }
            break;
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public int SelectedStatusType { get; set; } = 1;

    public async Task Create()
    {
        if (Member == null || Team == null)
            return;

        switch (SelectedStatusType)
        {
            case 1:
                {
                    if (!Member.HasStatusMonitorPermission(Team, null, StatusMonitorPermission.CreateMonitorResource))
                        return;

                    await Dialogs.ShowDynamicFormAsync<CreateStatusMonitorModel>("Create Status Monitor", new CreateStatusMonitorModel(), async (CreateStatusMonitorModel data) =>
                    {
                        if (Member == null || Team == null || !Member.HasStatusMonitorPermission(Team, null, StatusMonitorPermission.CreateMonitorResource))
                            return "You do not have permission for Create Status Monitor Resources";

                        StatusMonitorData NewMonitor = new StatusMonitorData
                        {
                            Name = data.Name!,
                            OwnerId = Session.CurrentUser.Id,
                            TeamId = Session.Selected.Team.Data.Id,
                            Source = data.Source,
                            MonitorType = data.Type
                        };

                        await _DB.StatusMonitors.CreateAsync(NewMonitor);

                        _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.StatusMonitorCreated)
                            .SetTarget(NewMonitor));

                        _DB.StatusMonitors.Cache.TryAdd(NewMonitor.Id, NewMonitor);

                        InvokeAsync(StateHasChanged);

                        return null;
                    });
                }
                break;
            case 2:
                {
                    Dialogs.OpenAsync<CustomizePage>("Customize Status Page");
                }
                break;
            case 3:
                {
                    if (!Member.HasStatusPagePermission(Team, null, StatusPagePermission.CreatePageResource))
                        return;

                    await Dialogs.ShowDynamicFormAsync<CreateStatusPageModel>("Create Status Page", new CreateStatusPageModel(), async (CreateStatusPageModel data) =>
                    {
                        if (Member == null || Team == null || !Member.HasStatusPagePermission(Team, null, StatusPagePermission.CreatePageResource))
                            return "You do not have permission for Create Status Page Resources";

                        StatusPageData NewPage = new StatusPageData
                        {
                            Name = data.Name!,
                            OwnerId = Session.CurrentUser.Id,
                            TeamId = Session.Selected.Team.Data.Id,
                        };

                        await _DB.StatusPages.CreateAsync(NewPage);

                        _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.StatusPageCreated)
                            .SetTarget(NewPage));

                        _DB.StatusPages.Cache.TryAdd(NewPage.Id, NewPage);

                        InvokeAsync(StateHasChanged);

                        return null;
                    });
                }
                break;
        }
    }
}
