@using DevSpaceWeb.Models.Consoles
@using DevSpaceWeb.Models.Servers
@using System.Net
<PageTitle>Server Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:lightning-bolt"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Server Connection</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team.VanityUrl + "/servers/" + Session.Selected.Team.Server.VanityUrl)" Text="@Session.Selected.Team.Server.Data.Name" />
        <RadzenBreadCrumbItem Text="Connection" />
    </RadzenBreadCrumb>
    @if (!Member.HasServerPermission(Team, Server, ServerPermission.ManageConnection))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Manage Connection
        </RadzenAlert>
    }
    else
    {
        <br />
        <DynamicFormDialog Model="@ModifyServerConnectionModel" ModelData="@Data" OnSubmit="@UpdateSettings"></DynamicFormDialog>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;
    public ServerData Server => Session.Selected.Server;
    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        Data = new ModifyServerConnectionModel
            {
                Ip = Server.AgentIp,
                Port = Server.AgentPort
            };
    }

    public ModifyServerConnectionModel Data { get; set; }

    public async Task<string?> UpdateSettings(ModifyServerConnectionModel model)
    {
        if (!Member.HasServerPermission(Team, Server, ServerPermission.ManageConnection))
            return "You do not have Manage Connection permissions.";

        if (model.Port == 0)
            return "Server port is required.";

        ServerWebSocket Client = new ServerWebSocket();
        var TempServer = new ServerData
        {
            AgentIp = model.Ip,
            AgentPort = model.Port,
            AgentKey = model.AgentKey
        };
        await Client.DiscoverAsync(TempServer);
        if (Client.Discover == null)
            return "Failed to discover server.";

        TempServer.AgentId = Client.Discover.Id;

        HttpRequestMessage Req = new HttpRequestMessage(HttpMethod.Get, "https://" + TempServer.AgentIp + ":" + TempServer.AgentPort + "/setup");
        Req.Headers.Add("Authorization", TempServer.AgentKey);
        HttpResponseMessage DiscoverResponse = await Program.AgentDiscoverHttp.SendAsync(Req);
        if (!DiscoverResponse.IsSuccessStatusCode)
        {
            return "Failed to setup server.";
        }

        await Client.RunAsync(TempServer);

        await Task.Delay(new TimeSpan(0, 0, 2));

        if (Client.Client == null || !Client.Client.IsConnected)
            return "Failed to connect to server: " + Client.Error.ToString();

        await Server.UpdateAsync(new UpdateDefinitionBuilder<ServerData>()
        .Set(x => x.AgentId, Client.Discover.Id)
        .Set(x => x.AgentIp, model.Ip)
        .Set(x => x.AgentPort, model.Port)
        .Set(x => x.AgentKey, model.AgentKey),
        async () =>
        {
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Setting, AuditLogEventType.ServerSettingsChanged)
                .SetTarget(Server)
                .SetSensitive()
                .AddPropertyChange("IP", Server.AgentIp, model.Ip)
                .AddPropertyChange("Port", Server.AgentPort, model.Port));

            Server.AgentIp = model.Ip;
            Server.AgentPort = model.Port;
            Server.AgentKey = model.AgentKey;

            Server.RemoveWebSocket();

            Server.SetWebSocket(Client);
            Session.TriggerNavMenuChange();
        });
        return null;
    }
}
