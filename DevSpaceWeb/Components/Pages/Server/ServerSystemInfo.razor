@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket

<RadzenRow Gap="1rem">
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:server"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Host</RadzenText>
        </div>
        <br />
        @if (SystemInfo != null)
        {
            <p><span>Release:</span> @SystemInfo.Host.Release</p>
            <p><span>System:</span> @SystemInfo.Host.SystemVersion</p>
            <p><span>Machine Name:</span> @SystemInfo.Host.MachineName</p>
            <p><span>Uptime:</span> @SystemInfo.Host.Uptime</p>

            <br />
            <h4>Virtualization</h4>
            <p><span>Type:</span> @SystemInfo.Host.Cpu.VirtualizationType</p>
            <p><span>Mode:</span> @SystemInfo.Host.Cpu.VirtualizationMode</p>
            <p><span>Hypervisor:</span> @SystemInfo.Host.Cpu.VirtualizationHypervisor</p>
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chip"></span></div>
            <MudText Typo="Typo.h6">Memory</MudText>
        </div>
        <br />
        @if (SystemInfo != null)
        {
            <h4>Ram</h4>
            <p><span>Total:</span> @SystemInfo.Host.RamTotal GB</p>
            <p><span>Used:</span> @SystemInfo.Host.RamUsed Mb</p>
            <p><span>Free:</span> @SystemInfo.Host.RamFree Mb</p>

            <br />
            <h4>Swap</h4>
            <p><span>Total:</span> @SystemInfo.Host.SwapTotal Mb</p>
            <p><span>Used:</span> @SystemInfo.Host.SwapUsed Mb</p>
            <p><span>Free:</span> @SystemInfo.Host.SwapFree Mb</p>
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:wide-area-network"></span></div>
            <MudText Typo="Typo.h6">Network</MudText>
        </div>
        <br />
        @if (Program.IsPreviewMode)
        {
            <p><span>IP:</span> 1.2.3.4</p>
        }
        else if (SystemInfo != null)
        {
            <p><span>IP:</span> @Session.Selected.Server.Data.AgentIp</p>
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:cpu-64-bit"></span></div>
            <MudText Typo="Typo.h6">CPU</MudText>
        </div>
        <br />
        @if (SystemInfo != null)
        {
            <p><span>CPU Count:</span> @SystemInfo.Host.Cpu.CpuCount</p>
            <p><span>Sockets:</span> @SystemInfo.Host.Cpu.Sockets</p>

            <br />
            <h4>Model</h4>
            <p><span>Name:</span> @SystemInfo.Host.Cpu.ModelName</p>
            <p><span>Number:</span> @SystemInfo.Host.Cpu.Model</p>
            <p><span>Family:</span> @SystemInfo.Host.Cpu.CpuFamily</p>

            <br />
            <h4>Flags</h4>
            <p>@SystemInfo.Host.Cpu.Flags</p>

            <br />
            <h4>Stats</h4>
            <p><span>Cores per Socket:</span> @SystemInfo.Host.Cpu.CoresPerSocket</p>
            <p><span>Threads per Socket:</span> @SystemInfo.Host.Cpu.ThreadsPerCore</p>
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:bug"></span></div>
            <MudText Typo="Typo.h6">CPU Vulnerabilities</MudText>
        </div>
        <br />
        @if (SystemInfo != null)
        {
            @foreach (var i in SystemInfo.Host.Cpu.Vulnerabilities)
            {
                @if (i.Value.Contains("Mitigation") || i.Value.Contains("Not affected"))
                {
                    <p style="color: limegreen;"><span>@i.Key:</span> @i.Value</p>
                }
                else
                {
                    <p style="color: darkorange;"><span>@i.Key:</span> @i.Value</p>
                }
                <br />
            }
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
    <RadzenColumn class="dash-box dash-box-content" OffsetXS="4">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:code"></span></div>
            <MudText Typo="Typo.h6">Process</MudText>
        </div>
        <br />
        @if (SystemInfo != null)
        {
            <p><span>Process Id:</span> @SystemInfo.Process.ProcessId</p>
            <p><span>.NET Version:</span> @SystemInfo.Process.DotnetVersion</p>
            <p><span>Process Path:</span> @SystemInfo.Process.ProcessPath</p>

            <br />
            <h4>Environment Variables</h4>
            @foreach (var i in SystemInfo.Process.EnvironmentVariables)
            {
                <p>@i.Substring(1, i.Length - 2).Replace(", ", " = ")</p>
                <br />
            }
        }
        else
        {
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
            <RadzenSkeleton></RadzenSkeleton>
        }
    </RadzenColumn>
</RadzenRow>

<style>



</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public SystemInfoResponse? SystemInfo { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogMessage("Run System Info", LogSeverity.Debug);
            try
            {
                if (Program.IsPreviewMode)
                {
                    SystemInfo = new SystemInfoResponse
                        {
                            Host = new HostInfo
                            {
                                Release = "Ubuntu 24.04 LTS",
                                SystemVersion = "Unix 6.8.0.36",
                                MachineName = "vpscloud123",
                                Uptime = "1 Day",
                                RamTotal = 4,
                                RamUsed = 1240,
                                RamFree = 250,
                                SwapTotal = 2024,
                                SwapUsed = 740,
                                SwapFree = 207,
                                Cpu = new LinuxCpuInfo
                                {
                                    CpuCount = 2,
                                    Sockets = 2,
                                    ModelName = "Intel CPU E5 No U xD",
                                    Model = 40,
                                    CpuFamily = 2,
                                    CoresPerSocket = 1,
                                    ThreadsPerCore = 1,
                                    Flags = "memes dank",
                                    VirtualizationType = "VT-x",
                                    VirtualizationMode = "full",
                                    VirtualizationHypervisor = "KVM",
                                    MHz = 2000,
                                    CacheSize = "1000",
                                    VendorId = "Intel",
                                    Vulnerabilities = new Dictionary<string, string>
                                {
                                    { "Meltdown", "Mitigation; PTI"}
                                }
                                }
                            },
                            Process = new ProcessInfo
                            {
                                DotnetVersion = "8.0.7",
                                EnvironmentVariables = new List<string>
                            {
                                "SUS = amogus"
                            },
                                ProcessId = 123,
                                ProcessPath = "/user/devspace",

                            }
                        };
                    StateHasChanged();
                    return;
                }

                SystemInfo = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<SystemInfoResponse>(new IWebSocketTaskEvent(EventType.SystemInfo));
                Logger.LogMessage("Got info", LogSeverity.Debug);
                Logger.LogMessage(Newtonsoft.Json.JsonConvert.SerializeObject(SystemInfo, Newtonsoft.Json.Formatting.Indented), LogSeverity.Debug);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }


        }
    }
}
