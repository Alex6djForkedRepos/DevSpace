@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket


<MudExpansionPanels Dense Outlined="false">
    <MudGrid Class="dash-box-content">
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:server"></span></div>
                    <MudText Typo="Typo.h6">Host</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    <p><span>Release:</span> @SystemInfo.Host.Release</p>
                    <p><span>System:</span> @SystemInfo.Host.SystemVersion</p>
                    <p><span>Machine Name:</span> @SystemInfo.Host.MachineName</p>
                    <p><span>Uptime:</span> @SystemInfo.Host.Uptime</p>

                    <br />
                    <h4>Virtualization</h4>
                    <p><span>Type:</span> @SystemInfo.Host.Cpu.VirtualizationType</p>
                    <p><span>Mode:</span> @SystemInfo.Host.Cpu.VirtualizationMode</p>
                    <p><span>Hypervisor:</span> @SystemInfo.Host.Cpu.VirtualizationHypervisor</p>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chip"></span></div>
                    <MudText Typo="Typo.h6">Memory</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    <h4>Ram</h4>
                    <p><span>Total:</span> @SystemInfo.Host.RamTotal GB</p>
                    <p><span>Used:</span> @SystemInfo.Host.RamUsed Mb</p>
                    <p><span>Free:</span> @SystemInfo.Host.RamFree Mb</p>

                    <br />
                    <h4>Swap</h4>
                    <p><span>Total:</span> @SystemInfo.Host.SwapTotal Mb</p>
                    <p><span>Used:</span> @SystemInfo.Host.SwapUsed Mb</p>
                    <p><span>Free:</span> @SystemInfo.Host.SwapFree Mb</p>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:wide-area-network"></span></div>
                    <MudText Typo="Typo.h6">Network</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    <p><span>IP:</span> @Session.Selected.Server.Data.AgentIp</p>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:cpu-64-bit"></span></div>
                    <MudText Typo="Typo.h6">CPU</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    <p><span>CPU Count:</span> @SystemInfo.Host.Cpu.CpuCount</p>
                    <p><span>Sockets:</span> @SystemInfo.Host.Cpu.Sockets</p>

                    <br />
                    <h4>Model</h4>
                    <p><span>Name:</span> @SystemInfo.Host.Cpu.ModelName</p>
                    <p><span>Number:</span> @SystemInfo.Host.Cpu.Model</p>
                    <p><span>Family:</span> @SystemInfo.Host.Cpu.CpuFamily</p>

                    <br />
                    <h4>Flags</h4>
                    <p>@SystemInfo.Host.Cpu.Flags</p>

                    <br />
                    <h4>Stats</h4>
                    <p><span>Cores per Socket:</span> @SystemInfo.Host.Cpu.CoresPerSocket</p>
                    <p><span>Threads per Socket:</span> @SystemInfo.Host.Cpu.ThreadsPerCore</p>
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:bug"></span></div>
                    <MudText Typo="Typo.h6">CPU Vulnerabilities</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    @foreach (var i in SystemInfo.Host.Cpu.Vulnerabilities)
                    {
                        @if (i.Value.Contains("Mitigation") || i.Value.Contains("Not affected"))
                        {
                            <p style="color: limegreen;"><span>@i.Key:</span> @i.Value</p>
                        }
                        else
                        {
                            <p style="color: darkorange;"><span>@i.Key:</span> @i.Value</p>
                        }
                        <br />
                    }
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper>
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:code"></span></div>
                    <MudText Typo="Typo.h6">Process</MudText>
                </div>
                <br />
                @if (SystemInfo != null)
                {
                    <p><span>Process Id:</span> @SystemInfo.Process.ProcessId</p>
                    <p><span>.NET Version:</span> @SystemInfo.Process.DotnetVersion</p>
                    <p><span>Process Path:</span> @SystemInfo.Process.ProcessPath</p>

                    <br />
                    <h4>Environment Variables</h4>
                    @foreach (var i in SystemInfo.Process.EnvironmentVariables)
                    {
                        <p>@i.Substring(1, i.Length - 2).Replace(", ", " = ")</p>
                        <br />
                    }
                }
                else
                {
                    <MudSkeleton />
                    <MudSkeleton />
                    <MudSkeleton />
                }
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudExpansionPanels>

<style>
    .mud-main-content .mud-paper {
        padding: 10px;
        margin-bottom: 26px !important;
    }

    .mud-main-content .mud-paper {
        height: 100% !important;
    }

    .mud-paper2 span {
        display: inline-block;
        font-weight: 700;
        min-width: 108px !important;
        width: 108px !important;
        margin-right: 2px;
    }

    .mud-paper2 p {
        margin-bottom: 10px;
    }

</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public SystemInfoResponse? SystemInfo { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Run System Info");
            try
            {
                SystemInfo = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<SystemInfoResponse>(new IWebSocketTaskEvent(EventType.SystemInfo));
                Console.WriteLine("Got info");
                Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(SystemInfo, Newtonsoft.Json.Formatting.Indented));
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }


        }
    }
}
