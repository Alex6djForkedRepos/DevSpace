@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket

<div class="dash-box">
    <RadzenDataGrid @ref="@grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="30"
                    AllowSorting="true" Data="@employees" Count="@count" LoadData="@LoadData"
                    IsLoading="@isLoading" GridLines="DataGridGridLines.Horizontal"
                    LogicalFilterOperator"LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@selectedEmployees">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(FirewallRuleResponse.Action)" Title="Type" MinWidth="120px" />
            <RadzenDataGridColumn Property="@nameof(FirewallRuleResponse.To)" Title="To" MinWidth="120px" />
            <RadzenDataGridColumn Property="@nameof(FirewallRuleResponse.From)" Title="From" MinWidth="120px" />
            <RadzenDataGridColumn Property="@nameof(FirewallRuleResponse.Comment)" Title="Comment" />
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    FirewallResponse? FirewallInfo = null;

    IEnumerable<FirewallRuleResponse> employees;
    public int count = 0;
    IList<FirewallRuleResponse> selectedEmployees;
    RadzenDataGrid<FirewallRuleResponse> grid;
    public bool isLoading = false;

    public async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();
        Console.WriteLine("Loading Data");
        if (Program.IsPreviewMode)
        {
            isLoading = false;
            employees = new List<FirewallRuleResponse>
            {
                new FirewallRuleResponse { Action = "ALLOW IN", From = "1.2.3.4", To = "22", Comment = ":)" }
            };
            return;
        }
        if (FirewallInfo == null)
        {
            try
            {
                FirewallInfo = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<FirewallResponse>(new IWebSocketTaskEvent(EventType.FirewallInfo));


            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        if (FirewallInfo != null)
        {
            count = FirewallInfo.Rules.Count();
            Console.WriteLine("Got: " + count);
            employees = FirewallInfo.Rules;
        }

        isLoading = false;
    }
}
