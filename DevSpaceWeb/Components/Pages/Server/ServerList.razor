@using DevSpaceShared.Services
@using DevSpaceWeb.Agents
@using DevSpaceWeb.Components.Dialogs.Servers
@using DevSpaceWeb.Models.Setup
@using System.Net
@using Newtonsoft.Json
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>My Servers | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:server"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Servers</RadzenText>
    </div>
    <br />
    <ActionBar>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Setup Server" Icon="add" Click="@SetupServer" Disabled="(Member == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))" Size="ButtonSize.Small" />
        <RadzenButton Variant="Variant.Filled" Text="Onboard Server" Icon="bigtop_updates" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@OnboardServer" Disabled="(Member == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshServers" />
        <a href="https://docs.fluxpoint.dev/devspace/servers" target="_blank"><RadzenButton Text="Server Docs" Icon="menu_book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
        <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
            <Start>
                <RadzenIcon Icon="search" />
            </Start>
            <ChildContent>
                <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                               autocapitalize="none" MaxLength="100" Placeholder="Search servers" inputmode="search"
                               @oninput="@(args => SetNameFilter(args.Value as string))" />
            </ChildContent>
            <End>
                @if (!string.IsNullOrWhiteSpace(SearchText))
                {
                    <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                }
            </End>
        </RadzenFormField>
    </ActionBar>
    <br />
    <RadzenDataListFixed @ref="@Grid" AllowPaging="true" Density="Density.Compact" EmptyText="No servers." IsLoading="@(ServersCount == -1)"
                    LoadData="@LoadServers" Data="@ServersList" Count="ServersCount" PagingSummaryFormat="@(ServersCount + " server" + (ServersCount != 1 ? "s" : ""))" ShowPagingSummary="@(ServersCount != -1)"
                    @bind-PageSize="@Session.ListItemsPerPage" PageSizeOptions="@Static.ListPageSizeOptions" PagerHorizontalAlign="HorizontalAlign.Center">
        <LoadingTemplate>
            <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;">
                <div class="server-item-icon flex-none d-flex">
                    <iconify-icon icon="mdi:server"></iconify-icon>
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                        <RadzenSkeleton></RadzenSkeleton>
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" class="ml-2 mb-2" Wrap="FlexWrap.Wrap">
                        <RadzenSkeleton></RadzenSkeleton>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" class="mb-2 ml-2" Wrap="FlexWrap.Wrap">
                        <RadzenSkeleton></RadzenSkeleton>
                    </RadzenStack>
                </div>
            </div>
        </LoadingTemplate>
        <Template>
            <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + context.GetVanityUrlOrId() + "/home")">
                <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;" @oncontextmenu=@(args => ShowContextMenuWithContent(args, context)) @oncontextmenu:preventDefault="true">
                    <div class="server-item-icon flex-none d-flex">
                        <iconify-icon icon="mdi:server"></iconify-icon>
                    </div>
                    <div class="server-item-info flex-auto d-flex py-1">
                        <RadzenText TextStyle="TextStyle.H6" class="mt-3 ml-2">
                            @context.Name
                            @if (context.IsConnected)
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Online" IsPill="true" class="ml-2" />
                            }
                            else
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" class="ml-2" />
                            }
                        </RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal" class="ml-2 mb-2" Wrap="FlexWrap.Wrap">
                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-tertiary-color);">@("Agent " + context.GetAgentVersion())</RadzenText>
                            @if (context.TryGetWebSocket(out IAgent? agent) && agent.Stats != null)
                            {
                                <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-tertiary-color);">@("Docker v" + agent.Stats.DockerVersion)</RadzenText>
                            }
                            @switch (context.AgentType)
                            {
                                case ServerAgentType.Client:
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-tertiary-color);">Client</RadzenText>
                                    break;
                                case ServerAgentType.Edge:
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-tertiary-color);">Edge</RadzenText>
                                    break;
                            }
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" class="mb-2 ml-2" Wrap="FlexWrap.Wrap">
                            @if (context.WebSocketError.HasValue)
                            {
                                <RadzenText TextStyle="TextStyle.Body2">@Utils.FriendlyName(context.WebSocketError.Value.ToString())</RadzenText>
                            }
                            @if (context.TryGetWebSocket(out IAgent? agent) && agent.Stats != null)
                            {
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="ri:stack-fill"></iconify-icon> @agent.Stats.StacksCount stacks</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="ri:box-3-fill"></iconify-icon> @agent.Stats.ContainersCount containers</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <iconify-icon icon="mdi:power" style="color: var(--rz-success);"></iconify-icon> @agent.Stats.ContainersRunningCount
                                    <iconify-icon icon="mdi:heart-outline" style="color: var(--rz-warning); margin-left: 8px;"></iconify-icon> @agent.Stats.ContainersUnhealthyCount
                                    <iconify-icon icon="mdi:power" style="color: var(--rz-danger); margin-left: 8px;"></iconify-icon> @agent.Stats.ContainersDownCount
                                </RadzenText>
                            }
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" class="mb-2 ml-2" Wrap="FlexWrap.Wrap">
                            @if (context.TryGetWebSocket(out IAgent? agent) && agent.Stats != null)
                            {
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="mdi:storage"></iconify-icon> @agent.Stats.VolumesCount volumes</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="mdi:local-area-network"></iconify-icon> @agent.Stats.NetworksCount networks</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="mdi:folder-image"></iconify-icon> @agent.Stats.ImagesCount images</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="mdi:cpu-64-bit"></iconify-icon> @(agent.Stats.IsWindows ? "Unavailable" : agent.Stats.CpuCount) CPU</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2"><iconify-icon icon="mdi:memory"></iconify-icon> @(agent.Stats.IsWindows ? "Unavailable" : Utils.ToPrettySize(agent.Stats.TotalMemory)) RAM</RadzenText>
                            }
                        </RadzenStack>
                    </div>
                </div>
            </a>

        </Template>
    </RadzenDataListFixed>
</div>

<style>
    .server-item {
        background-color: #21262d !important;
        border-radius: 12px;
        border: 1px solid rgba(0,135,201,0.3) !important;
        padding-left: 10px;
        cursor: pointer;
    }

        .server-item:hover {
            border-color: rgba(0,135,201,0.5) !important;
        }

    .server-item-icon {
        vertical-align: center;
    }

        .server-item-icon iconify-icon {
            font-size: 40px;
            margin-top: 16px;
            color: rgba(0,135,201,0.7) !important;
        }

    .server-item:hover .server-item-icon iconify-icon {
        color: rgba(0,135,201,0.9) !important;
    }

    .server-item-info {
        padding-left: 10px;
    }

    .server-item-buttons .rz-button {
        min-width: 34px !important;
        display: block !important;
        text-align: right;
        height: 42px;
        max-height: 42px !important;
    }

    .server-item .server-item-buttons .rz-button:hover {
        background-color: rgba(0,135,201,0.3) !important;
    }

    .server-item-buttons .rz-button:first-child {
        border-radius: 0px 12px 0px 0px;
    }

    .server-item-buttons .rz-button:last-child {
        border-radius: 0px 0px 12px 0px;
    }

    .server-item-buttons p {
        display: inline-block !important;
        text-transform: capitalize;
        display: none !important;
    }

    .server-item-buttons iconify-icon {
        font-size: 20px;
        margin-left: 8px;
        margin-bottom: -4px;
        margin-right: 6px;
    }

    .server-item-buttons:hover .rz-button, .server-item-buttons:hover {
        min-width: 130px !important;
    }

        .server-item-buttons:hover p {
            display: inline-block !important;
        }

    .server-item .rz-stack iconify-icon {
        font-size: 16px;
        margin-right: 2px;
        margin-bottom: 2px;
    }

    .rz-datalist-data > li {
        background: none;
        border: none;
        box-shadow: none;
        padding: 0;
    }
</style>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public string? SearchText { get; set; }
    public void SetNameFilter(string? text)
    {
        SearchText = text;
        Grid.FirstPage(true);
    }

    public IQueryable<ServerData>? ServersList = null;
    public RadzenDataList<ServerData> Grid { get; set; } = null!;
    public int ServersCount { get; set; } = -1;

    public async Task LoadServers(LoadDataArgs args)
    {
        var Servers = _DB.Servers.Cache.Values.Where(x => Member != null && Member.HasServerPermission(Team, x, ServerPermission.ViewServer) && (string.IsNullOrEmpty(SearchText) || x.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))).OrderBy(x => x.Name);
        ServersCount = Servers.Count();
        ServersList = Servers.AsQueryable().Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
    }

    public async Task RefreshServers()
    {
        await Grid.Reload();
    }

    void ShowContextMenuWithContent(MouseEventArgs args, ServerData server) => ContextMenuService.Open(args, new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Settings", Icon = "settings", Disabled = Member == null || !Member.HasServerPermission(Team, server, ServerPermission.ManageServer) },
                new ContextMenuItem(){ Text = "Permissions", Icon = "key", Disabled = Member == null || !Member.HasServerPermission(Team, server, ServerPermission.ViewPermissions) },
                new ContextMenuItem(){ Text = "Host Info", Icon = "info", Disabled = Member == null || !Member.HasServerPermission(Team, server, ServerPermission.ViewHostInfo) },
                new ContextMenuItem(){ Text = "Stacks", Icon = "stacks", Disabled = Member == null || !Member.HasDockerContainerPermission(Team, server, DockerContainerPermission.ViewStacks) },
                new ContextMenuItem(){ Text = "Containers", Icon = "deployed_code", Disabled = Member == null || !Member.HasDockerContainerPermission(Team, server, DockerContainerPermission.ViewContainers) },
                new ContextMenuItem(){ Text = "Images", Icon = "perm_media", Disabled = Member == null || !Member.HasDockerPermission(Team, server, DockerPermission.ViewImages) },
                new ContextMenuItem(){ Text = "Volumes", Icon = "database", Disabled = Member == null || !Member.HasDockerPermission(Team, server, DockerPermission.ViewVolumes) },
                new ContextMenuItem(){ Text = "Networks", Icon = "lan", Disabled = Member == null || !Member.HasDockerPermission(Team, server, DockerPermission.ViewNetworks) },
                new ContextMenuItem() { Text = "Copy Server ID", Icon = "content_copy" }
         }, (arg) => OnMenuItemClick(arg, server));

    void OnMenuItemClick(MenuItemEventArgs arg, ServerData server)
    {
        switch (arg.Text)
        {
            case "Copy Server ID":
                _ = JS.CopyTextAsync(server.Id.ToString());
                break;
            default:
                if (arg.Text == "Host Info")
                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + server.GetVanityUrlOrId() + "/host");
                else
                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + server.GetVanityUrlOrId() + "/" + arg.Text.ToLower());
                break;
        }
        ContextMenuService.Close();
    }

    public async Task OnboardServer()
    {
        if (Member == null || Team == null)
            return;

        if (!Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
            return;

        if (string.IsNullOrEmpty(Team.EdgeOnboardKey))
        {
            string OnboardKey = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", "");

            var Response = await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.EdgeOnboardKey, OnboardKey), () =>
            {
                Team.EdgeOnboardKey = OnboardKey;
            });

            if (!Response.IsAcknowledged)
            {
                await Dialogs.ShowInfoAsync("Database Error", "Failed to create onboard key.");
                return;
            }
        }

        await Dialogs.OpenAsync<ServerOnboardDialog>("Onboard Server");
    }

    public async Task SetupServer()
    {
        if (Member == null)
            return;

        if (!Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
            return;

        var Result = await Dialogs.OpenAsync<ServerSetupDialog>("Setup Server");
        if (Result != null && Result is int)
        {
            switch ((int)Result)
            {
                case 0:
                    await SetupEdgeServer();
                    break;
                case 1:
                    await SetupClientServer();
                    break;
            }

            await RefreshServers();
        }
       
    }

    public async Task SetupEdgeServer()
    {
        if (Member == null)
            return;

        if (!Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
            return;

        Dialogs.Close(null);

        await Dialogs.ShowDynamicFormAsync<ServerSetupEdgeModel>("Setup Server", new ServerSetupEdgeModel(), async (ServerSetupEdgeModel data) =>
            {
                if (Team == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
                    return "You do not have Create Server Resource permissions";

                VanityUrlData Vanity = Team.GetVanityUrlData();

                string? VanityUrl = Utils.FormatVanityUrl(data.VanityUrl);

                ServerData Server = new ServerData
                {
                    Name = data.Name,
                    OwnerId = Member.UserId,
                    TeamId = Member.TeamId,
                    AgentId = null,
                    AgentIp = null!,
                    AgentKey = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", ""),
                    AgentType = ServerAgentType.Edge
                };

                if (Vanity.CheckAlreadyExists(null, VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;


                await _DB.Servers.CreateAsync(Server);

                _DB.Servers.Cache.TryAdd(Server.Id, Server);
                await Vanity.UpdateAsync(Server, VanityUrl);

                _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ServerCreated)
                .SetTarget(Server)
                .SetSensitive()
                .AddProperty("Vanity URL", VanityUrl)
                .AddProperty("Agent Type", "Edge"));

                _ = InvokeAsync(StateHasChanged);
                return null;
            });
    }

    public async Task SetupClientServer()
    {
        if (Member == null)
            return;

        if (!Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
            return;

        Dialogs.Close(null);

        await Dialogs.ShowDynamicFormAsync<ServerSetupClientModel>("Setup Server", new ServerSetupClientModel(), async (ServerSetupClientModel data) =>
            {
                if (Team == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
                    return "You do not have Create Server Resource permissions";

                if (data.Port == 0)
                    return "Server port is required.";

                if (string.IsNullOrEmpty(data.Ip))
                    return "Server ip is required.";

                if (Uri.CheckHostName(data.Ip) == UriHostNameType.Unknown)
                    return "Server ip has invalid format.";

                IPAddress? address = null;
                if (!IPAddress.TryParse(data.Ip, out address))
                {
                    IPHostEntry? Host = null;
                    try
                    {
                        Host = Dns.GetHostEntry(data.Ip);
                    }
                    catch { }
                    if (Host != null)
                        address = Host.AddressList.FirstOrDefault();
                }

                if (address == null)
                    return "Server ip is invalid.";

                VanityUrlData Vanity = Team.GetVanityUrlData();

                ClientAgent Client = new ClientAgent
                {
                    Server = null!
                };
                ServerData TempServer = new ServerData
                {
                    Name = ":)",
                    AgentIp = data.Ip,
                    AgentPort = data.Port,
                    AgentKey = data.AgentKey
                };

                string? VanityUrl = Utils.FormatVanityUrl(data.VanityUrl);

                if (Vanity.CheckAlreadyExists(null, VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;

                await Client.DiscoverAsync(data.Ip, data.Port);
                if (Client.Discover == null)
                    return "Failed to discover server.";

                TempServer.AgentId = Client.Discover.Id;

                HttpRequestMessage Req = new HttpRequestMessage(HttpMethod.Get, "https://" + TempServer.AgentIp + ":" + TempServer.AgentPort + "/setup");
                Req.Headers.TryAddWithoutValidation("Authorization", TempServer.AgentKey);
                HttpResponseMessage DiscoverResponse = await Program.AgentDiscoverHttp.SendAsync(Req);
                if (!DiscoverResponse.IsSuccessStatusCode)
                {
                    return "Failed to setup server.";
                }

                await Client.Connect(data.Ip, data.Port, data.AgentKey, false);
                await Task.Delay(new TimeSpan(0, 0, 2));
                if (Client == null || !Client.IsConnected)
                {
                    if (Client.WebSocket != null)
                    {
                        Client.WebSocket.DisconnectAndStop();
                        Client.WebSocket.Dispose();
                    }
                    return "Failed to connect to server: " + Client.Error.ToString();
                }

                ServerData Server = new ServerData
                {
                    Name = data.Name,
                    OwnerId = Member.UserId,
                    TeamId = Member.TeamId,
                    AgentId = Client.Discover.Id,
                    AgentIp = data.Ip,
                    AgentPort = data.Port,
                    AgentKey = data.AgentKey
                };

                if (Vanity.CheckAlreadyExists(null, VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;


                await _DB.Servers.CreateAsync(Server);
                Server.SetWebSocket(Client);
                _DB.Servers.Cache.TryAdd(Server.Id, Server);
                await Vanity.UpdateAsync(Server, VanityUrl);

                _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ServerCreated)
                .SetTarget(Server)
                .SetSensitive()
                .AddProperty("IP", data.Ip)
                .AddProperty("Port", data.Port)
                .AddProperty("Vanity URL", VanityUrl)
                .AddProperty("Agent Type", "Client"));

                _ = InvokeAsync(StateHasChanged);
                return null;
            });
    }
}
