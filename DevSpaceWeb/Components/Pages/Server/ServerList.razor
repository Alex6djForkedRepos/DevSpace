@using DevSpaceWeb.Models.Setup
@using System.Net
@inject DialogService DialogService

<PageTitle>My Servers | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:account"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Servers</RadzenText>
    </div>
    <br />

    <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Setup Server" Click="@SetupServer" Disabled="(!Member.HasServerPermission(null, ServerPermission.ManageResource))" />
    <br />
    <br />
    @foreach (ServerData i in _DB.Servers.Cache.Values.Where(x => Member.HasServerPermission(x, ServerPermission.ViewServer)))
    {
        <a href="@("/teams/" + Session.Selected.Team.VanityUrl + "/servers/" + i.GetVanityUrlOrId())">
            <div class="server-item d-flex flex-grow-1 gap-2" style="display: flex; vertical-align: middle;">
                <div class="server-item-icon flex-none d-flex">
                    <span class="iconify" data-icon="mdi:server"></span>
                </div>
                <RadzenText TextStyle="TextStyle.H6" class="mt-5 ml-2">@i.Name</RadzenText>
            </div>
        </a>
        <br />
    }

</div>

<style>
    .server-item {
    background-color: #21262d !important;
    border-radius: 12px;
    border: 1px solid rgba(0,135,201,0.3) !important;
    padding-left: 10px;
    cursor: pointer;
    }

    .server-item:hover {
    border-color: rgba(0,135,201,0.5) !important;
    }

    .server-item-icon {
    vertical-align: center;
    }

    .server-item-icon .iconify {
    width: 40px;
    height: 40px;
    margin-top: 16px;
    color: rgba(0,135,201,0.7) !important;
    }

    .server-item:hover .server-item-icon .iconify {
    color: rgba(0,135,201,0.9) !important;
    }

    .server-item-info {
    padding-left: 10px;
    }

    .server-item-buttons .rz-button {
    min-width: 34px !important;
    display: block !important;
    text-align: right;
    height: 42px;
    max-height: 42px !important;
    }

    .server-item .server-item-buttons .rz-button:hover {
    background-color: rgba(0,135,201,0.3) !important;
    }

    .server-item-buttons .rz-button:first-child {
    border-radius: 0px 12px 0px 0px;
    }

    .server-item-buttons .rz-button:last-child {
    border-radius: 0px 0px 12px 0px;
    }

    .server-item-buttons p {
    display: inline-block !important;
    text-transform: capitalize;
    display: none !important;
    }

    .server-item-buttons .iconify {
    width: 20px;
    height: 20px;
    margin-left: 8px;
    margin-bottom: -4px;
    margin-right: 6px;
    }

    .server-item-buttons:hover .rz-button, .server-item-buttons:hover {
    min-width: 130px !important;
    }

    .server-item-buttons:hover p {
    display: inline-block !important;
    }
</style>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamMemberData Member => Session.Selected.Member;

    public async Task SetupServer()
    {
        if (!Member.HasServerPermission(null, ServerPermission.ManageResource))
            return;

        await DialogService.ShowDynamicFormAsync<ServerSetupModel>("Setup Server", new ServerSetupModel(), async (ServerSetupModel data) =>
            {
                if (!Member.HasServerPermission(null, ServerPermission.ManageResource))
                    return "You do not have Manage Resource permissions";

                if (!IPAddress.TryParse(data.Ip, out _))
                    return "Invalid IP address.";

                if (data.Port == 0)
                    return "Server port is required.";

                ServerWebSocket Client = new ServerWebSocket();
                Client.Run(new ServerData
                    {
                        AgentIp = data.Ip,
                        AgentPort = data.Port,
                        AgentKey = data.AgentKey
                    });
                if (!Client.Client.IsConnected)
                    return "Failed to connect to server.";

                ServerData Server = new ServerData
                    {
                        Name = data.Name,
                        OwnerId = Member.UserId,
                        TeamId = Member.TeamId,
                        AgentIp = data.Ip,
                        AgentPort = data.Port,
                        AgentKey = data.AgentKey
                    };
                

                await _DB.Servers.CreateAsync(Server);
                Server.SetWebSocket(Client);
                _DB.Servers.Cache.TryAdd(Server.Id, Server);

                _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Resource, AuditLogEventType.ServerCreated)
                .SetTarget(Server)
                .SetSensitive()
                .AddProperty("Name", data.Name)
                .AddProperty("IP", data.Ip)
                .AddProperty("Port", data.Port.ToString()));

                InvokeAsync(StateHasChanged);
                return null;
            });
    }
}
