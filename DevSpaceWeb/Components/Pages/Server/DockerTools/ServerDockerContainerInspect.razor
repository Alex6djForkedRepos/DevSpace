@using BlazorMonaco.Editor
@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@using System.Text
@inject NotificationService Notifications

@if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:information-outline"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Inspect</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
            <RadzenBreadCrumbItem Text="Inspect" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Docker Administrator
        </RadzenAlert>
    </div>
}
else
{
    <div class="dash-box">
        <div class="dash-box-header dash-box-content">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:information-outline"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Inspect</RadzenText>
            @if (string.IsNullOrEmpty(ContainerName))
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@(string.IsNullOrEmpty(ContainerName) ? ContainerId : ContainerName)" />
            <RadzenBreadCrumbItem Text="Inspect" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get container info.
            </RadzenAlert>
        }
        else
        {
            <br />
            @if (GotInspect)
            {
                <StandaloneCodeEditor @ref="_editor" Id="editorContainerInspect" ConstructionOptions="EditorConstructionOptions" OnDidInit="@Init" />
            }
            else
            {
                <div class="monaco-editor">

                </div>
            }
        }
    </div>
}

<style>
    .monaco-editor, .monaco-diff-editor {
        min-height: calc(100vh - 140px) !important;
        max-height: calc(100vh - 140px) !important;
        padding-top: 10px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public string ContainerId { get; set; }

    public string? InspectData { get; set; } = "";
    public bool GotInspect { get; set; }
    public string? ContainerName { get; set; }
    public bool Failed { get; set; }

    private StandaloneCodeEditor _editor = null;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Theme = "vs-dark",
            ScrollBeyondLastLine = false,
            ColumnSelection = true,
            Folding = false,
            ReadOnly = true
        };
    }

    public async Task Init()
    {
        var Model = await _editor.GetModel();
        await Model.SetValue(InspectData);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))
            return;

        try
        {
            var Result = await Server.RunJsonAsync<ContainerInspectResponse>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Inspect));
            Failed = !Result.IsSuccess;
            if (Failed || Result.Data == null)
                return;

            ContainerName = Result.Data.Name.Substring(1);
            InspectData = Newtonsoft.Json.JsonConvert.SerializeObject(Result.Data, Newtonsoft.Json.Formatting.Indented);
            GotInspect = true;
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }
}
