@using System.Net.WebSockets
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.WebSocket
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService

<PageTitle>Docker Registry | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:table"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Registries</RadzenText>
        @if (IsLoading && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewRegistries))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Registry" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewRegistries))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Registries
            </RadzenAlert>
        </div>
    }
    else
    {

    <div class="dash-box-content">
        <RadzenButton Variant="Variant.Filled" Text="Create Registry (Not Available Yet)" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateRegistry" Disabled="true" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshRegistry" />
    </div>

    <RadzenDataGrid @ref="@grid" Data="@employees" LoadData="@LoadData" Count="@count" IsLoading="@IsLoading"
                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                    @bind-Value="@selectedEmployees" SelectionMode="DataGridSelectionMode.Multiple"
                    PagingSummaryFormat="@(count + " " + (count != 1 ? "registries" : "registry") )" Density="Density.Compact"
                    AllowSorting="false" AllowRowSelectOnRowClick="false" EmptyText="No registries."
                    AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    GotoFirstPageOnSort="true" TItem="DockerRegistry" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))"
                    LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
        <Columns>
                <RadzenDataGridColumn Title="Name" Width="@GridWidth.NameWithIcon" Frozen="true" Filterable="false">
                <Template>
                    @switch (context.Type)
                    {
                        case DockerRegistryType.DockerHub:
                            {
                                <span class="iconify mr-2" data-icon="mdi:docker"></span>
                            }
                            break;
                        case DockerRegistryType.Custom:
                            {
                                <span class="iconify mr-2" data-icon="mdi:box"></span>
                            }
                            break;
                        case DockerRegistryType.AWS:
                            {
                                <span class="iconify mr-2" data-icon="mdi:aws"></span>
                            }
                            break;
                        case DockerRegistryType.Azure:
                            {
                                <span class="iconify mr-2" data-icon="mdi:microsoft-azure"></span>
                            }
                            break;
                        case DockerRegistryType.GitHub:
                            {
                                <span class="iconify mr-2" data-icon="mdi:github"></span>
                            }
                            break;
                        case DockerRegistryType.GitLab:
                            {
                                <span class="iconify mr-2" data-icon="mdi:gitlab"></span>
                            }
                            break;
                        case DockerRegistryType.ProGet:
                            {
                                <span class="iconify mr-2" data-icon="ri:box-3-fill"></span>
                            }
                            break;
                        case DockerRegistryType.Quay:
                            {
                                <span class="iconify mr-2" data-icon="mdi:cards-diamond"></span>
                            }
                            break;
                    }
                    @context.Name
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="@GridWidth.Type" Filterable="false" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @if (context.IsEnabled)
                    {
                        <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Success" Text="Enabled" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Darker" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Disabled" />
                    }
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Pull Limit" Filterable="false" Width="100px">
                    <Template>
                    @if (Program.IsPreviewMode)
                    {
                        @("69/100")
                    }
                    else
                    {
                        if (AnonymousPullLimit == null)
                        {
                            @("Unknown")
                        }
                        else
                        {
                            @($"{AnonymousPullLimit.CurrentLimit}/{AnonymousPullLimit.MaxLimit}")
                        }
                    }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Action" Filterable="false">
                    <Template>
                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

<style>

    .dash-box-content .rz-button-sm .rzi {
        font-size: 1.15rem !important;
        width: 1.15rem !important;
        height: 1.15rem !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    IQueryable<DockerRegistry>? employees;
    public int count = 0;
    IList<DockerRegistry>? selectedEmployees;
    public bool AnySelected => selectedEmployees != null ? selectedEmployees.Any() : false;
    RadzenDataGrid<DockerRegistry> grid = null!;
    public bool IsLoading = true;
    public RegistryLimitResponse? AnonymousPullLimit;

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewRegistries))
            return;

        if (Program.IsPreviewMode)
        {
            employees = new List<DockerRegistry>
            {
                new DockerRegistry{ Type = DockerRegistryType.DockerHub, Name = "Docker Hub (Anonymous)", IsEnabled = true, IsDefault = true }
            }.AsQueryable();
            count = 1;
            IsLoading = false;
        }
        else
        {
            IsLoading = true;
            IQueryable<DockerRegistry> query = new DockerRegistry[]
            {
                new DockerRegistry{ Type = DockerRegistryType.DockerHub, Name = "Docker Hub (Anonymous)", IsEnabled = true, IsDefault = true }
            }.AsQueryable();

            SocketResponse<RegistryLimitResponse?> Response = await Server.RecieveJsonAsync<RegistryLimitResponse, DockerEvent>(new DockerEvent(DockerEventType.GetPullLimit));
            if (Response.Data != null)
                AnonymousPullLimit = Response.Data;

            if (!string.IsNullOrEmpty(args.Filter))
                query = query.Where(args.Filter);

            if (!string.IsNullOrEmpty(args.OrderBy))
                query = query.OrderBy(args.OrderBy);

            count = query.Count();
            employees = query.Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            IsLoading = false;
        }
    }

    public async Task SetNameFilter(string text)
    {
        await grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
    }

    void ShowContextMenuWithManageItems(DockerRegistry item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Enable", Value = "enable", Icon = "power_settings_new", Disabled = Member == null || item.IsEnabled || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageRegistries) },
                new ContextMenuItem(){ Text = "Disable", Value = "disable", Icon = "stop", Disabled = Member == null ||  item.IsDefault || !item.IsEnabled || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageRegistries) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.IsDefault || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageRegistries) },
                                                 }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerRegistry item)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageRegistries))
            return;

        // _ = Task.Run(async () =>
        // {
        //     switch (args.Value.ToString())
        //     {
        //     }
        // });

        ContextMenuService.Close();
    }

    public class DockerRegistry
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string RemoteAddress { get; set; }
        public DockerRegistryType Type { get; set; }
        public bool IsEnabled { get; set; }
        public bool IsDefault { get; set; }
        // public string RemoteName { get; set; }
        // public string CredKey { get; set; }
        // public string CredToken { get; set; }
        // public string CredRegion { get; set; }
    }
    public enum DockerRegistryType
    {
        DockerHub, Custom, AWS, Quay, ProGet, Azure, GitHub, GitLab
    }

    public async Task RefreshRegistry()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        IQueryable<DockerRegistry> query = new DockerRegistry[]
            {
                new DockerRegistry{ Type = DockerRegistryType.DockerHub, Name = "Docker Hub (Anonymous)", IsEnabled = true, IsDefault = true, Id = "docker_anonymous" }
            }.AsQueryable();


        count = query.Count();
        employees = query.Take(15);
    }

    public async Task CreateRegistry()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageRegistries))
            return;
    }
}
