@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@using System.Text
@inject NotificationService Notifications

@if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges))
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="material-symbols:topic-outline"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Changes</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
            <RadzenBreadCrumbItem Text="Changes" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Containers Changes
        </RadzenAlert>
    </div>
}
else if (Changes == null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="material-symbols:topic-outline"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Changes</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
            <RadzenBreadCrumbItem Text="Changes" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get container logs.
            </RadzenAlert>
        }
    </div>
}
else
{
    <div class="dash-box">
        <div class="dash-box-header dash-box-content">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="material-symbols:topic-outline"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Changes</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@Changes.ContainerName" />
            <RadzenBreadCrumbItem Text="Changes"></RadzenBreadCrumbItem>
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                @if (Changes != null && Changes.Changes != null)
                {
                    foreach (var c in Changes.Changes.OrderBy(x => x.Path))
                    {
                        <RadzenTableRow>
                            <RadzenTableCell>
                                @c.Kind.ToString()
                            </RadzenTableCell>
                            <RadzenTableCell>
                                @c.Path
                            </RadzenTableCell>
                        </RadzenTableRow>
                    }
                }
            </RadzenTableBody>
        </RadzenTable>
    </div>
}

<style>

</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public string? ContainerId { get; set; }

    DockerContainerChanges? Changes { get; set; }
    public bool Failed { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        
        if (Member == null || Server == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges))
            return;

        try
        {
            var Result = await Server.RunJsonAsync<DockerContainerChanges>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Changes));
            Failed = !Result.IsSuccess;
            Changes = Result.Data;
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }
}
