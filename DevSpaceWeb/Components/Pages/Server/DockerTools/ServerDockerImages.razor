@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NotificationService Notifications
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>Docker Images | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:folder-image"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Images</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Images" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Images
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Pull Image" Icon="download" Click="@PullImage" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))" />
                <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/build")">
                    <RadzenButton Variant="Variant.Filled" Text="Build Image" Icon="edit_note" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))" />
                </a>
                <RadzenButton Variant="Variant.Filled" Text="Prune Images" Icon="delete" Click="@PruneImages" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))" />
                <a href="https://hub.docker.com/search?type=image" target="_blank"><RadzenButton Text="Docker Hub" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
            </ActionBar>
            <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedImagesAction(ControlImageType.Remove))" Icon="delete" Disabled="@(!AnySelected || IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshImages" Disabled="@IsLoading" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search images" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
            </div>
        </div>
        <RadzenDataGrid @ref="@grid" AllowRowSelectOnRowClick="false" Data="@ImagesList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                        @bind-Value="@SelectedImages" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagingSummaryFormat="@(Count + " image" + (Count != 1 ? "s" : "") )" Density="Density.Compact" EmptyText="No images."
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        TItem="DockerImageInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
            <Columns>
                <RadzenDataGridColumn Width="36px" Frozen="true">
                    <HeaderTemplate>
                        <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                        Value="@(SelectedImages == null || SelectedImages?.Any() != true ? false : !ImagesList.All(i => SelectedImages.Contains(i)) ? null : ImagesList.Any(i => SelectedImages.Contains(i)))"
                                        Change="@(args => SelectedImages = args == true ? (SelectedImages != null && SelectedImages.Any()) ? null : ImagesList.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedImages != null && SelectedImages.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                        TValue="bool" Change="@(() => grid.SelectRow(data))" Disabled="@IsLoading" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="280px" Frozen="true" Property="@nameof(DockerImageInfo.Name)">
                    <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + context.ID)">@context.Name</RadzenLink>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Version" Width="120px" Filterable="false">
                    <Template>
                        @context.Version
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="240px" Filterable="false">
                    <Template>
                        @if (context.ContainersCount == 0)
                        {
                            <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unused" />
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="@(context.ContainersCount + " Container" + (context.ContainersCount != 1 ? "s" : ""))" />
                        }
                        @if (context.IsLocal)
                        {
                            <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="Local" class="ml-2" />
                        }
                        @if (context.IsParent)
                        {
                            <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="Parent" class="ml-2" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsOne" Sortable="false" Filterable="false" Pickable="false">
                    <Template>
                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading)" />
                        
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Size" Width="80px" Filterable="false">
                    <Template>
                        @Utils.SizeSuffix(context.Size)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Created" Width="@GridWidth.Date" Filterable="false">
                    <Template>
                        <RadzenContent MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.Now - context.Created).TotalDays} Days ago"))">@context.Created.ToString("dd'/'MM'/'yyyy")</RadzenContent>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Filterable="false">
                    <Template>
                        <RadzenStack Gap="6px" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                            @if (!string.IsNullOrEmpty(context.Website) && context.Website != context.Source)
                            {
                                <a href="@context.Website" target="_blank"><RadzenButton Text="Website" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                            @if (!string.IsNullOrEmpty(context.Docs))
                            {
                                <a href="@context.Docs" target="_blank"><RadzenButton Text="Docs" Icon="book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                            @if (!string.IsNullOrEmpty(context.Source))
                            {
                                <a href="@context.Source" target="_blank"><RadzenButton Text="Source" Icon="code" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                        </RadzenStack>

                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

<style>
    .settings-item {
        width: 120px;
        height: 120px;
    }

        .settings-item iconify-icon {
            font-size: 30px;
            margin-top: 16px;
            color: var(--rz-info);
        }

        .settings-item .rz-text-h6 {
            margin-top: 14px;
            font-size: 1.1rem;
            color: var(--rz-base-200) !important;
        }

    .rz-stack a {
        text-decoration: none !important;
    }

    .settings-item:hover {
        background-color: var(--rz-base-dark);
        outline: solid 1px var(--rz-secondary-dark) !important;
    }

    .settings-item-disabled {
        opacity: 0.6;
        cursor: not-allowed !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<DockerImageInfo[]?>? ImagesResponse = null;

    IQueryable<DockerImageInfo>? ImagesList;
    public int Count = 0;
    IList<DockerImageInfo>? SelectedImages;
    public bool AnySelected => SelectedImages != null ? SelectedImages.Any() : false;
    RadzenDataGrid<DockerImageInfo> grid = null!;
    public bool IsLoading = true;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
            return;

        if (Program.IsPreviewMode)
        {
            ImagesList = new List<DockerImageInfo>
            {
                new DockerImageInfo
                {
                    ID = "sha256:a24316da3958ca259f1d8f371809ff8c813684172a53ce39ed43428319a6c934",
                    Name = "mcr.microsoft.com/dotnet/aspnet",
                    Version = "9.0",
                    ContainersCount = 1,
                    Size = 223346688,
                    Created = DateTime.UtcNow.AddDays(-3)
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (ImagesResponse == null)
            {
                IsLoading = true;
                await Server.RunJsonAsync<DockerImageInfo[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListImages), (response) =>
                {
                    ImagesResponse = response;
                });

                IsLoading = false;
            }

            if (ImagesResponse != null && ImagesResponse.IsSuccess && ImagesResponse.Data != null)
            {
                IQueryable<DockerImageInfo> query = ImagesResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                ImagesList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
            else
                ImagesList = new List<DockerImageInfo>().AsQueryable();
        }
    }

    async Task RunSelectedImagesAction(ControlImageType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (Member == null || Server == null || SelectedImages == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        if (type == ControlImageType.Export)
        {
            _ = Dialogs.ShowInfoAsync("Unavailable", "The export feature is not available yet.");
            return;
        }
        else if (type == ControlImageType.Remove)
        {
            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedImages.Count} image" + (SelectedImages.Count != 1 ? "s" : ""),
                $"Are you sure you want to remove these {(SelectedImages.Count == 1 ? "this image" : "these images")}: " + string.Join(", ", SelectedImages.Select(x => x.Name)), "Confirm", ButtonStyle.Success);

            if (!Confirm)
                return;

            if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                return;

            if (SelectedImages.Any(x => x.ContainersCount != 0 || x.IsParent))
            {
                Confirm = await Dialogs.ShowConfirmAsync("Image Conflict", "Some images are being used by containers would you like to force remove the selected images and stop running containers.", "Confirm", ButtonStyle.Success);

                if (!Confirm)
                    return;

                type = ControlImageType.ForceRemove;

                if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                    return;
            }
        }

        IsLoading = true;
        await InvokeAsync(StateHasChanged);

        foreach (DockerImageInfo i in SelectedImages)
        {
            await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlImage, i.ID, imageType: type));
        }
        SelectedImages = null;
        IsLoading = false;
        await InvokeAsync(RefreshImages);
    }

    void ShowContextMenuWithManageItems(DockerImageInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "panorama", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages) },
                //new ContextMenuItem(){ Text = "Export", Value = "export", Icon = "folder_zip", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.ContainersCount != 0 || item.IsParent || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages) },
                new ContextMenuItem() { Text = "Force Remove", Value = "force_remove", Icon = "delete_forever", Disabled = Member == null || item.IsParent || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages) },
                new ContextMenuItem() { Text = "Copy Image ID", Value = "copy", Icon = "content_copy" }
                                                 }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerImageInfo item)
    {
        ContextMenuService.Close();
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + item.ID);
                    break;
                case "export":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                        return;

                    _ = Dialogs.ShowInfoAsync("Unavailable", "The export feature is not available yet.");
                    // await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlImage, imageType: ControlImageType.Export) { ResourceList = new string[] { item.ID } }, (response) =>
                    //     {
                    //         InvokeAsync(RefreshImages);
                    //     });
                    break;
                case "remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                            return;

                        bool Confirm = await Dialogs.ShowConfirmAsync("Remove Image: " + item?.Name,
                            "Are you sure you want to remove this image?", "Confirm", ButtonStyle.Success);

                        if (!Confirm)
                            return;

                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlImage, imageType: ControlImageType.Remove) { ResourceList = new string[] { item.ID } }, (response) =>
                        {

                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshImages);
                    }
                    break;
                case "force_remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                            return;

                        bool Confirm = await Dialogs.ShowConfirmAsync("Force Remove Image:" + item?.Name, "This will stop any running containers using this image.", "Confirm", ButtonStyle.Success);

                        if (!Confirm)
                            return;

                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlImage, imageType: ControlImageType.ForceRemove) { ResourceList = new string[] { item.ID } }, (response) =>
                        {

                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshImages);

                    }
                    break;
                case "copy":
                    {
                        await JS.CopyTextAsync(item.ID);
                    }
                    break;
            }
        });
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);


    async Task PullImage()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        SocketResponse<RegistryLimitResponse?> Response = await Server.RunJsonAsync<RegistryLimitResponse, DockerEvent>(Notifications, new DockerEvent(DockerEventType.GetPullLimit));
        RegistryLimitResponse? Limits = null;
        if (Response.IsSuccess)
            Limits = Response.Data;

        dynamic Result = await Dialogs.OpenAsync<PullImageDialog>("Pull Docker Image", new Dictionary<string, object?>
        {
            { "Limits", Limits }
        });
        if (Result == null)
            return;

        if ((bool)Result)
        {
            await RefreshImages();
        }

    }

    public async Task PruneImages()
    {
        if (Server == null || Member == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        bool Result = await Dialogs.ShowConfirmAsync("Prune Images", "Are you sure you want to prune unused images?", "Confirm", ButtonStyle.Warning);
        if (Result)
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.PruneImages), (rsponse) =>
            {

            });

            IsLoading = false;
            await InvokeAsync(RefreshImages);
        }
    }

    public async Task RefreshImages()
    {
        ImagesResponse = null;
        await grid.RefreshDataAsync();
    }
}
