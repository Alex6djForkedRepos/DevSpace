@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@using System.Text
@inject NotificationService Notifications

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:terminal"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Container Console</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
        <RadzenBreadCrumbItem Text="Console" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.UseContainerConsole))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Use Container Console
        </RadzenAlert>
    }
    else
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
            This feature is not available yet.
        </RadzenAlert>
    }

</div>

<style>

</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public string ContainerId { get; set; }


    protected override async Task OnParametersSetAsync()
    {

    }
}
