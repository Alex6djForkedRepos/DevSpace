@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using DevSpaceWeb.Extensions.Filters
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject NotificationService Notifications
@inject IJSRuntime JS

<PageTitle>Docker Stacks | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="ri:stack-fill"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Stacks</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Stacks" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Stacks
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <ActionBar>
                <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/build")"><RadzenButton Variant="Variant.Filled" Text="Create Stack" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))" /></a>
                <RadzenButton Variant="Variant.Filled" Click="@ImportStack" Text="Import Stack" Icon="publish" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(Member == null || Team == null || Server == null || Program.IsPreviewMode || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))" />
            </ActionBar>
            <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedStacksAction(ControlStackType.Remove))" Icon="delete" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshStacks" Disabled="@IsLoading" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search stacks" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
            </div>
        </div>
        <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@StacksList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                        @bind-Value="@SelectedStacks" SelectionMode="DataGridSelectionMode.Multiple"
                        PagingSummaryFormat="@(Count + " stack" + (Count != 1 ? "s" : "") )" Density="Density.Compact"
                        AllowSorting="false" EmptyText="No stacks."
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        TItem="DockerStackInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
            <Columns>
                <RadzenDataGridColumn Width="36px" Frozen="true">
                    <HeaderTemplate>
                        <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                        Value="@(SelectedStacks == null || SelectedStacks?.Any() != true ? false : !StacksList.All(i => SelectedStacks.Contains(i)) ? null : StacksList.Any(i => SelectedStacks.Contains(i)))"
                                        Change="@(args => SelectedStacks = args == true ? (SelectedStacks != null && SelectedStacks.Any()) ? null : StacksList.Where(x => x.ControlType == DockerStackControl.Full).ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedStacks != null && SelectedStacks.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@(IsLoading || data.ControlType != DockerStackControl.Full)" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="@GridWidth.Name" Frozen="true" Property="@nameof(DockerStackInfo.Name)">
                    <Template>
                        @if (string.IsNullOrEmpty(context.Id))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.Name)">@context.Name</RadzenLink>
                        }
                        else
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.Id)">@context.Name</RadzenLink>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Type" Width="@GridWidth.Type" Property="@nameof(DockerStackInfo.Type)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @context.Type.ToString()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Control" Width="@GridWidth.Type" Property="@nameof(DockerStackInfo.ControlType)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @context.ControlType.ToString()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="@GridWidth.Type" Property="@nameof(DockerStackInfo.IsRunning)" FilterMode="FilterMode.CheckBoxList" FormatString="{0}" FormatProvider="@StackRunningFilterProvider.Instance">
                    <Template>
                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="@(context.IsRunning? BadgeStyle.Success: BadgeStyle.Danger)" Text="@(context.IsRunning ? "Running" : "Down")" IsPill="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Containers" Width="120px" Filterable="false">
                    <Template>
                        <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="@(context.Containers.Count + " container" + (context.Containers.Count != 1 ? "s" : ""))" IsPill="true" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsOne" Filterable="false">
                    <Template>
                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Version" Width="70px" Filterable="false">
                    <Template>
                        @context.Version
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Created" Width="@GridWidth.Date" Filterable="false">
                    <Template>
                        @if (context.CreatedAt.HasValue)
                        {
                            <RadzenContent MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.UtcNow - context.CreatedAt.Value).TotalDays} Days ago"))">@Utils.GetLocalDate(Session, context.CreatedAt.Value)</RadzenContent>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Updated" Filterable="false">
                    <Template>
                        @if (context.UpdatedAt.HasValue)
                        {
                            <RadzenContent MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.UtcNow - context.UpdatedAt.Value).TotalDays} Days ago"))">@Utils.GetLocalDate(Session, context.UpdatedAt.Value)</RadzenContent>
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<List<DockerStackInfo>?>? StacksResponse = null;

    IQueryable<DockerStackInfo>? StacksList;
    public int Count = 0;
    IList<DockerStackInfo>? SelectedStacks;
    public bool AnySelected => SelectedStacks != null ? SelectedStacks.Any() : false;
    RadzenDataGrid<DockerStackInfo> Grid;
    public bool IsLoading = true;

    public string? SearchText { get; set; }

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
            return;

        if (Program.IsPreviewMode)
        {
            StacksList = new List<DockerStackInfo>
            {
                new DockerStackInfo
                {
                    Containers = new HashSet<DockerContainerInfo>
                    {
                        new DockerContainerInfo
                        {
                            Id = "test",
                            Name = "test-service",
                            ImageId = "0",
                            ImageName = "test:latest",
                            State = "exited",
                            Status = "Exited (137) 1 week ago",
                        }
                    },
                    CreatedAt = DateTime.UtcNow.AddDays(-3),
                    Id = "64",
                    IsRunning = true,
                    Name = "devspace-demo",
                    Type = DockerStackType.Compose,
                    UpdatedAt = DateTime.UtcNow,
                    Version = 1,
                    ControlType = DockerStackControl.Full
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (StacksResponse == null)
            {
                IsLoading = true;
                try
                {
                    StacksResponse = await Server.RunJsonAsync<List<DockerStackInfo>, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListStacks));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }

                IsLoading = false;


            }

            if (StacksResponse != null && StacksResponse.IsSuccess && StacksResponse.Data != null)
            {
                IQueryable<DockerStackInfo> query = StacksResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                StacksList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    void RunSelectedStacksAction(ControlStackType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedStacks == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
            return;

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            foreach (DockerStackInfo i in SelectedStacks)
            {
                await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, i.Id, stackType: type));
            }
            IsLoading = false;
            SelectedStacks = null;
            await InvokeAsync(RefreshStacks);
        });

    }

    void ShowContextMenuWithManageItems(DockerStackInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem() { Text = "View", Value = "view", Icon = "stacks", Disabled = Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks)  },
                new ContextMenuItem() { Text = "Edit", Value = "edit", Icon = "edit_square", Disabled = Member == null || item.ControlType != DockerStackControl.Full || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.ControlType != DockerStackControl.Full || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks) },
                new ContextMenuItem() { Text = "Copy Stack ID", Value = "copy", Icon = "content_copy" }
                                                         }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerStackInfo item)
    {
        ContextMenuService.Close();
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + item.Id);
                    break;
                case "edit":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + item.Id + "/edit");
                    break;
                case "remove":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                        return;

                    if (item.ControlType != DockerStackControl.Full)
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, item.Id, stackType: ControlStackType.Remove));
                    IsLoading = false;
                    await InvokeAsync(RefreshStacks);
                    break;
                    case "copy":
                    {
                        await JS.CopyTextAsync(item.Id);
                    }
                    break;

            }
        });

    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

    public async Task ImportStack()
    {
        if (Team == null || Server == null || Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))
            return;

        await Dialogs.OpenAsync<ImportPortainerStackDialog>("Import Portainer Stack");

        await RefreshStacks();
    }

    public async Task RefreshStacks()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        StacksResponse = null;
        await Grid.RefreshDataAsync();
    }
}
