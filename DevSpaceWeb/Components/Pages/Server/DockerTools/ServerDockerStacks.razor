@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="ri:stack-fill"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Docker Stacks</RadzenText>
        <RadzenTextBox Placeholder="Search..." @oninput=@(args => SetNameFilter(args.Value.ToString())) Style="max-width: 240px;" class="ml-4" />
    </div>

    <div class="dash-box-content">
        <RadzenButton Variant="Variant.Outlined" Text="Export" Click="@(() => RunSelectedContainersAction(ControlImageType.Export))" Icon="folder_zip" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: var(--rz-button-border-radius) 0 0 var(--rz-button-border-radius) !important;" />
        <RadzenButton Variant="Variant.Flat" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlImageType.Remove))" Icon="delete" Disabled="@(!AnySelected)" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="border-radius: 0 var(--rz-button-border-radius) var(--rz-button-border-radius) 0 !important; margin-right: 4px !important;" />

        <RadzenButton Variant="Variant.Filled" Text="Create Stack" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateImage" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh Stacks" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshImages" />
    </div>

    <RadzenDataGrid @ref="@grid" AllowRowSelectOnRowClick="true" Data="@employees" LoadData="@LoadData" Count="@count" IsLoading="@isLoading"
    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
    @bind-Value="@selectedEmployees" SelectionMode="DataGridSelectionMode.Multiple" ShowPagingSummary="true"
    PagingSummaryFormat="@(count + " stack" + (count != 1 ? "s" : "") )" Density="Density.Compact"
    AllowColumnResize="true" AllowSorting="false"
    AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    GotoFirstPageOnSort="true"
    LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
        <Columns>
            <RadzenDataGridColumn Width="26px" Sortable="false" Filterable="false" Frozen="true" Resizable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                    Value="@(selectedEmployees == null || selectedEmployees?.Any() != true ? false : !employees.All(i => selectedEmployees.Contains(i)) ? null : employees.Any(i => selectedEmployees.Contains(i)))"
                    Change="@(args => selectedEmployees = args == true ? employees.ToList() : null)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedEmployees != null && selectedEmployees.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                    TValue="bool" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Name" Width="100px" Frozen="true" Filterable="false">
                <Template>
                    <RadzenLink Path="@("/teams" + Session.Selected.Team.Data.GetVanityUrl() + "/stacks/" + Session.Selected.Server.Data.GetVanityUrl() + "/stacks/" + context.Name)" MouseEnter="@(args => ShowUptimeTooltip(args, context.Id))">@context.Name</RadzenLink>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Type" Width="60px" Filterable="false">
                <Template>
                    <RadzenText TextStyle="TextStyle.Body2">@context.Type.ToString()</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="60px" Filterable="false">
                <Template>
                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="@(context.IsRunning ? BadgeStyle.Success : BadgeStyle.Danger)" Text="@(context.IsRunning ? "Running" : "Down")" IsPill="true" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Containers" Width="80px" Filterable="false">
                <Template>
                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="@(context.Containers.Count + " container" + (context.Containers.Count == 1 ? "s" : ""))" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, string.Join(", ", context.Containers)))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="40px" Sortable="false" Filterable="false" Pickable="false" Resizable="false">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenButton Click=@(args => ShowContextMenuWithManageItems(context, args)) Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Width="80px">
                <Template>
                    <RadzenText TextStyle="TextStyle.Body2" MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.Now - context.CreatedAt).TotalDays} Days ago") )">@context.CreatedAt.ToString("dd'/'MM'/'yyyy")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Updated" Width="80px">
                <Template>
                    @if (context.UpdatedAt.HasValue)
                    {
                        <RadzenText TextStyle="TextStyle.Body2" MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.Now - context.UpdatedAt.Value).TotalDays} Days ago") )">@context.UpdatedAt.Value.ToString("dd'/'MM'/'yyyy")</RadzenText>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .dash-box-content .rz-button:not(.rz-button.rz-info):not(.rz-button.rz-success):not(.rz-button.rz-warning) {
    border-radius: 0px !important;
    margin-right: -4px !important;
    box-shadow: inset 0 0 0 var(--rz-border-width) #717376 !important;
    }

    .dash-box-content .rz-button-sm .rzi {
    font-size: 1.15rem !important;
    width: 1.15rem !important;
    height: 1.15rem !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    DockerResponse<DockerStack[]>? containers = null;

    IQueryable<DockerStack> employees;
    public int count = 0;
    IList<DockerStack> selectedEmployees;
    public bool AnySelected => selectedEmployees != null ? selectedEmployees.Any() : false;
    RadzenDataGrid<DockerStack> grid;
    public bool isLoading = false;

    public async Task LoadData(LoadDataArgs args)
    {
        Logger.LogMessage("Loading Data", LogSeverity.Info);

        if (Program.IsPreviewMode)
        {
            employees = new List<DockerStack>
            {
            }.AsQueryable();
            count = 0;
        }
        else
        {
            if (containers == null)
            {
                isLoading = true;
                try
                {
                    // containers = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<DockerStack[]>>(new DockerEvent(DockerEventType.ListStacks));
                    // if (containers == null)
                    //     containers = new DockerResponse<DockerStack[]>
                    //     {
                    //         Data = new DockerStack[]
                    //         {
                    //             new DockerStack
                    //             {
                    //                 Id = "1",
                    //                 Name = "Test",
                    //                 CreatedAt = DateTime.UtcNow,
                    //                 IsDevSpace = true
                    //             }
                    //         }
                    //     };

                    List<DockerStack> stacks = new List<DockerStack>();
                    var list = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<ContainerItem[]>>(new DockerEvent(DockerEventType.ListContainers));


                    foreach (var i in list.Data)
                    {
                        if (!i.Labels.TryGetValue("com.docker.compose.project", out string label))
                            continue;

                        bool IsRunning = false;
                        switch (i.State)
                        {
                            case "running":
                            case "restarting":
                                IsRunning = true;
                                break;
                        }
                        var Stack = stacks.FirstOrDefault(x => x.Name == label);
                        if (Stack != null)
                        {
                            Stack.Containers.Add(i.Name);

                            if (IsRunning)
                                Stack.IsRunning = IsRunning;
                        }
                        else
                        {
                            stacks.Add(new DockerStack { Name = label, CreatedAt = DateTime.UtcNow, IsRunning = IsRunning, Containers = new List<string> { i.Name } });
                        }
                    }
                    containers = new DockerResponse<DockerStack[]> { Data = stacks.ToArray() };


                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }

                isLoading = false;


            }

            if (containers != null)
            {
                var query = containers.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                count = query.Count();
                employees = query.Skip(args.Skip.Value).Take(args.Top.Value);
            }
        }
    }

    public async Task SetNameFilter(string text)
    {

        Console.WriteLine("Set Filter: " + text);
        await grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
    }

    void RunSelectedContainersAction(ControlImageType type)
    {
        _ = Task.Run(async () =>
        {
            await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, imageType: type) { ResourceList = selectedEmployees.Select(x => x.Id).ToArray() });
        });
        selectedEmployees.Clear();
    }

    void ShowContextMenuWithManageItems(DockerStack item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Export", Value = "export", Icon = "folder_zip" },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete" },
                                                     }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerStack item)
    {
        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "export":
                    break;
                case "remove":
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

    async Task CreateImage()
    {

    }

    public async Task PruneImages()
    {
        await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.PruneImages));
    }

    public async Task RefreshImages()
    {

    }
}
