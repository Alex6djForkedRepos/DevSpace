@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceWeb.Components.Dialogs.Docker
@using DevSpaceWeb.Models.Docker
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@using System.Text
@inject NotificationService Notifications
@inject DialogService Dialogs
@inject NavigationManager Nav

@if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
{
    <PageTitle>Container Info | @_Data.Config.Instance.Name</PageTitle>
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="ri:box-3-fill"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Text="@ContainerId" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Containers
        </RadzenAlert>
    </div>
}
else if (Container == null)
{
    <PageTitle>Container Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="ri:box-3-fill"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Info</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Text="@ContainerId" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get container info.
            </RadzenAlert>
        }
    </div>
}
else
{
    <PageTitle>@Container.Name.Substring(1) Container | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="ri:box-3-fill"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Container Info</RadzenText>
            @if (IsActionLoading)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Text="@Container.Name.Substring(1)" />
        </RadzenBreadCrumb>
        <br />
        <ActionBar>
            <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Start" Click="@(() => RunSelectedContainersAction(ControlContainerType.Start))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(Container.State.Running || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Outlined" Text="Stop" Click="@(() => RunSelectedContainersAction(ControlContainerType.Stop))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!Container.State.Running || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Outlined" Text="Restart" Click="@(() => RunSelectedContainersAction(ControlContainerType.Restart))" Icon="restart_alt" IconColor="@Colors.WarningDark" Disabled="@(!Container.State.Running || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Outlined" Text="Kill" Click="@(() => RunSelectedContainersAction(ControlContainerType.Kill))" Icon="bolt" IconColor="@Colors.InfoDark" Disabled="@(!Container.State.Running || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Outlined" Text="Pause" Click="@(() => RunSelectedContainersAction(ControlContainerType.Pause))" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(Container.State.Paused || !Container.State.Running || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Outlined" Text="Resume" Click="@(() => RunSelectedContainersAction(ControlContainerType.UnPause))" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!Container.State.Paused || IsActionLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlContainerType.Remove))" Icon="delete" Disabled="@(!CanManageContainer || IsActionLoading)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Filled" Text="Recreate" Icon="autorenew" ButtonStyle="ButtonStyle.Light" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RecreateContainer" Disabled="@(IsActionLoading || Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateContainers))" />
        </ActionBar>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:information"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Info</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                            @Container.Name.Substring(1)
                            <RadzenButton Text="Edit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@UpdateName" Disabled="@(IsActionLoading || !CanManageContainer)" />
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        ID
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Container.ID
                        <CopyClipboard Value="@Container.ID"></CopyClipboard>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Description
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Container.Config.Labels != null && Container.Config.Labels.TryGetValue("org.opencontainers.image.description", out string? desc))
                        {
                            @desc
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                @if (Container.Config.Labels != null && Container.Config.Labels.TryGetValue("url", out string? url))
                {
                    <RadzenTableRow>
                    <RadzenTableCell>
                        Url
                    </RadzenTableCell>
                    <RadzenTableCell>
                            <a href="@url" target="_blank" @onclick="@(() => Session.ConfirmOpenTab(url))" @onclick:preventDefault="true"><RadzenButton Text="Open" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                        </RadzenTableCell>
                    </RadzenTableRow>             
                }

                <RadzenTableRow>
                    <RadzenTableCell>
                        Status
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="6px" Wrap="FlexWrap.Wrap">
                            @switch (Container.State.Status)
                            {
                                case "running":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Running" IsPill="true" />
                                    break;
                                case "created":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Created" IsPill="true" />
                                    break;
                                case "restarting":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Restarting" IsPill="true" />
                                    break;
                                case "removing":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Removing" IsPill="true" />
                                    break;
                                case "paused":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Paused" IsPill="true" />
                                    break;
                                case "exited":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Exited" IsPill="true" />
                                    break;
                                case "dead":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" />
                                    break;
                            }
                            @if (CanViewContainerDetails)
                            {
                                if (Container.HostConfig.OomKillDisable.GetValueOrDefault())
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="OOM Disabled" IsPill="true" />
                                }
                                if (Container.HostConfig.Privileged)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Privileged" IsPill="true" />
                                }
                                if (Container.HostConfig.ReadonlyRootfs)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Read-Only" IsPill="true" />
                                }
                                if (Container.Config.NetworkDisabled)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Network Disabled" IsPill="true" />
                                }
                            }
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Image
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + Container.Image)">@Container.Config.Image</RadzenLink>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Created
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Utils.GetLocalDate(Session, Container.Created)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Restart Mode
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="6px" Wrap="FlexWrap.Wrap">
                            <RadzenDropDown @bind-Value="@SelectedRestartMode" Data="@RestartModes" Disabled="@(IsActionLoading || !CanManageContainer)" Style="width: 100%; max-width: 200px;" />
                            <RadzenButton Text="Update" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@UpdateRestartMode" Disabled="@(IsActionLoading || !CanManageContainer)" />
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Restart Count
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenNumeric Min="0" Max="10" @bind-Value="@RestartCount" Disabled="@(IsActionLoading || !CanManageContainer)" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "enter value" } })" Style="width: 100%; max-width: 200px;" />
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="6px" class="mt-2">
                        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId + "/logs")"><RadzenButton Icon="description" Variant="Variant.Text" Text="Logs" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!CanViewLogs)" /></a>
                        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId + "/stats")"><RadzenButton Icon="bar_chart_4_bars" Variant="Variant.Text" Text="Stats" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!CanViewStats)" /></a>
                        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId + "/changes")"><RadzenButton Icon="topic" Variant="Variant.Text" Text="Changes" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!CanViewChanges)" /></a>
                        @* <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId + "/console")"><RadzenButton Icon="terminal" Variant="Variant.Text" Text="Console" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!CanUseConsole)" /></a> *@
                        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId + "/inspect")"><RadzenButton Icon="info" Variant="Variant.Text" Text="Inspect" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!CanInspect)" /></a>
                    </RadzenStack>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>


    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:heart-pulse"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Health</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Started
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Container.State.StartedAt))
                        {
                            @ParseDate(Container.State.StartedAt)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Stopped
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Container.State.FinishedAt) && Container.State.StartedAt != Container.State.FinishedAt)
                        {
                            @ParseDate(Container.State.FinishedAt)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Error
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Container.GetExitMessage()
                    </RadzenTableCell>
                </RadzenTableRow>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Checks
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Container.State.Health == null || Container.State.Health.Status == "none")
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="6px">
                                @("No health check")
                                <a href="https://docs.fluxpoint.dev/devspace/servers/guides/container-health-check" target="_blank"><RadzenButton Text="Setup" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"></RadzenButton></a>
                            </RadzenStack>
                        }
                        else
                        {
                            @switch (Container.State.Health.Status)
                            {
                                case "healthy":
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Healthy" IsPill="true" />

                                    }
                                    break;
                                case "unhealthy":
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Unhealthy" IsPill="true" />

                                    }
                                    break;
                                case "starting":
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Starting" IsPill="true" />
                                    }
                                    break;
                            }
                        }
                    </RadzenTableCell>
                </RadzenTableRow>
                @if (Container.State.Health != null)
                {
                    <RadzenTableRow>
                        <RadzenTableCell>
                            Failures
                        </RadzenTableCell>
                        <RadzenTableCell>
                            @Container.State.Health.FailingStreak
                        </RadzenTableCell>
                    </RadzenTableRow>

                    <RadzenTableRow>
                        <RadzenTableCell>
                            Log
                        </RadzenTableCell>
                        <RadzenTableCell>
                            @if (!CanViewContainerHealthLogs)
                            {
                                @("You do not have permission for View Container Health Logs")
                            }
                            else if (Container.State.Health.Log != null && Container.State.Health.Log.Any())
                            {
                                <RadzenButton Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Click="@OpenContainerHealthLogs" Style="max-width: 100%; overflow: hidden !important; white-space: nowrap;">@Container.State.Health.Log.Last().Output</RadzenButton>
                            }
                        </RadzenTableCell>
                    </RadzenTableRow>
                }
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:view-list"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Details</RadzenText>
        </div>
        <br />
        <RadzenTabs RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="Info">
                    @if (!CanViewContainerDetails)
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            You do not have permission for View Container Details
                        </RadzenText>
                    }
                    else
                    {
                        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
                            <RadzenTableBody>
                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Command
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @if (Container.Config.Cmd != null)
                                        {
                                            @string.Join(" ", Container.Config.Cmd)
                                        }
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Entrypoint
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @if (Container.Config.Entrypoint != null)
                                        {
                                            @string.Join(" ", Container.Config.Entrypoint)
                                        }
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Working Directory
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @Container.Config.WorkingDir
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Platform
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @Utils.FriendlyName(Container.Platform)
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Network
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + Container.HostConfig.NetworkMode)">@Container.HostConfig.NetworkMode</RadzenLink>
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Internal IP
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @Container.NetworkSettings.IPAddress
                                    </RadzenTableCell>
                                </RadzenTableRow>

                                <RadzenTableRow>
                                    <RadzenTableCell>
                                        Ports
                                    </RadzenTableCell>
                                    <RadzenTableCell>
                                        @if (Container.HostConfig.PortBindings != null)
                                        {
                                            foreach (KeyValuePair<string, IList<PortBinding>> p in Container.HostConfig.PortBindings)
                                            {
                                                foreach (PortBinding i in p.Value)
                                                {
                                                    if (string.IsNullOrEmpty(i.HostIP))
                                                    {
                                                        <RadzenBadge Shade="Shade.Default" BadgeStyle="BadgeStyle.Base" Text="@($"Host 0.0.0.0:{i.HostPort} to {p.Key}")" IsPill="true" />
                                                    }
                                                    else
                                                    {
                                                        <RadzenBadge Shade="Shade.Default" BadgeStyle="BadgeStyle.Base" Text="@($"Host {i.HostIP}:{i.HostPort} to {p.Key}")" IsPill="true" />
                                                    }

                                                }
                                            }
                                        }
                                    </RadzenTableCell>
                                </RadzenTableRow>

                            </RadzenTableBody>
                        </RadzenTable>
                        @if (Container.HostConfig.PortBindings != null && Container.HostConfig.PortBindings.Any(x => x.Value.Any(x => string.IsNullOrEmpty(x.HostIP) || x.HostIP == "0.0.0.0")))
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" Size="AlertSize.Small" AllowClose="false" Style="width: 100%;">
                                Some ports are publicly open to the internet and will not be protected by the host firewall settings.
                            </RadzenAlert>
                        }
                    }
                </RadzenTabsItem>

                <RadzenTabsItem Text="Labels">
                    @if (!CanViewContainerDetails)
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            You do not have permission for View Container Details
                        </RadzenText>
                    }
                    else if (Container.Config.Labels != null)
                    {
                        <div class="dash-box-content">
                            @foreach (KeyValuePair<string, string> i in Container.Config.Labels)
                            {
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @i.Value
                                </RadzenText>
                                <br />
                            }
                        </div>
                    }
                </RadzenTabsItem>
                 
                <RadzenTabsItem Text="Environment">
                    @if (!CanViewContainerEnvironment)
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            You do not have permission for View Container Environment
                        </RadzenText>
                    }
                    else if (ShowEnvironment)
                    {
                        <div class="dash-box-content">

                            @foreach (KeyValuePair<string, string> i in Container.Config.Env.ParseEnvironment())
                            {
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @i.Value
                                </RadzenText>
                                <br />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="dash-box-content">
                            <RadzenText TextStyle="TextStyle.Body2">Environment is hidden by default</RadzenText>
                            <RadzenButton Text="Show Environment" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@(() => ShowEnvironment = true)" />
                        </div>
                    }
                </RadzenTabsItem>

                <RadzenTabsItem Text="Security">
                    <RadzenRow Gap="10px">
                        <RadzenColumn SizeMD="6" SizeSM="12">
                            <div class="security-bar mt-2">
                                @if (SecurityResults == null)
                                {
                                    <div><iconify-icon icon="mdi:security"></iconify-icon></div>
                                }
                                else if (SecurityHasIssues)
                                {
                                    <div class="security-bar-bad"><iconify-icon icon="mdi:security"></iconify-icon></div>
                                }
                                else
                                {
                                    <div class="security-bar-ok"><iconify-icon icon="mdi:security"></iconify-icon></div>
                                }
                                <div>
                                    <h6>Security Report</h6>
                                    @if (SecurityScanRunning)
                                    {
                                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                                    }
                                    else if (SecurityResults == null)
                                    {
                                        <RadzenText TextStyle="TextStyle.Body1">
                                            Run a scan on this container.
                                        </RadzenText>
                                    }
                                    else if (SecurityHasIssues)
                                    {
                                        <RadzenText TextStyle="TextStyle.Body1">
                                            Found some issues!
                                        </RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText TextStyle="TextStyle.Body1">
                                            No issues found
                                        </RadzenText>
                                    }
                                </div>
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Disabled="@(!CanManageContainer || SecurityScanRunning || SecurityResults != null)" Click="@RunSecurityScan">Scan</RadzenButton>
                            </div>
                            <div class="security-notice mt-2">
                                <RadzenText TextStyle="TextStyle.Body2">
                                    This tool uses <a href="https://trivy.dev" target="_blank">Trivy</a> an open source scanner, it will download a database of known vulnerabilities, configuration issues and bad packages/libraries that should be updated.
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    Click Scan to run on all your mounted and binded volumes for this container.
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    Click a file to see a list of vulnerabilities with that associated file or package list.
                                </RadzenText>
                            </div>
                        </RadzenColumn>
                        <RadzenColumn SizeMD="6" SizeSM="12">
                            @if (!CanManageContainer)
                            {
                                <RadzenText TextStyle="TextStyle.Body2">
                                    You do not have permission for Manage Containers
                                </RadzenText>
                            }
                            @if (SecurityHasIssues && SecurityCounts.Any())
                            {
                                <RadzenStack Style="width: 100%; max-width: 200px; max-height: 200px;" class="ml-4">
                                    <RadzenChart>
                                        <RadzenPieSeries Data="@SecurityCounts" CategoryProperty="Severity" ValueProperty="Count" TItem="SecurityResultsCount">
                                            <RadzenSeriesDataLabels Visible="true" />
                                        </RadzenPieSeries>
                                    </RadzenChart>
                                </RadzenStack>
                            }
                        </RadzenColumn>
                    </RadzenRow>
                    @if (SecurityHasIssues)
                    {
                        <RadzenRow class="security-details">
                            <RadzenColumn SizeMD="6" SizeSM="12">
                                <RadzenText TextStyle="TextStyle.Subtitle1" class="ml-2">
                                    Files
                                </RadzenText>
                                <RadzenDataGrid AllowFiltering="false" Density="Density.Compact" AllowPaging="true"
                                PageSize="10" AllowSorting="false" Data="@SecurityResults" @bind-Value="@SelectedOrders"
                                TItem="SecurityResult" EmptyText="No results.">
                                    <Columns>
                                        <RadzenDataGridColumn Title="Severity" Width="70px">
                                            <Template>
                                                @context.CurrentSeverity
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Title="Type" Width="100px">
                                            <Template>
                                                @context.Type
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Title="Target">
                                            <Template>
                                                @context.Target
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeSM="12">
                                <RadzenText TextStyle="TextStyle.Subtitle1" class="ml-2">
                                    Vulnerabilities
                                </RadzenText>
                                <RadzenDataGrid AllowFiltering="false" Density="Density.Compact" AllowPaging="true" PageSize="10"
                                AllowSorting="false" Data="@Vulnerabilities" EmptyText="No results.">
                                    <Template>
                                        <div class="security-vulnerability">
                                            @if (context.DataSource != null)
                                            {
                                                <a href="@context.DataSource.GetUrl(context)" target="_blank"><RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark">Source</RadzenButton></a>
                                            }
                                            <RadzenText TextStyle="TextStyle.Subtitle2" class="ml-2">
                                                @context.VulnerabilityID
                                            </RadzenText>
                                            @if (context.DataSource != null)
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" class="ml-2" Style="color: var(--rz-text-tertiary-color);">
                                                    @context.DataSource.Name
                                                </RadzenText>
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" class="ml-2" Style="color: var(--rz-text-tertiary-color);">
                                                    No Source
                                                </RadzenText>
                                            }

                                            <RadzenText TextStyle="TextStyle.Body2">
                                                @context.Description
                                            </RadzenText>
                                            <RadzenStack Orientation="Orientation.Horizontal">
                                                @if (context.Status == "fixed")
                                                {
                                                    <RadzenText TextStyle="TextStyle.Body2">
                                                        @context.Status in @context.FixedVersion
                                                    </RadzenText>
                                                }
                                                else
                                                {
                                                    <RadzenText TextStyle="TextStyle.Body2">
                                                        @context.Status
                                                    </RadzenText>
                                                }

                                                @if (context.PublishedDate.HasValue)
                                                {
                                                    <RadzenText TextStyle="TextStyle.Body2">
                                                        @Utils.GetLocalDate(Session, context.PublishedDate.Value)
                                                    </RadzenText>
                                                }
                                            </RadzenStack>
                                        </div>
                                    </Template>
                                    <Columns>
                                        <RadzenDataGridColumn Title="Severity" Width="70px">
                                            <Template>
                                                @context.Severity
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Title="Name">
                                            <Template>
                                                @context.PkgName
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Title="Version" Width="70px">
                                            <Template>
                                                @context.InstalledVersion
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Title="Info">
                                            <Template>
                                                @context.Title
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:storage"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Volumes</RadzenText>
        </div>
        <br />
        @if (!CanViewContainerVolumes)
        {
            <RadzenText TextStyle="TextStyle.Body2">
                You do not have permission for View Container Volumes
            </RadzenText>
        }
        else
        {
            <RadzenDataGrid AllowRowSelectOnRowClick="false" Data="@Container.Mounts" AllowPaging="true" PageSize="15"
                            PagerHorizontalAlign="HorizontalAlign.Center" GridLines="DataGridGridLines.Horizontal"
                            AllowSorting="false" EmptyText="No volumes."
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
                <Columns>
                    <RadzenDataGridColumn Title="Type" Width="100px">
                        <Template>
                            @switch (context.Type)
                            {
                                case "bind":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 6px;">
                                            <RadzenIcon Icon="directory_sync" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Bind
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "volume":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 6px;">
                                            <RadzenIcon Icon="folder" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Volume
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "tmpfs":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 6px;">
                                            <RadzenIcon Icon="folder_delete" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Temp
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "npipe":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 6px;">
                                            <RadzenIcon Icon="settings" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Named Pipe
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "cluster":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 6px;">
                                            <RadzenIcon Icon="cloud" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Cluster
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                            }

                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="120px">
                        <Template>
                            @if (context.RW)
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read & Write" IsPill="true" />
                            }
                            else
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read-Only" IsPill="true" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Source" Width="300px">
                        <Template>
                            @if (context.Type == "volume")
                            {
                                @if (Container.Name == "/registry")
                                {
                                    <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">docker_registry</RadzenLink>
                                }
                                else
                                {
                                    <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">@context.Name</RadzenLink>
                                }
                            }
                            else
                            {
                                @context.Source
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="" Width="60px">
                        <Template>
                            <CopyClipboard Value="@(context.Type == "volume" ? context.Name : context.Source)"></CopyClipboard>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Destination">
                        <Template>
                            @context.Destination
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:local-area-network"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Networks</RadzenText>
            <RadzenButton class="ml-2" Variant="Variant.Filled" Text="Join Network" Icon="add" Click="@JoinNetwork" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(IsActionLoading || (Container.NetworkSettings.Networks.Any() && Container.NetworkSettings.Networks.First().Key == "host") || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks) || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainerNetworks))" />
        </div>
        <br />
        @if (!CanViewContainerNetworks)
        {
            <RadzenText TextStyle="TextStyle.Body2">
                You do not have permission for View Container Networks
            </RadzenText>
        }
        else
        {
            <RadzenDataGrid AllowRowSelectOnRowClick="false" Data="@Container.NetworkSettings.Networks"
                            PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                            AllowSorting="false" EmptyText="No networks."
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
                <Columns>
                    <RadzenDataGridColumn Title="Name" Width="240px" Frozen="true" Filterable="false">
                        <Template>
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + (string.IsNullOrEmpty(context.Value.NetworkID) ? context.Key : context.Value.NetworkID))">@context.Key</RadzenLink>
                            @if (DockerExtensions.IsNetworkSystem(context.Key))
                            {
                                <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="System" class="ml-2" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="IP Address" Width="@GridWidth.IP">
                        <Template>
                            @context.Value.IPAddress
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Gateway" Width="100px">
                        <Template>
                            @context.Value.Gateway
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="MAC Address" Width="160px">
                        <Template>
                            @context.Value.MacAddress
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Action">
                        <Template>
                            <RadzenButton Click="@(() => LeaveNetwork(string.IsNullOrEmpty(context.Value.NetworkID) ? context.Key : context.Value.NetworkID))" Text="Leave Network" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Disabled="@(context.Key == "host" || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainerNetworks) || IsActionLoading)" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </div>
}

<style>
    .rz-series-item-0 {
        fill: #e94861 !important;
    }

    .rz-series-item-1 {
        fill: var(--rz-series-3) !important;
    }

    .rz-series-item-2 {
        fill: var(--rz-series-5) !important;
    }

    .rz-series-item-3 {
        fill: var(--rz-series-8) !important;
    }

    .rz-state-highlight {
        background-color: var(--rz-grid-selected-background-color) !important;
    }

    .security-bar iconify-icon {
        font-size: 30px;
        display: inline-block;
        margin-top: -30px;
        margin-right: 6px;
        margin-bottom: 6px;
    }

    .security-bar div {
        display: inline-block;
    }

    .security-bar .rz-button {
        float: right;
        margin-top: 8px;
        margin-right: 10px;
    }

    .security-notice {
        background-color: rgba(43,44,54,0.8);
        width: 100% !important;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .security-vulnerability {
        padding: 6px;
        padding-left: 10px;
        padding-right: 10px;
        background-color: rgba(52,53,63,0.8) !important;
        text-wrap: wrap;
    }

        .security-vulnerability > .rz-text-body2 {
            margin-left: 6px;
            margin-right: 100px;
        }

        .security-vulnerability div .rz-text-body2 {
            font-weight: 600;
            color: var(--rz-text-tertiary-color);
            margin-left: 10px;
        }

            .security-vulnerability div .rz-text-body2:first-child {
                color: var(--rz-info) !important;
            }

        .security-vulnerability .rz-button {
            float: right;
            margin-top: 6px;
            margin-right: 6px;
        }

    .rz-expanded-row-content td {
        padding: 4px !important;
        padding-top: 0px !important;
    }

    .rz-progressbar {
        width: 100%;
    }

    .security-bar-bad iconify-icon {
        color: var(--rz-warning-dark) !important;
    }

    .security-bar-ok iconify-icon {
        color: var(--rz-success) !important;
    }

    .rz-legend {
        margin-right: -30px !important;
    }

</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public string? ContainerId { get; set; }

    public ContainerInspectResponse? Container { get; set; }
    public bool Failed { get; set; }

    public bool IsActionLoading { get; set; }

    public bool ShowEnvironment { get; set; }

    public string ParseDate(string timestamp)
    {
        if (string.IsNullOrEmpty(timestamp))
            return timestamp;

        if (DateTime.TryParse(timestamp, out DateTime date))
            return Utils.GetLocalDate(Session, date, showTime: true);

        return timestamp;
    }

    public string SelectedRestartMode { get; set; } = "None";

    public long RestartCount { get; set; } = 0;

    string[] RestartModes = new string[]
    {
        "None",
        "On Failure",
        "Always",
        "Unless Stopped"
    };

    public async Task UpdateName()
    {
        if (Member == null || Server == null || Container == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
            return;

        await Dialogs.ShowDynamicFormAsync<ContainerRenameModel>("Rename Container", new ContainerRenameModel { Name = Container.Name.Substring(1) }, async (ContainerRenameModel data) =>
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return "You do not have permission for Manage Containers";

            SocketResponse<object?> Result = await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Rename)
            {
                Data = AgentJsonOptions.FromObject(new CreateContainerEvent
                {
                    Name = data.Name
                })
            });
            if (!Result.IsSuccess)
                return "Failed to rename container";

            Container.Name = "/" + data.Name;

            return null;
        });
    }

    public async Task UpdateRestartMode()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
            return;

        RestartPolicyKind Type = RestartPolicyKind.No;
        switch (SelectedRestartMode)
        {
            case "On Failure":
                Type = RestartPolicyKind.OnFailure;
                break;
            case "Always":
                Type = RestartPolicyKind.Always;
                break;
            case "Unless Stopped":
                Type = RestartPolicyKind.UnlessStopped;
                break;
        }
        IsActionLoading = true;
        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Update)
        {
            Data = AgentJsonOptions.FromObject(new ContainerUpdateParameters
            {
                RestartPolicy = new RestartPolicy
                {
                    Name = Type,
                    MaximumRetryCount = RestartCount
                }
            })
        });
        IsActionLoading = false;
    }

    public bool CanManageContainer;
    public bool CanControlContainer;
    public bool CanViewLogs;
    public bool CanInspect;
    public bool CanViewStats;
    public bool CanViewChanges;
    public bool CanUseConsole;
    public bool CanViewContainerDetails;
    public bool CanViewContainerEnvironment;
    public bool CanViewContainerVolumes;
    public bool CanViewContainerNetworks;
    public bool CanViewContainerHealthLogs;

    protected override void OnAfterRender(bool firstRender)
    {
        LoadPerms();
    }

    public void LoadPerms()
    {
        if (Member == null)
            return;

        CanManageContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers);
        CanControlContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers);
        CanViewLogs = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs);
        CanInspect = Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator);
        CanViewStats = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats);
        CanViewChanges = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges);
        CanUseConsole = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.UseContainerConsole);
        CanViewContainerDetails = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerDetails);
        CanViewContainerEnvironment = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerEnvironment);
        CanViewContainerVolumes = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerVolumes);
        CanViewContainerNetworks = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerNetworks);
        CanViewContainerHealthLogs = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerHealthLogs);
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadPerms();
        if (Member == null || Server == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
            return;

        if (Program.IsPreviewMode && ContainerId != "devspace-demo")
        {
            Failed = true;
            return;
        }

        try
        {
            SocketResponse<ContainerInspectResponse?> Result = await Server.RunJsonAsync<ContainerInspectResponse, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Inspect));
            Failed = !Result.IsSuccess;
            Container = Result.Data;

            if (Container != null && Program.IsPreviewMode && ContainerId == "devspace-demo")
            {
                Container.HostConfig.NetworkMode = "devspace_demo_network";
                Container.NetworkSettings.Networks = new Dictionary<string, Docker.DotNet.Models.EndpointSettings>
                {
                    { "devspace_demo_network", new Docker.DotNet.Models.EndpointSettings
                    {
                        NetworkID = "d38254f7c4f952d6cc32c059e3aaf5993c304163880d179c14de81e60eecbb0c",
                        IPAddress = "172.21.0.2/16",
                        MacAddress = "02:42:ac:15:00:02"
                    }}
                };
            }

            if (Result.IsSuccess && Container != null)
            {
                RestartCount = Container.HostConfig.RestartPolicy.MaximumRetryCount;
                switch (Container.HostConfig.RestartPolicy.Name)
                {
                    case RestartPolicyKind.Always:
                        SelectedRestartMode = "Always";
                        break;
                    case RestartPolicyKind.OnFailure:
                        SelectedRestartMode = "On Failure";
                        break;
                    case RestartPolicyKind.UnlessStopped:
                        SelectedRestartMode = "Unless Stopped";
                        break;
                }
            }
            if (IsActionLoading)
            {
                IsActionLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    async Task RunSelectedContainersAction(ControlContainerType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        LoadPerms();

        if (type == ControlContainerType.Remove || type == ControlContainerType.ForceRemove)
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return;

            bool Confirm = await Dialogs.ShowConfirmAsync("Remove Container: " + Container?.Name, Container!.State.Running ?
            "This container is still running, are you sure you want to remove it?." :
            "Are you sure you want to remove this container?", "Confirm", ButtonStyle.Success);

            type = ControlContainerType.ForceRemove;

            if (!Confirm)
                return;

            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return;
        }
        else
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                return;
        }

        IsActionLoading = true;
        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, type), async (res) =>
        {

        });
        await Task.Delay(new TimeSpan(0, 0, 1));
        await InvokeAsync(OnParametersSetAsync);
    }

    public class SecurityResultsCount
    {
        public string Severity { get; set; }
        public ulong Count { get; set; }
    }

    SecurityResultsCount[] SecurityCounts = new SecurityResultsCount[] {
        // new SecurityResultsCount
        // {
        //     Severity = "Critical",
        //     Count = 0
        // },
        // new SecurityResultsCount
        // {
        //     Severity = "High",
        //     Count = 2
        // },
        // new SecurityResultsCount
        // {
        //     Severity = "Medium",
        //     Count = 0
        // },
        // new SecurityResultsCount
        // {
        //     Severity = "Low",
        //     Count = 5
        // },
    };

    public async Task RunSecurityScan()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
            return;

        SecurityScanRunning = true;
        try
        {
            SocketResponse<CreateContainerResponse?> Result = await Server.RunJsonAsync<CreateContainerResponse, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Scan));
            if (Result.IsSuccess && Result.Data != null)
            {
                await Task.Delay(new TimeSpan(0, 0, 15));
                SocketResponse<SecurityData?> ScanResult = await Server.RunJsonAsync<SecurityData, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.ScanReport)
                {
                    Data = AgentJsonOptions.FromObject(new CreateContainerResponse
                    {
                        ID = Result.Data.ID
                    })
                });

                if (ScanResult.Data != null && ScanResult.Data.IsComplete.HasValue && !ScanResult.Data.IsComplete.Value)
                {
                    await Task.Delay(new TimeSpan(0, 0, 15));
                    ScanResult = await Server.RunJsonAsync<SecurityData, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.ScanReport)
                    {
                        Data = AgentJsonOptions.FromObject(new CreateContainerResponse
                        {
                            ID = Result.Data.ID
                        })
                    });
                }

                if (ScanResult.Data != null && ScanResult.Data.IsComplete.HasValue && !ScanResult.Data.IsComplete.Value)
                {
                    await Task.Delay(new TimeSpan(0, 0, 30));
                    ScanResult = await Server.RunJsonAsync<SecurityData, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.ScanReport)
                    {
                        Data = AgentJsonOptions.FromObject(new CreateContainerResponse
                        {
                            ID = Result.Data.ID
                        })
                    });
                }

                if (ScanResult.IsSuccess && ScanResult.Data != null && ScanResult.Data.IsComplete.HasValue && ScanResult.Data.IsComplete == true)
                {
                    string[] lines = ScanResult.Data.Logs.SplitNewlines(trim: false);
                    if (lines.Any())
                    {
                        StringBuilder builder = new StringBuilder();
                        foreach (string i in lines)
                        {
                            if (builder.Length != 0 || i.StartsWith("{"))
                                builder.Append(i);
                        }

                        if (builder.Length != 0)
                        {
                            SecurityReport? Report = Newtonsoft.Json.JsonConvert.DeserializeObject<SecurityReport>(builder.ToString());
                            if (Report != null)
                            {
                                if (Report.Results == null)
                                {
                                    SecurityResults = new SecurityResult[0];
                                    SecurityHasIssues = false;
                                }
                                else
                                {
                                    SecurityResults = Report.Results.Where(x => x.Vulnerabilities != null && x.Vulnerabilities.Any()).ToArray();
                                    SecurityCounts = new SecurityResultsCount[]
                                        {
                                        new SecurityResultsCount
                                        {
                                            Severity = "Critical",
                                            Count = 0
                                        },
                                        new SecurityResultsCount
                                        {
                                            Severity = "High",
                                            Count = 0
                                        },
                                        new SecurityResultsCount
                                        {
                                            Severity = "Medium",
                                            Count = 0
                                        },
                                        new SecurityResultsCount
                                        {
                                            Severity = "Low",
                                            Count = 0
                                        },
                                        };
                                    if (SecurityResults.Any())
                                    {
                                        SecurityHasIssues = true;
                                        foreach (SecurityResult i in SecurityResults)
                                        {
                                            if (i.Vulnerabilities == null)
                                                continue;

                                            foreach (SecurityVulnerability v in i.Vulnerabilities)
                                            {
                                                if (string.IsNullOrEmpty(i.CurrentSeverity))
                                                    i.CurrentSeverity = v.Severity;
                                                else
                                                {
                                                    switch (i.CurrentSeverity)
                                                    {
                                                        case "LOW":
                                                            {
                                                                if (v.Severity != "LOW")
                                                                    i.CurrentSeverity = v.Severity;
                                                            }
                                                            break;
                                                        case "MEDIUM":
                                                            {
                                                                if (v.Severity == "HIGH" || v.Severity == "CRITICAL")
                                                                    i.CurrentSeverity = v.Severity;
                                                            }
                                                            break;
                                                        case "HIGH":
                                                            {
                                                                if (v.Severity == "CRITICAL")
                                                                    i.CurrentSeverity = v.Severity;
                                                            }
                                                            break;
                                                    }
                                                }

                                                switch (v.Severity)
                                                {
                                                    case "LOW":
                                                        {
                                                            SecurityCounts[3].Count += 1;
                                                        }
                                                        break;
                                                    case "MEDIUM":
                                                        {
                                                            SecurityCounts[2].Count += 1;
                                                        }
                                                        break;
                                                    case "HIGH":
                                                        {
                                                            SecurityCounts[1].Count += 1;
                                                        }
                                                        break;
                                                    case "CRITICAL":
                                                        {
                                                            SecurityCounts[0].Count += 1;
                                                        }
                                                        break;
                                                }
                                            }
                                        }

                                    }
                                    else
                                    {
                                        SecurityHasIssues = false;
                                    }
                                }
                            }
                        }

                    }
                }

            }
        }
        catch
        {

        }
        SecurityScanRunning = false;
        //SecurityReport
    }

    private IList<SecurityResult> _selected;
    IList<SecurityResult> SelectedOrders { get { return _selected; } set { if (value.Any()) { _selected = value; Vulnerabilities = _selected.First().Vulnerabilities!; } else { _selected = null; Vulnerabilities = new SecurityVulnerability[0]; } } }

    SecurityVulnerability[] Vulnerabilities { get; set; } = new SecurityVulnerability[0];

    public bool SecurityScanRunning { get; set; }
    SecurityResult[]? SecurityResults { get; set; }
    public bool SecurityHasIssues { get; set; }

    public async Task OpenContainerHealthLogs()
    {
        if (Member == null || Server == null || Container == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerHealthLogs))
            return;

        await Dialogs.OpenAsync<ContainerHealthLogsDialog>("Container Health Logs", new Dictionary<string, object>()
        {
            { "Json", Container.State.Health.Log.Last().Output },
            { "ContainerName", Container.Name.Substring(1) }
        }, new DialogOptions());
    }

    public async Task RecreateContainer()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateContainers))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Recreate Container", "You are about to recreate this container, volumes and networks which will reset any changes and files that are not using volumes.", "Confirm", ButtonStyle.Success);
        
        if (!Confirm)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateContainers))
            return;

        SocketResponse<CreateContainerResponse?> Result = await Server.RunJsonAsync<CreateContainerResponse, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Recreate));
        if (Result.IsSuccess && Result.Data != null)
        {
            Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + Result.Data.ID);
        }
    }

    public async Task JoinNetwork()
    {
        if (Member == null || Server == null || Container == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
        {
            await Dialogs.ShowPermissionErrorAsync(DockerPermission.ViewNetworks);
            return;
        }

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainerNetworks))
        {
            await Dialogs.ShowPermissionErrorAsync(DockerContainerPermission.ManageContainerNetworks);
            return;
        }

        dynamic Result = await Dialogs.OpenAsync<ContainerJoinNetworkDialog>("Container Join Network", new Dictionary<string, object>()
        {
            { "ContainerId", Container.ID }
        }, new DialogOptions());

        if (Result != null && (bool)Result)
        {
            await Task.Delay(new TimeSpan(0, 0, 1));
            await InvokeAsync(OnParametersSetAsync);
        }
    }

    public async Task LeaveNetwork(string networkId)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        IsActionLoading = true;
        await Server.RunJsonAsync<DockerNetworkInfo, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, networkId, networkType: ControlNetworkType.LeaveNetwork)
        {
            Data = AgentJsonOptions.FromObject(new DockerContainerInfo
            {
                Id = ContainerId
            })
        }, (response) =>
        {

        });
        await Task.Delay(new TimeSpan(0, 0, 1));
        await InvokeAsync(OnParametersSetAsync);
    }
}
