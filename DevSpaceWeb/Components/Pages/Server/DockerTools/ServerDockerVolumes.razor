@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialog
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NotificationService Notifications
@inject NavigationManager Nav

<PageTitle>Docker Volumes | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:storage"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Volumes</RadzenText>
        @if ((IsLoading || IsActionRunning) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Volumes
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <RadzenButton Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedVolumeAction(ControlVolumeType.Remove))" Icon="delete" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: var(--rz-button-border-radius) !important; margin-right: 4px !important;" />

            <RadzenButton Variant="Variant.Filled" Text="Create Volume" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateVolume" Disabled="@(!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))" />
            <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshVolume" Disabled="@IsLoading" />
        </div>
    <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@VolumesList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                    @bind-Value="@SelectedVolumes" SelectionMode="DataGridSelectionMode.Multiple" ShowPagingSummary="true"
                    PagingSummaryFormat="@(Count + " volume" + (Count != 1 ? "s" : "") )" Density="Density.Compact"
                    AllowSorting="false" AllowFiltering="false"
                    TItem="DockerVolumeInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
        <Columns>
            <RadzenDataGridColumn Width="36px" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                    Value="@(SelectedVolumes == null || SelectedVolumes?.Any() != true ? false : !VolumesList.All(i => SelectedVolumes.Contains(i)) ? null : VolumesList.Any(i => SelectedVolumes.Contains(i)))"
                                        Change="@(args => SelectedVolumes = args == true ? (SelectedVolumes != null && SelectedVolumes.Any()) ? null : VolumesList.ToList() : null)" Disabled="@IsActionRunning" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedVolumes != null && SelectedVolumes.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsActionRunning" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true">
                <Template>
                    @if (context.Containers != null && context.Containers.Any() && context.Containers.First().Value == "registry")
                    {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">docker_registry</RadzenLink>
                    }
                    else
                    {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">@context.Name</RadzenLink>
                    }
                        
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="140px">
                <Template>
                    @if (context.ContainersCount == 0)
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unused" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="@(context.ContainersCount + " Container" +  (context.ContainersCount != 1 ? "s" : ""))" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="70px">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenButton Click=@(args => ShowContextMenuWithManageItems(context, args)) Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Driver" Width="80px">
                <Template>
                    @context.Driver
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Scope" Width="80px">
                <Template>
                    @context.Scope
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Width="160px">
                <Template>
                    @context.CreatedAt
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Mount Point">
                <Template>
                    @context.MountPoint
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
</div>

<style>
    .dash-box-content .rz-button:not(.rz-button.rz-info):not(.rz-button.rz-success):not(.rz-button.rz-warning) {
        border-radius: 0px !important;
        margin-right: -4px !important;
        box-shadow: inset 0 0 0 var(--rz-border-width) rgb(150,150,150) !important;
    }

    .dash-box-content .rz-button-sm .rzi {
        font-size: 1.15rem !important;
        width: 1.15rem !important;
        height: 1.15rem !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<DockerVolumeInfo[]?>? VolumesResponse = null;

    IQueryable<DockerVolumeInfo>? VolumesList;
    public int Count = 0;
    IList<DockerVolumeInfo>? SelectedVolumes;
    public bool AnySelected => SelectedVolumes != null ? SelectedVolumes.Any() : false;
    RadzenDataGrid<DockerVolumeInfo> Grid = null!;
    public bool IsLoading = true;
    public bool IsActionRunning { get; set; }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
            return;

        if (Program.IsPreviewMode)
        {
            VolumesList = new List<DockerVolumeInfo>
            {
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (VolumesResponse == null)
            {
                IsLoading = true;
                try
                {
                    VolumesResponse = await Server.RecieveJsonAsync<DockerVolumeInfo[]>(new DockerEvent(DockerEventType.ListVolumes));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;


            }

            if (VolumesResponse != null && VolumesResponse.IsSuccess && VolumesResponse.Data != null)
            {
                IQueryable<DockerVolumeInfo> query = VolumesResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                VolumesList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    public async Task SetNameFilter(string text)
    {
        await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
    }



    void RunSelectedVolumeAction(ControlVolumeType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedVolumes == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        _ = Task.Run(async () =>
        {
            IsActionRunning = true;
            await InvokeAsync(StateHasChanged);

            foreach(DockerVolumeInfo i in SelectedVolumes)
            {
                await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlVolume, i.Name, volumeType: type));
            }
            IsActionRunning = false;
            SelectedVolumes.Clear();
            await InvokeAsync(RefreshVolume);
        });

    }

    void ShowContextMenuWithManageItems(DockerVolumeInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "database", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.ContainersCount != 0 || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes) },
                new ContextMenuItem() { Text = "Force Remove", Value = "force_remove", Icon = "delete_forever", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes) }
                                                         }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerVolumeInfo item)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + item.Name);
                    break;
                case "remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        IsActionRunning = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlVolume, item.Name, volumeType: ControlVolumeType.Remove), (response) =>
                        {

                        });
                        IsActionRunning = false;
                        await InvokeAsync(RefreshVolume);
                    }
                    break;
                case "force_remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        bool Confirm = await Dialog.ShowConfirmAsync("Force Remove Volume", "This will stop any running containers using this volume.", "Confirm", ButtonStyle.Success);
                        if (Confirm)
                        {
                            if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                                return;

                            IsActionRunning = true;
                            await InvokeAsync(StateHasChanged);
                            await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlVolume, volumeType: ControlVolumeType.ForceRemove) { ResourceList = new string[] { item.Name } }, (response) =>
                            {
                                InvokeAsync(RefreshVolume);
                            });
                            IsActionRunning = false;
                            await InvokeAsync(RefreshVolume);
                        }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

    async Task CreateVolume()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        await Dialog.OpenAsync<CreateVolumeDialog>("Create Docker Volume");
    }

    public async Task RefreshVolume()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        VolumesResponse = null;
        await Grid.RefreshDataAsync();
    }
}
