@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NotificationService Notifications
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>Docker Volumes | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:storage"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Volumes</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Volumes" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Volumes
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Create Volume" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateVolume" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))" />
                <RadzenButton Variant="Variant.Filled" Text="Prune Volumes" Icon="delete" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" Click="@PruneVolumes" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))" />
            </ActionBar>
            <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedVolumesAction(ControlVolumeType.Remove))" Icon="delete" Disabled="@(IsLoading || !AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshVolume" Disabled="@(IsLoading)" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search volumes" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
            </div>
        </div>
    <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@VolumesList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                    @bind-Value="@SelectedVolumes" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagingSummaryFormat="@(Count + " volume" + (Count != 1 ? "s" : "") )" Density="Density.Compact" EmptyText="No volumes."
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    TItem="DockerVolumeInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
        <Columns>
            <RadzenDataGridColumn Width="36px" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                    Value="@(SelectedVolumes == null || SelectedVolumes?.Any() != true ? false : !VolumesList.All(i => SelectedVolumes.Contains(i)) ? null : VolumesList.Any(i => SelectedVolumes.Contains(i)))"
                                        Change="@(args => SelectedVolumes = args == true ? (SelectedVolumes != null && SelectedVolumes.Any()) ? null : VolumesList.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedVolumes != null && SelectedVolumes.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(DockerVolumeInfo.Name)">
                <Template>
                    @if (context.Containers != null && context.Containers.Any() && context.Containers.First().Value == "registry")
                    {
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">docker_registry</RadzenLink>
                    }
                    else
                    {
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + context.Name)">@context.Name</RadzenLink>
                    }
                        
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="120px" Filterable="false">
                <Template>
                    @if (context.ContainersCount == 0)
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unused" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="@(context.ContainersCount + " Container" +  (context.ContainersCount != 1 ? "s" : ""))" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="70px" Filterable="false">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading)" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Stack" Width="200px" Property="@nameof(DockerVolumeInfo.Stack)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @if (!string.IsNullOrEmpty(context.Stack))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.Stack)" Text="@context.Stack" />
                        }
                    </Template>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Driver" Width="80px" Property="@nameof(DockerVolumeInfo.Driver)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.Driver
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Scope" Width="80px" Property="@nameof(DockerVolumeInfo.Scope)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.Scope
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Width="160px" Filterable="false">
                <Template>
                    @context.CreatedAt
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Mount Point" Filterable="false">
                <Template>
                    @context.MountPoint
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<DockerVolumeInfo[]?>? VolumesResponse = null;

    IQueryable<DockerVolumeInfo>? VolumesList;
    public int Count = 0;
    IList<DockerVolumeInfo>? SelectedVolumes;
    public bool AnySelected => SelectedVolumes != null ? SelectedVolumes.Any() : false;
    RadzenDataGrid<DockerVolumeInfo> Grid = null!;
    public bool IsLoading = true;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
            return;

        if (Program.IsPreviewMode)
        {
            VolumesList = new List<DockerVolumeInfo>
            {
                new DockerVolumeInfo
                {
                    Name = "3d725f9fc66894e63b81e8a2843f1cab06283d78ca0b92246240b291e7184258",
                    Containers = new Dictionary<string, string>
                    {
                        { "registry", "registry" }
                    },
                    ContainersCount = 1,
                    Driver = "local",
                    Scope = "local",
                    CreatedAt = "07/13/2023 09:05:38",
                    MountPoint = "/var/lib/docker/volumes/3d725f9fc66894e63b81e8a2843f1cab06283d78ca0b92246240b291e7184258/_data",
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (VolumesResponse == null)
            {
                IsLoading = true;
                try
                {
                    VolumesResponse = await Server.RunJsonAsync<DockerVolumeInfo[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListVolumes));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;

                // int Count = 0;
                // while(Count != 5000)
                // {
                //     Console.WriteLine("Create Volume: " + Count);
                //     try
                //     {
                //     await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.CreateVolume)
                //     {
                //         Data = JObject.FromObject(new VolumesCreateParameters
                //         {
                //             Name = "test-" + Guid.NewGuid().ToString(),
                //             Driver = "local",
                //             DriverOpts = new Dictionary<string, string>(),
                //             Labels = new Dictionary<string, string>()
                //         })
                //     });
                //     }
                //     catch { }
                //     Count += 1;
                // }
                // Console.WriteLine("STOP");
            }

            if (VolumesResponse != null && VolumesResponse.IsSuccess && VolumesResponse.Data != null)
            {
                IQueryable<DockerVolumeInfo> query = VolumesResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                VolumesList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    async Task RunSelectedVolumesAction(ControlVolumeType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedVolumes == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        if (SelectedVolumes.Any(x => x.ContainersCount != 0))
        {
            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedVolumes.Count} volume" + (SelectedVolumes.Count != 1 ? "s" : ""),
                $"Some volumes are being used by containers, are you sure you want to remove {(SelectedVolumes.Count == 1 ? "this volume" : "these volumes")}: " + string.Join(", ", SelectedVolumes.Select(x => x.Name)), "Confirm", ButtonStyle.Success);

            if (!Confirm)
                return;

            type = ControlVolumeType.ForceRemove;
        }
        else
        {
            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedVolumes.Count} volume" + (SelectedVolumes.Count != 1 ? "s" : ""),
                $"These volumes are unused, are you sure you want to remove {(SelectedVolumes.Count == 1 ? "this volume" : "these volumes")}: " + string.Join(", ", SelectedVolumes.Select(x => x.Name)), "Confirm", ButtonStyle.Success);

            if (!Confirm)
                return;
        }

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            foreach(DockerVolumeInfo i in SelectedVolumes)
            {
                await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlVolume, i.Name, volumeType: type));
            }
            IsLoading = false;
            SelectedVolumes = null;
            await InvokeAsync(RefreshVolume);
        });

    }

    void ShowContextMenuWithManageItems(DockerVolumeInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "database", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.ContainersCount != 0 || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes) },
                new ContextMenuItem() { Text = "Force Remove", Value = "force_remove", Icon = "delete_forever", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes) },
                new ContextMenuItem() { Text = "Copy Volume Path", Value = "copy_path", Icon = "folder_copy" },
                new ContextMenuItem() { Text = "Copy Volume ID", Value = "copy_id", Icon = "content_copy" }
                                                         }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerVolumeInfo item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes/" + item.Name);
                    break;
                case "remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        bool Confirm = await Dialogs.ShowConfirmAsync("Remove Volume: " + item.Name, item.ContainersCount != 0 ? 
                            "This volume is being used by containers, are you sure you want to remove?." :
                            "Unused volume are you sure you want to remove?", "Confirm", ButtonStyle.Success);

                        if (!Confirm)
                            return;

                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlVolume, item.Name, volumeType: ControlVolumeType.Remove), (response) =>
                        {

                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshVolume);
                    }
                    break;
                case "force_remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        bool Confirm = await Dialogs.ShowConfirmAsync("Force Remove Volume: " + item.Name, item.ContainersCount != 0 ? 
                            "This volume is being used by containers, are you sure you want to remove?." :
                            "Unused volume are you sure you want to remove?", "Confirm", ButtonStyle.Success);

                        if (!Confirm)
                            return;

                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlVolume, volumeType: ControlVolumeType.ForceRemove) { ResourceList = new string[] { item.Name! } }, (response) =>
                        {
                            InvokeAsync(RefreshVolume);
                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshVolume);

                    }
                    break;
                case "copy_path":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.MountPoint);
                        }
                        catch { }
                    }
                    break;
                case "copy_id":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.Name);
                        }
                        catch { }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

    async Task CreateVolume()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        await Dialogs.OpenAsync<CreateVolumeDialog>("Create Docker Volume");
        await RefreshVolume();
    }

    async Task PruneVolumes()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Prune Unused Volumes", "Are you sure you want to remove unused volumes that have no containers or stacks.", "Confirm", ButtonStyle.Success);
        if (!Confirm)
            return;

        IsLoading = true;
        StateHasChanged();
        try
        {
            VolumesResponse = await Server.RunJsonAsync<DockerVolumeInfo[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListVolumes));
        }
        catch (Exception ex)
        {
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }

        if (VolumesResponse != null && VolumesResponse.Data != null)
        {
            foreach (var i in VolumesResponse.Data)
            {
                if (string.IsNullOrEmpty(i.Stack) && i.ContainersCount == 0)
                {
                    try
                    {
                        await Server.RecieveJsonAsync<object, DockerEvent>(new DockerEvent(DockerEventType.ControlVolume, i.Name, volumeType: ControlVolumeType.Remove));
                    }
                    catch {}
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
        await RefreshVolume();
    }

    public async Task RefreshVolume()
    {
        VolumesResponse = null;
        await Grid.RefreshDataAsync();
    }
}
