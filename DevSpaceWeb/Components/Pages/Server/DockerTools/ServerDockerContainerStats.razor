@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@inject NotificationService Notifications

@if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats))
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chart-bar"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Stats</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
            <RadzenBreadCrumbItem Text="Stats" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Containers Stats
        </RadzenAlert>
    </div>
}
else if (Container == null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chart-bar"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Stats</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@ContainerId" />
            <RadzenBreadCrumbItem Text="Stats" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get container stats.
            </RadzenAlert>
        }
    </div>
}
else if (Container.IsNotRunning)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chart-bar"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Stats</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@Container.ContainerName" />
            <RadzenBreadCrumbItem Text="Stats" />
        </RadzenBreadCrumb>
        <br />
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            This container is not running.
        </RadzenAlert>
    </div>
}
else
{
    <div class="dash-box">
        <div class="dash-box-header dash-box-content">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:chart-bar"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Container Stats</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers")" Text="Containers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + ContainerId)" Text="@Container.ContainerName" />
            <RadzenBreadCrumbItem Text="Stats" />
        </RadzenBreadCrumb>
        <br />
        <RadzenDataGrid Data="@Container.Data.Processes"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                        AllowSorting="false" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn Title="User" Width="120px">
                    <Template>
                        @context[0]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Process ID" Width="90px">
                    <Template>
                        @context[1]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Parent ID" Width="90px">
                    <Template>
                        @context[2]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Threads" Width="70px">
                    <Template>
                        @context[3]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Total CPU" Width="90px">
                    <Template>
                        @(context[4] + "%")
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Current CPU" Width="100px">
                    <Template>
                        @(context[5] + "%")
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Current Memory" Width="120px">
                    <Template>
                        @(context[6] + "%")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Start Time" Width="120px">
                    <Template>
                        @context[7]
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Elapsed Time" Width="100px">
                    <Template>
                        @context[8]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Name" Width="100px">
                    <Template>
                        @context[9]
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Command" Width="1000px">
                    <Template>
                        @context[10]
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </div>

    <RadzenRow Gap="18px" RowGap="18px">
        <RadzenColumn SizeMD="6" SizeSM="12">
            <div class="dash-box dash-box-content">
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:memory"></span></div>
                    <RadzenText TextStyle="TextStyle.H6">Memory Usage</RadzenText>
                </div>
                <br />
                <RadzenChart>
                    <RadzenAreaSeries Smooth="true" Data="@Stats" CategoryProperty="Date" Title="Memory" Stroke="#0086c9" Fill="rgb(56, 113, 255)" ValueProperty="MemoryUsage" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenSeriesAnnotation Visible="true" TItem="List<DockerContainerStats>" Data="@Stats" OffsetY="-16" Text="Acquisition" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenLegend Position="LegendPosition.Top"></RadzenLegend>
                    <RadzenCategoryAxis Padding="0" LabelAutoRotation="-45" Formatter="@FormatDate" />
                    <RadzenValueAxis Formatter="@FormatMemory">
                        <RadzenGridLines Visible="true" Stroke="#2f2f31" />
                        <RadzenAxisTitle Text="" />
                    </RadzenValueAxis>
                </RadzenChart>
                <br />
            </div>
        </RadzenColumn>
        <RadzenColumn SizeMD="6" SizeSM="12">
            <div class="dash-box dash-box-content">
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:cpu-64-bit"></span></div>
                    <RadzenText TextStyle="TextStyle.H6">CPU Usage</RadzenText>
                </div>
                <br />
                <RadzenChart>
                    <RadzenAreaSeries Smooth="false" Data="@Stats" CategoryProperty="Date" Title="CPU" Stroke="#0086c9" Fill="rgb(56, 113, 255)" ValueProperty="CpuUsage" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="true" />
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenLegend Position="LegendPosition.Top"></RadzenLegend>
                    <RadzenCategoryAxis Padding="0" LabelAutoRotation="-45" Formatter="@FormatDate" />
                    <RadzenValueAxis Formatter="@FormatCPU">
                        <RadzenGridLines Visible="true" Stroke="#2f2f31" />
                        <RadzenAxisTitle Text="" />
                    </RadzenValueAxis>
                </RadzenChart>
                <br />
            </div>
        </RadzenColumn>
        <RadzenColumn SizeMD="6" SizeSM="12">
            <div class="dash-box dash-box-content">
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:wide-area-network"></span></div>
                    <RadzenText TextStyle="TextStyle.H6">Network Usage</RadzenText>
                </div>
                <br />
                <RadzenChart>
                        <RadzenAreaSeries Smooth="false" Data="@Stats" CategoryProperty="Date" Title="Receive" Stroke="var(--rz-success)" Fill="var(--rz-success)" ValueProperty="NetworkReceive" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Smooth="true" Data="@Stats" CategoryProperty="Date" Title="Transmit" Stroke="var(--rz-warning)" Fill="var(--rz-warning)" ValueProperty="NetworkTransmit">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenLegend Position="LegendPosition.Top"></RadzenLegend>
                    <RadzenCategoryAxis Padding="0" LabelAutoRotation="-45" Formatter="@FormatDate" />
                    <RadzenValueAxis Formatter="@FormatMemory">
                        <RadzenGridLines Visible="true" Stroke="#2f2f31" />
                        <RadzenAxisTitle Text="" />
                    </RadzenValueAxis>
                </RadzenChart>
                <br />
            </div>
        </RadzenColumn>
        <RadzenColumn SizeMD="6" SizeSM="12">
            <div class="dash-box dash-box-content">
                <div class="dash-box-header">
                    <div class="dash-box-icon"><span class="iconify" data-icon="mdi:file-arrow-up-down"></span></div>
                    <RadzenText TextStyle="TextStyle.H6">IO Usage</RadzenText>
                </div>
                <br />
                <RadzenChart>
                    <RadzenAreaSeries Smooth="false" Data="@Stats" CategoryProperty="Date" Title="Read" Stroke="var(--rz-success)" Fill="var(--rz-success)" ValueProperty="IORead" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="true" />
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Smooth="true" Data="@Stats" CategoryProperty="Date" Title="Write" Stroke="var(--rz-warning)" Fill="var(--rz-warning)" ValueProperty="IOWrite">
                        <RadzenSeriesDataLabels Visible="true" />
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenAreaSeries>
                    <RadzenLegend Position="LegendPosition.Top"></RadzenLegend>
                    <RadzenCategoryAxis Padding="0" LabelAutoRotation="-45" Formatter="@FormatDate" />
                    <RadzenValueAxis Formatter="@FormatMemory">
                        <RadzenGridLines Visible="true" Stroke="#2f2f31" />
                        <RadzenAxisTitle Text="" />
                    </RadzenValueAxis>
                </RadzenChart>
                <br />
            </div>
        </RadzenColumn>
    </RadzenRow>

    

    
}

<style>
    .rz-cell-data {
        white-space: pre !important;
        text-overflow: unset !important;
    }
    .rz-legend-items {
    margin-top: -16px;
}
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public required string ContainerId { get; set; }

    public DockerContainerProcesses? Container { get; set; }
    public bool Failed { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats))
            return;

        try
        {
            var Result = await Server.RecieveJsonAsync<DockerContainerProcesses>(new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Processes));
            Failed = !Result.IsSuccess;
            Container = Result.Data;

            Console.WriteLine("CPU: " + Result.Data.Stats.CpuUsage);
            if (Result.Data != null && Result.Data.Stats != null)
                Stats.Add(Result.Data.Stats);


            await Task.Delay(new TimeSpan(0, 0, 5));
            Result = await Server.RecieveJsonAsync<DockerContainerProcesses>(new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Processes));
            Console.WriteLine("CPU: " + Result.Data.Stats.CpuUsage);
            if (Result.Data != null && Result.Data.Stats != null)
                Stats.Add(Result.Data.Stats);

                await Task.Delay(new TimeSpan(0, 0, 5));
            Result = await Server.RecieveJsonAsync<DockerContainerProcesses>(new DockerEvent(DockerEventType.ControlContainer, ContainerId, containerType: ControlContainerType.Processes));
            Console.WriteLine("CPU: " + Result.Data.Stats.CpuUsage);
            if (Result.Data != null && Result.Data.Stats != null)
                Stats.Add(Result.Data.Stats);
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    private string FormatMemory(object value)
    {
        try
        {
            return Utils.SizeSuffix(Convert.ToInt64(value.ToString()), 0);
        }
        catch
        {
            return "0";
        }
    }


    private string FormatDate(object value)
    {
        return Utils.GetLocalDate(Session, (DateTime)value, showSeconds: true);
    }

    private string FormatCPU(object value)
    {
        return string.Format("{0:F1}", double.Parse(value.ToString())) + "%";
    }

    public List<DockerContainerStats> Stats = new List<DockerContainerStats>();
}
