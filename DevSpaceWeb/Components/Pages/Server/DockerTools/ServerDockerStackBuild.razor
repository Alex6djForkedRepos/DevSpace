@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject NotificationService Notifications

<PageTitle>Docker Build Stack | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="ri:stack-fill"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Stack Build</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks")" Text="Stacks" />
        <RadzenBreadCrumbItem Text="Build" />
    </RadzenBreadCrumb>
    <br />
    @if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for Create Stacks
            </RadzenAlert>
        </div>
    }
    else
    {
        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1">Name</RadzenText>
        <RadzenTextBox @bind-Value="@StackName" Style="width: 100%" aria-label="Email TextBox" AutoCompleteType="AutoCompleteType.Off" autofocus autocapitalize="none" MaxLength="100" />
        <RadzenText TextStyle="TextStyle.Body2">
            Stack name need to be all lowercase, 2-255 characters and optionally include special characters such as <code>.</code> <code>-</code> <code>_</code>
        </RadzenText>
        <br />
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1">Editor</RadzenText>
        <Editor @ref="@_editor" Value="@("")" FileName="compose.yml" Language="yaml" HideDiff="true"></Editor>
        <br />
        <RadzenButton Text="Build Stack" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@BuildStack" Disabled="@(IsBuilding || Success || StartFailed)" />
        <br />
        if (Success)
        {
            <div><iconify-icon icon="mdi:docker" style="color: var(--rz-success);"></iconify-icon></div>
            <h6>Stack Created</h6>
            <p>Your containers are now running click the button to show the stack.</p>
            <br />
            <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + StackId)"><RadzenButton Text="View Stack" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" /></a>
            <br />
        }
        else if (BuildFailed)
        {
            <div><iconify-icon icon="mdi:docker" style="color: var(--rz-danger);"></iconify-icon></div>
            <h6>Build Failed</h6>
            <p>No stack or containers have been created.</p>
        }
        else if (StartFailed)
        {
            <div><iconify-icon icon="mdi:docker" style="color: var(--rz-danger);"></iconify-icon></div>
            <h6>Start Failed</h6>
            <p>One or more of your containers failed to start.</p>
            <br />
            <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + StackId)"><RadzenButton Text="View Stack" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" /></a>
        }
        else if (IsBuilding)
        {
            <div><iconify-icon icon="mdi:docker" style="color: #0091E2;"></iconify-icon></div>
            <h6>Building Stack</h6>
            <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            <br />
        }
        <br />
    }
</div>

<style>
    .monaco-editor, .monaco-diff-editor {
        background-color: #1e1e1e !important;
    }

    .monaco-editor-container, .monaco-diff-editor {
        min-height: 400px !important;
        max-height: calc(100vh - 140px) !important;
        padding-top: 6px;
        padding-bottom: 10px;
    }

    .dash-box-content iconify-icon {
        font-size: 60px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public string? StackName { get; set; }
    private Editor _editor = null!;

    public bool IsBuilding { get; set; }
    public bool BuildFailed { get; set; }
    public bool StartFailed { get; set; }
    public bool Success { get; set; }
    public string? StackId { get; set; }

    public async Task BuildStack()
    {
        if (Member == null || Server == null)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))
            return;

        if (string.IsNullOrEmpty(StackName))
        {
            Notifications.Notify(NotificationSeverity.Error, "Stack Name Error", "Stack name is empty.");
            return;
        }
        if (!Utils.IsDockerImageNameValid(StackName))
        {
            Notifications.Notify(NotificationSeverity.Error, "Stack Name Error", "Name needs to be lowercase and with valid characters.");
            return;
        }

        string Data = await _editor.GetValue();
        if (string.IsNullOrEmpty(Data))
        {
            Notifications.Notify(NotificationSeverity.Error, "Compose Error", "Compose content is empty.");
            return;
        }
        IsBuilding = true;

        SocketResponse<DockerStackCreate?> res = await Server.RunJsonAsync<DockerStackCreate, DockerEvent>(Notifications, new DockerEvent(DockerEventType.CreateStack)
        {
            Data = AgentJsonOptions.FromObject(new CreateStackEvent
            {
                Name = StackName,
                DockerfileName = StackName,
                Content = Data,
                IsAdministrator = Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator)
            })
        }, async (res) =>
        {
            if (res.Data == null)
            {
                BuildFailed = true;
                IsBuilding = false;
                return;
            }

            StateHasChanged();
            StackId = res.Data?.Id;
            SocketResponse<object?> Res = await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, res.Data.Id, stackType: ControlStackType.Start));
            if (!Res.IsSuccess)
                StartFailed = true;
            else
                Success = true;

            StateHasChanged();
        });
        if (!res.IsSuccess)
        {
            BuildFailed = true;
            IsBuilding = false;
            StateHasChanged();
        }
    }
}
