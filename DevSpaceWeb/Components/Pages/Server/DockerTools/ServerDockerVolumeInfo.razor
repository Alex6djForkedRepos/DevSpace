@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@inject NotificationService Notifications
@inject DialogService Dialogs

@if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
{
    <PageTitle>Volume Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:storage"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Volume Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes")" Text="Volumes" />
            <RadzenBreadCrumbItem Text="@VolumeId" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Volumes
        </RadzenAlert>
    </div>
}
else if (Volume == null)
{
    <PageTitle>Volume Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:storage"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Volume Info</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes")" Text="Volumes" />
            <RadzenBreadCrumbItem Text="@VolumeId" />
        </RadzenBreadCrumb>
        @if (IsActionLoading)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Volume has been removed.
            </RadzenAlert>
        }
        else if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get volume info.
            </RadzenAlert>
        }
    </div>
}
else
{
    @if (Volume.ContainersList != null && Volume.ContainersList.Any() && Volume.ContainersList.First().Value.Name == "registry")
    {
        <PageTitle>docker_registry Volume | @_Data.Config.Instance.Name</PageTitle>
    }
    else
    {
        <PageTitle>@(Volume.Name ?? VolumeId) Volume | @_Data.Config.Instance.Name</PageTitle>
    }

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:storage"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Volume Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/volumes")" Text="Volumes" />
            @if (Volume.ContainersList != null && Volume.ContainersList.Any() && Volume.ContainersList.First().Value.Name == "registry")
            {
                <RadzenBreadCrumbItem Text="docker_registry" />
            }
            else
            {
                <RadzenBreadCrumbItem Text="@(Volume.Name ?? VolumeId)" />
            }
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                            @if (Volume.ContainersList != null && Volume.ContainersList.Any() && Volume.ContainersList.First().Value.Name == "registry")
                            {
                                <RadzenText TextStyle="TextStyle.Body2">docker_registry (@Volume.Name)</RadzenText>
                            }
                            else
                            {
                                <RadzenText TextStyle="TextStyle.Body2">@Volume.Name</RadzenText>
                            }
                            <CopyClipboard Value="@Volume.Name"></CopyClipboard>
                            <RadzenSplitButton Text="Remove" Icon="delete" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Darker" Click="((args) => Remove(args?.Text))" Size="ButtonSize.Small" Disabled="@(IsActionLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))">
                                <ChildContent>
                                    <RadzenSplitButtonItem Text="Force Remove" Style="cursor: pointer;" />
                                </ChildContent>
                            </RadzenSplitButton>
                        </RadzenStack>

                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Created At
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Volume.CreatedAt
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Volume.Driver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Scope
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Volume.Scope
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Mount Point
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Volume.MountPoint
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    @if (Volume != null && Volume.Labels != null)
    {
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:tag"></span></div>
                <RadzenText TextStyle="TextStyle.H6">Labels</RadzenText>
            </div>
            <br />

            @foreach (KeyValuePair<string, string> i in Volume.Labels)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @i.Value
                </RadzenText>
                <br />
            }

        </div>
    }

    @if (Volume != null && Volume.Status != null)
    {
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:view-list"></span></div>
                <RadzenText TextStyle="TextStyle.H6">Status</RadzenText>
            </div>
            <br />

            @foreach (KeyValuePair<string, object> i in Volume.Status)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @(i.Value.ToString())
                </RadzenText>
                <br />
            }

        </div>
    }

    @if (Volume != null && Volume.Options != null)
    {
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
                <RadzenText TextStyle="TextStyle.H6">Options</RadzenText>
            </div>
            <br />

            @foreach (KeyValuePair<string, string> i in Volume.Options)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @i.Value
                </RadzenText>
                <br />
            }

        </div>
    }

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="ri:box-3-fill"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Containers</RadzenText>
        </div>
        <br />
        <RadzenDataGrid Data="@Volume?.ContainersList"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                        ShowPagingSummary="true"
                        PagingSummaryFormat="@(Volume?.ContainersCount + " " + (Volume?.ContainersCount != 1 ? "containers" : "container"))" Density="Density.Default"
                        AllowSorting="false" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn Title="Name" Width="200px">
                    <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + context.Key)" Text="@context.Value.Name" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="120px">
                    <Template>
                        @if (context.Value.ReadWrite)
                        {
                            <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read & Write" IsPill="true" />
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read-Only" IsPill="true" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Destination">
                    <Template>
                        @context.Value.Mounted
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public required string VolumeId { get; set; }

    public DockerVolumeInfo? Volume { get; set; }
    public bool Failed { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewVolumes))
            return;

        if (Program.IsPreviewMode && VolumeId != "3d725f9fc66894e63b81e8a2843f1cab06283d78ca0b92246240b291e7184258")
        {
            Failed = true;
            return;
        }

        try
        {
            SocketResponse<DockerVolumeInfo?> Result = await Server.RunJsonAsync<DockerVolumeInfo>(Notifications, new DockerEvent(DockerEventType.ControlVolume, VolumeId, volumeType: ControlVolumeType.View));
            Failed = !Result.IsSuccess;
            Volume = Result.Data;

        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    public bool IsActionLoading { get; set; }

    public async Task Remove(string? option)
    {
        if (string.IsNullOrEmpty(option))
            option = "Remove";

        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync(option + " Volume: " + Volume?.Name,
            Volume.ContainersCount != 0 ? "This volume is being used by containers, are you sure you want to remove?" :
            "This volume is unused, are you sure you want to remove?", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageVolumes))
            return;

        IsActionLoading = true;

        SocketResponse<object?> Result = await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlVolume, VolumeId, volumeType: option == "Force Remove" ? ControlVolumeType.ForceRemove : ControlVolumeType.Remove));
        if (Result.IsSuccess)
            Volume = null;

    }
}
