@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@inject NotificationService Notifications

@if (Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ViewHostInfo))
{
    <PageTitle>Host Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="mdi:information"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Host Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
            <RadzenBreadCrumbItem Text="Host" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Host Info
        </RadzenAlert>
    </div>
}
else if (Host == null)
{
    <PageTitle>Host Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="mdi:information"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
        <RadzenText TextStyle="TextStyle.H6">Host Info</RadzenText>
        @if (!Failed)
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
            <RadzenBreadCrumbItem Text="Host" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get host info.
            </RadzenAlert>
        }
    </div>
}
else
{
    <PageTitle>@Session.Selected.Team?.Server?.Data.Name Host Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="mdi:information"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Host Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
            <RadzenBreadCrumbItem Text="Host" />
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Hostname
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.Hostname
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IP
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenTextMask Value="@Server?.AgentIp" IsIp="true"></RadzenTextMask>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Uptime
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @(Host.IsWindows ? "Unavailable" : Host.GetUptimeText())
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        OS
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @(Host.IsWindows ? "Windows (Docker Desktop)" : Host.OperatingSystem)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Architecture
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.Architecture
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Kernal
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.KernelVersion
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Dev Space Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Program.GetVersionText()
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Agent Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @($"{Host.AgentVersion} (.NET {Host.AgentNET})")
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Warnings
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Host.Warnings != null)
                        {
                            @(string.Join("\n\n", Host.Warnings))
                        }
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:server"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">System</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        System Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.SystemDriver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        CPU
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @(Host.CpuCount + (Host.IsWindows ? " Estimate (Not Accurate)" : null))
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Memory
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @(Utils.ToPrettySize(Host.RamTotal) + (Host.IsWindows ? " Estimate (Not Accurate)" : null))
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Storage
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @($"{Utils.SizeSuffix(Host.StorageTotalSize - Host.StorageFreeSize, 0)} / {Utils.SizeSuffix(Host.StorageTotalSize, 0)} ({100 * (Host.StorageTotalSize - Host.StorageFreeSize) / Host.StorageTotalSize}%)" + (Host.IsWindows ? " Estimate (Not Accurate)" : null))
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Live Restore
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.LiveRestoreEnabled.ToEnabledString()
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:docker"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Docker</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Docker Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.Docker.DockerVersion
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        API Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.Docker.APIVersion
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        License
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.License
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Root Directory
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.RootDirectory
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Storage Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.StorageDriver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Logging Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.LoggingDriver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Log Plugins
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Host.LogPlugins != null)
                        {
                            @string.Join(", ", Host.LogPlugins)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Volume Plugins
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Host.VolumePlugins != null)
                        {
                            @string.Join(", ", Host.VolumePlugins)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Network Plugins
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Host.NetworkPlugins != null)
                        {
                            @string.Join(", ", Host.NetworkPlugins)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Auth Plugins
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Host.AuthPlugins != null)
                        {
                            @string.Join(", ", Host.AuthPlugins)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Experimental
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.ExperimentalEnabled.ToEnabledString()
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Debug
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Host.DebugEnabled.ToEnabledString()
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public SystemInfoFullResponse? Host { get; set; }
    public bool Failed { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasServerPermission(Team, Server, ServerPermission.ViewHostInfo))
            return;

        try
        {
            SocketResponse<SystemInfoFullResponse?> Result = await Server.RunJsonAsync<SystemInfoFullResponse, DockerEvent>(Notifications, new DockerEvent(DockerEventType.HostInfo));
            Failed = !Result.IsSuccess;
            Host = Result.Data;

        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }
}
