@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject NotificationService Notifications

<PageTitle>Docker Networks | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:local-area-network"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Networks</RadzenText>
        @if ((IsLoading || IsActionRunning) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Networks" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Networks
            </RadzenAlert>
        </div>
    }
    else
    {

    <div class="dash-box-content">
        <ActionBar>
            <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlNetworkType.Remove))" Icon="delete" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Variant="Variant.Filled" Text="Create Network" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateNetwork" Disabled="@(!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))" />
            <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshNetworks" Disabled="@IsLoading" />
        </ActionBar>
    </div>

    <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@NetworksList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                    @bind-Value="@SelectedNetworks" SelectionMode="DataGridSelectionMode.Multiple" ShowPagingSummary="true"
                    PagingSummaryFormat="@(Count + " network" + (Count != 1 ? "s" : "") )" Density="Density.Compact"
                    AllowSorting="false" AllowFiltering="false"
                    TItem="DockerNetworkInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
        <Columns>
            <RadzenDataGridColumn Width="36px" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                    Value="@(SelectedNetworks == null || SelectedNetworks?.Any() != true ? false : !NetworksList.All(i => SelectedNetworks.Contains(i)) ? null : NetworksList.Any(i => SelectedNetworks.Contains(i)))"
                                        Change="@(args => SelectedNetworks = args == true ? (SelectedNetworks != null && SelectedNetworks.Any()) ? null : NetworksList.Where(x => !this.IsNetworkSystem(x)).ToList() : null)" Disabled="@IsActionRunning" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedNetworks != null && SelectedNetworks.Contains(data))" Disabled="@(this.IsNetworkSystem(data) || IsActionRunning)" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true">
                <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + context.Id)">@context.Name</RadzenLink>

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="200px">
                <Template>
                    @if (context.ContainersCount == 0)
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unused" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="@(context.ContainersCount + " Container" +  (context.ContainersCount != 1 ? "s" : ""))" />
                    }
                    @if (this.IsNetworkSystem(context))
                    {
                        <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="System" class="ml-2" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="70px">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Driver" Width="80px">
                <Template>
                    @context.Driver
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Scope" Width="80px">
                <Template>
                    @context.Scope
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Attachable" Width="80px">
                <Template>
                    @context.IsAttachable
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Internal" Width="80px">
                <Template>
                    @context.IsInternal
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Width="90px">
                <Template>
                    <RadzenContent MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.Now - context.Created).TotalDays} Days ago"))">@context.Created.ToString("dd'/'MM'/'yyyy")</RadzenContent>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPAM">
                <Template>
                        @context.IPAM?.Driver
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<DockerNetworkInfo[]?>? NetworksResponse = null;

    IQueryable<DockerNetworkInfo>? NetworksList;
    public int Count = 0;
    IList<DockerNetworkInfo>? SelectedNetworks;
    public bool AnySelected => SelectedNetworks != null ? SelectedNetworks.Any() : false;
    RadzenDataGrid<DockerNetworkInfo> Grid = null!;
    public bool IsLoading = true;
    public bool IsActionRunning { get; set; }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
            return;

        if (Program.IsPreviewMode)
        {
            NetworksList = new List<DockerNetworkInfo>
            {
                new DockerNetworkInfo
                {
                    Id = "d38254f7c4f952d6cc32c059e3aaf5993c304163880d179c14de81e60eecbb0c",
                    Name = "devspace_demo_network",
                    ContainersCount = 1,
                    Driver = "bridge",
                    Scope = "local",
                    IPAM = new DockerNetworkIPAM
                    {
                        Driver = "default"
                    },
                    Created = DateTime.UtcNow.AddDays(-3)
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (NetworksResponse == null)
            {
                IsLoading = true;
                try
                {
                    NetworksResponse = await Server.RecieveJsonAsync<DockerNetworkInfo[]>(new DockerEvent(DockerEventType.ListNetworks));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;
            }

            if (NetworksResponse != null && NetworksResponse.IsSuccess && NetworksResponse.Data != null)
            {
                IQueryable<DockerNetworkInfo> query = NetworksResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                NetworksList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    public async Task SetNameFilter(string text)
    {
        await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
    }

    void RunSelectedContainersAction(ControlNetworkType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedNetworks == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        _ = Task.Run(async () =>
        {
            IsActionRunning = true;
            await InvokeAsync(StateHasChanged);

            foreach(DockerNetworkInfo i in SelectedNetworks)
            {
                await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, i.Id, networkType: type));
            }
            IsActionRunning = false;
            SelectedNetworks = null;
            await InvokeAsync(RefreshNetworks);
        });

    }

    void ShowContextMenuWithManageItems(DockerNetworkInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "lan", Disabled = Member == null ||  !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || IsNetworkSystem(item) || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks) },
                                                     }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerNetworkInfo item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + item.Id);
                    break;
                case "remove":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);

                    await Server.RecieveJsonAsync<object>(new DockerEvent(DockerEventType.ControlNetwork, item.Id, networkType: ControlNetworkType.Remove));

                    IsActionRunning = false;
                    await InvokeAsync(RefreshNetworks);
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);


    public bool IsNetworkSystem(DockerNetworkInfo info)
    {
        switch (info.Name)
        {
            case "host":
            case "bridge":
            case "none":
                return true;
        }

        return false;
    }

    async Task CreateNetwork()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        await DialogService.OpenAsync<CreateNetworkDialog>("Create Docker Network");
    }

    public async Task RefreshNetworks()
    {
        NetworksResponse = null;
        await Grid.RefreshDataAsync();
    }
}
