@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Components.Dialogs.Docker
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@using static DevSpaceWeb.Components.Pages.Server.DockerTools.ServerDockerContainers
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject NotificationService Notifications
@inject IJSRuntime JS

<PageTitle>Docker Networks | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:local-area-network"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Networks</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Networks" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Networks
            </RadzenAlert>
        </div>
    }
    else
    {

    <div class="dash-box-content">
        <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Create Network" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateNetwork" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))" />
                <RadzenButton Variant="Variant.Filled" Text="Prune Networks" Icon="delete" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" Click="@PruneNetworks" Disabled="@(IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))" />
        </ActionBar>
        <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-single" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedNetworksAction(ControlNetworkType.Remove))" Icon="delete" Disabled="@(IsLoading || !AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshNetworks" Disabled="@IsLoading" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search networks" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
        </div>
    </div>

    <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@NetworksList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                    @bind-Value="@SelectedNetworks" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                    PagingSummaryFormat="@(Count + " network" + (Count != 1 ? "s" : "") )" Density="Density.Compact" EmptyText="No networks."
                    AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    TItem="DockerNetworkInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
        <Columns>
            <RadzenDataGridColumn Width="36px" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                    Value="@(SelectedNetworks == null || SelectedNetworks?.Any() != true ? false : !NetworksList.All(i => SelectedNetworks.Contains(i)) ? null : NetworksList.Any(i => SelectedNetworks.Contains(i)))"
                                        Change="@(args => SelectedNetworks = args == true ? (SelectedNetworks != null && SelectedNetworks.Any()) ? null : NetworksList.Where(x => !x.IsNetworkSystem()).ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                </HeaderTemplate>
                <Template Context="data">
                        <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedNetworks != null && SelectedNetworks.Contains(data))" Disabled="@(data.IsNetworkSystem() || IsLoading)" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(DockerNetworkInfo.Name)">
                <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + context.Id)">@context.Name</RadzenLink>

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="200px" Filterable="false">
                <Template>
                    @if (context.ContainersCount == 0)
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unused" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="@(context.ContainersCount + " Container" +  (context.ContainersCount != 1 ? "s" : ""))" />
                    }
                    @if (context.IsNetworkSystem())
                    {
                        <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="System" class="ml-2" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="70px" Filterable="false">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading)" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Stack" Width="200px" Property="@nameof(DockerNetworkInfo.Stack)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @if (!string.IsNullOrEmpty(context.Stack))
                    {
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.Stack)" Text="@context.Stack" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Driver" Width="80px" Property="@nameof(DockerNetworkInfo.Driver)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.Driver
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Scope" Width="80px" Property="@nameof(DockerNetworkInfo.Scope)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.Scope
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Attachable" Width="100px" Property="@nameof(DockerNetworkInfo.IsAttachable)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.IsAttachable
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Internal" Width="80px" Property="@nameof(DockerNetworkInfo.IsInternal)" FilterMode="FilterMode.CheckBoxList">
                <Template>
                    @context.IsInternal
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Created" Width="90px" Filterable="false">
                <Template>
                    <RadzenContent MouseEnter="@(args => ShowUptimeTooltip(args, $"{(int)(DateTime.Now - context.Created).TotalDays} Days ago"))">@context.Created.ToString("dd'/'MM'/'yyyy")</RadzenContent>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPAM" Width="90px" Filterable="false">
                <Template>
                        @context.IPAM?.Driver
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPv4 Subnet" Width="120px" Filterable="false">
                <Template>
                        @context.IPAM?.IPv4Subnet
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPv4 Gateway" Width="120px" Filterable="false">
                <Template>
                        @context.IPAM?.IPv4Gateway
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPv6 Subnet" Width="300px" Filterable="false">
                <Template>
                        @context.IPAM?.IPv6Subnet
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="IPv6 Gateway" Width="300px" Filterable="false">
                <Template>
                        @context.IPAM?.IPv6Gateway
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<DockerNetworkInfo[]?>? NetworksResponse = null;

    IQueryable<DockerNetworkInfo>? NetworksList;
    public int Count = 0;
    IList<DockerNetworkInfo>? SelectedNetworks;
    public bool AnySelected => SelectedNetworks != null ? SelectedNetworks.Any() : false;
    RadzenDataGrid<DockerNetworkInfo> Grid = null!;
    public bool IsLoading = true;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
            return;

        if (Program.IsPreviewMode)
        {
            NetworksList = new List<DockerNetworkInfo>
            {
                new DockerNetworkInfo
                {
                    Id = "d38254f7c4f952d6cc32c059e3aaf5993c304163880d179c14de81e60eecbb0c",
                    Name = "devspace_demo_network",
                    ContainersCount = 1,
                    Driver = "bridge",
                    Scope = "local",
                    IPAM = new DockerNetworkIPAM
                    {
                        Driver = "default"
                    },
                    Created = DateTime.UtcNow.AddDays(-3)
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (NetworksResponse == null)
            {
                IsLoading = true;
                try
                {
                    NetworksResponse = await Server.RunJsonAsync<DockerNetworkInfo[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListNetworks));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;
            }

            if (NetworksResponse != null && NetworksResponse.IsSuccess && NetworksResponse.Data != null)
            {
                IQueryable<DockerNetworkInfo> query = NetworksResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                NetworksList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    async Task RunSelectedNetworksAction(ControlNetworkType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedNetworks == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        if (type == ControlNetworkType.Remove)
        {
            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedNetworks.Count} network" + (SelectedNetworks.Count != 1 ? "s" : ""),
                $"Are you sure you want to remove {(SelectedNetworks.Count == 1 ? "this network" : "these networks")}: " + string.Join(", ", SelectedNetworks.Select(x => x.Name)), "Confirm", ButtonStyle.Success);

            if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
                return;
        }

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            foreach(DockerNetworkInfo i in SelectedNetworks)
            {
                await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, i.Id, networkType: type));
            }
            IsLoading = false;
            SelectedNetworks = null;
            await InvokeAsync(RefreshNetworks);
        });

    }

    void ShowContextMenuWithManageItems(DockerNetworkInfo item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "lan", Disabled = Member == null ||  !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = Member == null || item.IsNetworkSystem() || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks) },
                new ContextMenuItem() { Text = "Copy Network ID", Value = "copy", Icon = "content_copy" }
                                                     }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerNetworkInfo item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks/" + item.Id);
                    break;
                case "remove":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
                        return;

                    bool Confirm = await Dialogs.ShowConfirmAsync("Remove Network: " + item?.Name,
                        "Are you sure you want to remove this network?", "Confirm", ButtonStyle.Success);

                    if (!Confirm)
                        return;

                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, item.Id, networkType: ControlNetworkType.Remove));
                    IsLoading = false;
                    await InvokeAsync(RefreshNetworks);
                    break;
                    case "copy":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.Id);
                        }
                        catch { }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);


    async Task CreateNetwork()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        await Dialogs.OpenAsync<CreateNetworkDialog>("Create Docker Network");
        await RefreshNetworks();
    }

    async Task PruneNetworks()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageNetworks))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Prune Unused Networks", "Are you sure you want to remove unused networks that have no containers or stacks.", "Confirm", ButtonStyle.Success);
        if (!Confirm)
            return;

        IsLoading = true;
        StateHasChanged();
        try
        {
            NetworksResponse = await Server.RunJsonAsync<DockerNetworkInfo[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListNetworks));
        }
        catch (Exception ex)
        {
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }

        if (NetworksResponse != null && NetworksResponse.Data != null)
        {
            foreach (var i in NetworksResponse.Data)
            {
                if (!i.IsNetworkSystem() && string.IsNullOrEmpty(i.Stack) && i.ContainersCount == 0)
                {
                    try
                    {
                        await Server.RecieveJsonAsync<object, DockerEvent>(new DockerEvent(DockerEventType.ControlNetwork, i.Name, networkType: ControlNetworkType.Remove));
                    }
                    catch { }
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
        await RefreshNetworks();
    }

    public async Task RefreshNetworks()
    {
        NetworksResponse = null;
        await Grid.RefreshDataAsync();
    }
}
