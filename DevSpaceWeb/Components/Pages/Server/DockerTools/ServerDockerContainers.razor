@using System.Net.WebSockets
@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket
@using Docker.DotNet.Models

<div class="dash-box">
    <RadzenDataGrid @ref="@grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                    AllowSorting="true" Data="@employees" Count="@count" LoadData="@LoadData"
                    IsLoading="@isLoading" GridLines="DataGridGridLines.Horizontal"
                    LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Simple"
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@selectedEmployees">
        <Columns>
            <RadzenDataGridColumn Title="Name" MinWidth="120px">
                <Template>
                    @context.Names.First().Substring(1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" MinWidth="120px">
                <Template>
                    @switch (context.State)
                    {
                        case "running":
                            @if (context.Status.EndsWith("(healthy)"))
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Healthy" IsPill="true" />
                            }
                            else if (context.Status.EndsWith("(unhealthy)"))
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Unhealthy" IsPill="true" />
                            }
                            else
                            {
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Running" IsPill="true" />
                            }
                            break;
                        case "created":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Created" IsPill="true" />
                            break;
                        case "restarting":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Restarting" IsPill="true" />
                            break;
                        case "removing":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Removing" IsPill="true" />
                            break;
                        case "paused":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Paused" IsPill="true" />
                            break;
                        case "exited":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Exited" IsPill="true" />
                            break;
                        case "dead":
                            <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" />
                            break;
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="" MinWidth="120px">
                <Template>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>



@* <div class="dash-box">
    <MudTable @ref="@table" ServerData="ServerReload" Dense="true" Hover="true" Elevation="0" MultiSelection="true" Breakpoint="Breakpoint.Sm">
        <ToolBarContent>
            <div class="dash-box-icon"><span class="iconify" data-icon="ri:box-3-fill"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Containers</RadzenText>
            <MudSpacer />
            <MudTextField T="string" Margin="Margin.Dense" @bind-Value="@searchString" DebounceInterval="500" OnDebounceIntervalElapsed="@(s=>OnSearch(s))" Placeholder="Search Name" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Variant="Variant.Outlined"></MudTextField>


        </ToolBarContent>

        <ColGroup>
            <col style="width: 40px;" />
            <col style="width: 200px;" />
            <col style="width: 100px;" />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name_filed" InitialDirection="SortDirection.Ascending" T="ContainerListResponse">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="status_field" T="ContainerListResponse">Status</MudTableSortLabel></MudTh>
            <MudTh>
                <MudButtonGroup Size="Size.Small" Color="Color.Default" Variant="Variant.Outlined" OverrideStyles="false">
                    <MudButton Color="Color.Success" Variant="Variant.Outlined">Start</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined">Stop</MudButton>
                    <MudButton Color="Color.Warning" Variant="Variant.Outlined">Restart</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined">Kill</MudButton>
                    <MudButton Color="Color.Default" Variant="Variant.Outlined">Pause</MudButton>
                    <MudButton Color="Color.Default" Variant="Variant.Outlined">Resume</MudButton>
                </MudButtonGroup>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name" Style="width2: 200px;">@context.Names.First().Substring(1)</MudTd>
            <MudTd DataLabel="Status" Style="width2: 80px;">
                @switch (context.State)
                {
                    case "running":
                        @if (context.Status.EndsWith("(healthy)"))
                        {
                            <MudChip T="string" Color="Color.Success" Variant="Variant.Text" Size="Size.Small">Healthy</MudChip>
                        }
                        else if (context.Status.EndsWith("(unhealthy)"))
                        {
                            <MudChip T="string" Color="Color.Warning" Variant="Variant.Text" Size="Size.Small">Unhealthy</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Success" Variant="Variant.Text" Size="Size.Small">Running</MudChip>
                        }
                        break;
                    case "created":
                        <MudChip T="string" Color="Color.Dark" Variant="Variant.Text" Size="Size.Small">Created</MudChip>
                        break;
                    case "restarting":
                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Text" Size="Size.Small">Restarting</MudChip>
                        break;
                    case "removing":
                        <MudChip T="string" Color="Color.Dark" Variant="Variant.Text" Size="Size.Small">Removing</MudChip>
                        break;
                    case "paused":
                        <MudChip T="string" Color="Color.Info" Variant="Variant.Text" Size="Size.Small">Paused</MudChip>
                        break;
                    case "exited":
                        <MudChip T="string" Color="Color.Error" Variant="Variant.Text" Size="Size.Small">Exited</MudChip>
                        break;
                    case "dead":
                        <MudChip T="string" Color="Color.Error" Variant="Variant.Text" Size="Size.Small">Down</MudChip>
                        break;
                }
            </MudTd>
            <MudTd DataLabel="" Style="width2: 100px;">
                <MudMenu Label="Manage" Variant="Variant.Filled" Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Color="Color.Info" Size="Size.Small">
                    <MudMenuItem>Info</MudMenuItem>
                    <MudMenuItem>Config</MudMenuItem>
                    <MudMenuItem>Logs</MudMenuItem>
                    <MudMenuItem>Stats</MudMenuItem>
                    <MudMenuItem>Execute</MudMenuItem>
                    <MudMenuItem>Permissions</MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>
                @if (containers == null)
                {
                    <p>No matching records found</p>
                }
                else if (containers.Error == DockerError.NotInstalled)
                {
                    <MudAlert Severity="Severity.Warning">Docker is not installed on this server</MudAlert>
                }
                else if (containers.Error == DockerError.Failed)
                {
                    <MudAlert Severity="Severity.Warning">Failed to load docker on this server</MudAlert>
                }
            </MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager RowsPerPageString="Items per page:" LastIcon="" FirstIcon="" />
        </PagerContent>
    </MudTable>
</div> *@

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    DockerResponse<ContainerListResponse[]>? containers = null;

    IEnumerable<ContainerListResponse> employees;
    public int count = 0;
    IList<ContainerListResponse> selectedEmployees;
    RadzenDataGrid<ContainerListResponse> grid;
    public bool isLoading = false;

    public async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();
        Console.WriteLine("Loading Data");
        if (Program.IsPreviewMode)
        {
            employees = new List<ContainerListResponse>
             {
                 new ContainerListResponse { Names = new List<string> { "/my-api" }, State = "running", Status = "test (healthy)" },
                 new ContainerListResponse { Names = new List<string> { "/discord-bot" }, State = "dead", Status = "" },
             };
            count = 2;
        }
        else
        {
            if (containers == null)
            {
                try
                {
                    containers = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<ContainerListResponse[]>>(new IWebSocketTaskEvent(EventType.DockerListContainers));

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }

            if (containers != null)
            {
                var query = containers.Data;
                count = query.Count();
                employees = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
        }

        isLoading = false;
    }



    //private string searchString = null;
    // private MudTable<ContainerListResponse> table;

    // private void OnSearch(string text)
    // {
    //     table.ReloadServerData();
    // }

    // public async Task<TableData<ContainerListResponse>> ServerReload(TableState state, CancellationToken token)
    // {
    //     if (Program.IsPreviewMode)
    //     {
    //         return new TableData<ContainerListResponse>()
    //             {
    //                 TotalItems = 2,
    //                 Items = new List<ContainerListResponse>
    //         {
    //             new ContainerListResponse { Names = new List<string> { "/my-api" }, State = "running", Status = "test (healthy)" },
    //             new ContainerListResponse { Names = new List<string> { "/discord-bot" }, State = "dead", Status = "" },
    //         }
    //             };
    //     }

    //     if (containers == null)
    //     {
    //         try
    //         {
    //             containers = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<ContainerListResponse[]>>(new IWebSocketTaskEvent(EventType.ListContainers));
    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine(ex);
    //         }
    //         if (containers == null)
    //             containers = new DockerResponse<ContainerListResponse[]> { Error = DockerError.Failed };
    //     }

    //     if (containers.Data == null)
    //         return new TableData<ContainerListResponse>() { TotalItems = 0, Items = new ContainerListResponse[0] };

    //     var search = string.IsNullOrEmpty(searchString) ? containers.Data.OrderByDirection(state.SortDirection, o => o.Names.First().Substring(1))
    //     : containers.Data.Where(x => x.Names.First().Substring(1).Contains(searchString, StringComparison.OrdinalIgnoreCase));

    //     var totalItems = search.Count();
    //     // Get the paged data
    //     var pagedData = search.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
    //     // Return the data

    //     return new TableData<ContainerListResponse>() { TotalItems = totalItems, Items = pagedData };
    // }
}
