@using System.Net.WebSockets
@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject NotificationService Notifications
@inject IJSRuntime JS

<PageTitle>Docker Containers | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="ri:box-3-fill"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Containers</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Containers" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Containers
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Create Container" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Disabled="@(true || IsLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))" />
                <RadzenButton Variant="Variant.Filled" Text="Prune Containers" Icon="delete" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" Size="ButtonSize.Small" Click="@PruneContainers" Disabled="@(IsLoading || Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))" />
            </ActionBar>
            <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Start" Click="@(() => RunSelectedContainersAction(ControlContainerType.Start))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Stop" Click="@(() => RunSelectedContainersAction(ControlContainerType.Stop))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Restart" Click="@(() => RunSelectedContainersAction(ControlContainerType.Restart))" Icon="restart_alt" IconColor="@Colors.WarningDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Kill" Click="@(() => RunSelectedContainersAction(ControlContainerType.Kill))" Icon="bolt" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Pause" Click="@(() => RunSelectedContainersAction(ControlContainerType.Pause))" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Resume" Click="@(() => RunSelectedContainersAction(ControlContainerType.UnPause))" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlContainerType.Remove))" Icon="delete" Disabled="@(!AnySelected || IsLoading || !CanManageContainer)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshContainers" Disabled="@(IsLoading)" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search containers" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
            </div>
        </div>
        <RadzenDataGrid @ref="@Grid" Data="@ContainersList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No containers."
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                        GridLines="DataGridGridLines.Horizontal" @bind-Value="@SelectedContainers" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagingSummaryFormat="@(Count + " container" + (Count != 1 ? "s" : "") + $" - {CountDead} down" )"
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        TItem="DockerContainerInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
            <Columns>
                <RadzenDataGridColumn Width="36px" Frozen="true">
                    <HeaderTemplate>
                        <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                        Value="@(SelectedContainers == null || SelectedContainers?.Any() != true ? false : !ContainersList.All(i => SelectedContainers.Contains(i)) ? null : ContainersList.Any(i => SelectedContainers.Contains(i)))"
                                        Change="@(args => SelectedContainers = args == true ? (SelectedContainers != null && SelectedContainers.Any()) ? null : ContainersList.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedContainers != null && SelectedContainers.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(DockerContainerInfo.Name)">
                    <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + context.Id)" Text="@context.Name" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="100px" Property="@nameof(DockerContainerInfo.State)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @switch (context.State)
                        {
                            case "running":
                                @if (context.Status.EndsWith("(healthy)"))
                                {
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Healthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                }
                                else if (context.Status.EndsWith("(unhealthy)"))
                                {
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Unhealthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                }
                                else
                                {
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Running" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                }
                                break;
                            case "created":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Created" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                            case "restarting":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Restarting" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                            case "removing":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Removing" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                            case "paused":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Paused" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                            case "exited":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Exited" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                            case "dead":
                                <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                break;
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="120px" Filterable="false">
                    <Template>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="6px">
                            <RadzenButton Click="@(args => ShowContextMenuWithControlsItems(context, args))" Icon="power_settings_new" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(!CanControlContainer || IsLoading)" />
                            <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading)" />
                            @if (!string.IsNullOrEmpty(context.Url))
                            {
                                <a href="@context.Url" target="_blank"><RadzenButton Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Stack" Width="200px" Property="@nameof(DockerContainerInfo.StackName)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @if (!string.IsNullOrEmpty(context.StackId))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.StackId)" Text="@context.StackName" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Image" Width="280px" Property="@nameof(DockerContainerInfo.ImageName)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @if (!string.IsNullOrEmpty(context.ImageName) && context.ImageName.StartsWith("sha256:"))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName.Substring(7, 10)" />
                        }
                        else
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Created" Filterable="false" Width="90px">
                    <Template>
                        @Utils.GetLocalDate(Session, context.CreatedAt)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Internal IP" Property="@nameof(DockerContainerInfo.InternalIP)" Width="120px">
                    <Template>
                        @context.InternalIP
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Ports" Filterable="false" Width="120px">
                    <Template>
                        @if (context.Ports != null && context.Ports.Any())
                        {
                            @context.Ports.First().Key
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public bool CanManageContainer;
    public bool CanControlContainer;
    public bool CanViewLogs;
    public bool CanInspect;
    public bool CanViewStats;
    public bool CanViewChanges;
    public bool CanUseConsole;

    protected override void OnAfterRender(bool firstRender)
    {
        LoadPerms();
    }

    public void LoadPerms()
    {
        if (Member == null)
            return;

        CanManageContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers);
        CanControlContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers);
        CanViewLogs = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs);
        CanInspect = Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator);
        CanViewStats = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats);
        CanViewChanges = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges);
        CanUseConsole = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.UseContainerConsole);
    }

    SocketResponse<DockerContainerInfo[]?>? ContainersResponse = null;

    IQueryable<DockerContainerInfo>? ContainersList;
    public int Count = 0;
    public int CountDead = 0;
    IList<DockerContainerInfo>? SelectedContainers;
    public bool AnySelected => SelectedContainers != null ? SelectedContainers.Any() : false;
    RadzenDataGrid<DockerContainerInfo> Grid;
    public bool IsLoading = true;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        LoadPerms();
        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
            return;

        if (Program.IsPreviewMode)
        {
            ContainersList = new List<DockerContainerInfo>
             {
                 new DockerContainerInfo
                 {
                     Id = "devspace-demo",
                     Name = "devspace-demo",
                     State = "running",
                     Status = "Up 14 hours",
                     StackId = "64",
                     StackName = "devspace-demo",
                     CreatedAt = DateTime.UtcNow.AddDays(-3),
                     ImageId = "sha256:a24316da3958ca259f1d8f371809ff8c813684172a53ce39ed43428319a6c934",
                     ImageName = "mcr.microsoft.com/dotnet/aspnet:9.0"
                 },
             }.AsQueryable();
            Count = 1;
            CountDead = 0;
            IsLoading = false;
        }
        else
        {
            if (ContainersResponse == null)
            {
                IsLoading = true;
                try
                {
                    ContainersResponse = await Server.RunJsonAsync<DockerContainerInfo[]>(Notifications, new DockerEvent(DockerEventType.ListContainers));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;


            }

            if (ContainersResponse != null && ContainersResponse.IsSuccess && ContainersResponse.Data != null)
            {
                IQueryable<DockerContainerInfo> query = ContainersResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                CountDead = query.Count(x => !x.IsRunning());
                ContainersList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    void ShowContextMenuWithControlsItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Start", Value = "start", Icon = "power_settings_new", IconColor = Colors.SuccessDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem(){ Text = "Stop", Value = "stop", Icon = "stop", IconColor = Colors.DangerDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem(){ Text = "Restart", Value = "restart", Icon = "restart_alt", IconColor = Colors.WarningDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem(){ Text = "Kill", Value = "kill", Icon = "bolt", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem(){ Text = "Pause", Value = "pause", Icon = "pause", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem(){ Text = "Resume", Value = "resume", Icon = "play_arrow", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlContainer },
                new ContextMenuItem() { Text = "Remove", Value = "remove", Icon = "delete", IconColor = Colors.Danger, Disabled = IsLoading || !CanManageContainer }
                                 }, x => MenuItemClick(x, item));
    }

    void ShowContextMenuWithManageItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                // new ContextMenuItem(){ Text = "Config", Value = "config", Icon = "settings" },
                // new ContextMenuItem(){ Text = "Permissions", Value = "permissions", Icon = "shield_lock" },
                new ContextMenuItem() { Text = "View", Value = "view", Icon = "deployed_code" },
                new ContextMenuItem(){ Text = "Logs", Value = "logs", Icon = "description", Disabled = !CanViewLogs },
                new ContextMenuItem(){ Text = "Stats", Value = "stats", Icon = "bar_chart_4_bars", Disabled = !CanViewStats },
                new ContextMenuItem(){ Text = "Changes", Value = "changes", Icon = "topic", Disabled = !CanViewChanges },
                new ContextMenuItem(){ Text = "Inspect", Value = "inspect", Icon = "info", Disabled = !CanInspect },
                new ContextMenuItem() { Text = "Copy Container ID", Value = "copy", Icon = "content_copy" }
                                             }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerContainerInfo item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view" && args.Value.ToString() != "stats")
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "start":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Start));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "stop":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Stop));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "restart":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Restart));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "kill":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Kill));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "pause":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Pause));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "resume":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.UnPause));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "view":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id);
                    break;
                case "logs":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/logs");
                    break;
                case "inspect":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/inspect");
                    break;
                case "stats":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/stats");
                    break;
                case "changes":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/changes");
                    break;
                case "remove":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                        return;

                    bool Confirm = await Dialogs.ShowConfirmAsync("Remove Container: " + item?.Name,
                            item.IsRunning() ? "This container is running are you sure you want to remove it?" : "Are you sure you want to remove this container?", "Confirm", ButtonStyle.Success);

                    if (!Confirm)
                        return;

                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.ForceRemove));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "copy":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.Id);
                        }
                        catch { }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    async Task RunSelectedContainersAction(ControlContainerType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Server == null || Member == null || SelectedContainers == null)
            return;

        if (type == ControlContainerType.Remove || type == ControlContainerType.ForceRemove)
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return;

            if (SelectedContainers.Any(x => x.IsRunning()))
            {
                bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedContainers.Count} container" + (SelectedContainers.Count != 1 ? "s" : ""), (SelectedContainers.Count == 1 ? "This container is" : "Some containers are") + $" running would you like to force remove the selected container{(SelectedContainers.Count != 1 ? "s" : "")}.", "Confirm", ButtonStyle.Success);

                if (!Confirm)
                    return;

                type = ControlContainerType.ForceRemove;

                if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                    return;
            }
            else
            {
                bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedContainers.Count} container" + (SelectedContainers.Count != 1 ? "s" : ""),
                    $"Are you sure you want to remove {(SelectedContainers.Count == 1 ? "this container" : "these containers")}: " + string.Join(", ", SelectedContainers.Select(x => x.Name)), "Confirm", ButtonStyle.Success);

                if (!Confirm)
                    return;

                if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                    return;
            }

            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return;
        }
        else
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                return;
        }

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            foreach (DockerContainerInfo i in SelectedContainers)
            {
                await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, i.Id, type));
            }

            IsLoading = false;
            SelectedContainers = null;
            await InvokeAsync(RefreshContainers);
        });

    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

    async Task PruneContainers()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Prune Unused Containers", "Are you sure you want to remove unused containers that have stopped with no stacks.", "Confirm", ButtonStyle.Success);
        if (!Confirm)
            return;

        IsLoading = true;
        StateHasChanged();
        try
        {
            ContainersResponse = await Server.RunJsonAsync<DockerContainerInfo[]>(Notifications, new DockerEvent(DockerEventType.ListContainers));
        }
        catch (Exception ex)
        {
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }

        if (ContainersResponse != null && ContainersResponse.Data != null)
        {
            foreach (var i in ContainersResponse.Data)
            {
                if (string.IsNullOrEmpty(i.StackId) && (i.State == "exited" || i.State == "dead"))
                {
                    try
                    {
                        await Server.RecieveJsonAsync<object>(new DockerEvent(DockerEventType.ControlContainer, i.Name, containerType: ControlContainerType.Remove));
                    }
                    catch { }
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
        await RefreshContainers();
    }

    public async Task RefreshContainers()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        ContainersResponse = null;
        await Grid.RefreshDataAsync();
    }
}
