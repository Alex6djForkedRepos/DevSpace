@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Components.Dialogs.Docker
@inject NotificationService Notifications
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject NavigationManager Nav
@inject DialogService Dialogs
@inject IJSRuntime JS

@if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
{
    <PageTitle>Stack Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box">
        <div class="dash-box-header dash-box-content">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="ri:stack-fill"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Stack Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important;">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/stacks")" Text="Stacks" />
            <RadzenBreadCrumbItem Text="@StackId" />
        </RadzenBreadCrumb>
        <br />
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Stacks
        </RadzenAlert>
    </div>
}
else
{
    <PageTitle>@(Stack?.Name ?? StackId) Stack | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <iconify-icon icon="ri:stack-fill"></iconify-icon>
                <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Stack Info</RadzenText>
            @if (IsLoading)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/stacks")" Text="Stacks" />
            <RadzenBreadCrumbItem Text="@(Stack?.Name ?? StackId)" />
        </RadzenBreadCrumb>
        @if (Stack != null && Stack.ControlType == DockerStackControl.Full)
        {
            <br />
            <ActionBar>
                <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Start" Click="@(() => RunStackAction(ControlStackType.Start))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Stop" Click="@(() => RunStackAction(ControlStackType.Stop))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Restart" Click="@(() => RunStackAction(ControlStackType.Restart))" Icon="restart_alt" IconColor="@Colors.WarningDark" Disabled="@(IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Pause" Click="@(() => RunStackAction(ControlStackType.Pause))" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Resume" Click="@(() => RunStackAction(ControlStackType.Start))" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunStackAction(ControlStackType.Remove))" Icon="delete" Disabled="@(!CanManageStacks || IsLoading)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            </ActionBar>
        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><iconify-icon icon="mdi:information"></iconify-icon></div>
            <RadzenText TextStyle="TextStyle.H6">Info</RadzenText>
        </div>
        @if (Stack != null && Stack.ControlType != DockerStackControl.Full)
        {
            <div class="dash-box-content">
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Darker" AllowClose="false" Size="AlertSize.Small">
                    This stack is managed by the System or Portainer, some features may be limited.
                </RadzenAlert>
            </div>
        }
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Stack.Name
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        ID
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Stack.Id
                            <CopyClipboard Value="@Stack.Id"></CopyClipboard>
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                @if (Stack != null && Stack.ControlType != DockerStackControl.System)
                {
                    <RadzenTableRow>
                        <RadzenTableCell>
                            Compose
                        </RadzenTableCell>
                        <RadzenTableCell>
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="6px" Wrap="FlexWrap.Wrap">
                                @if (Stack.ControlType == DockerStackControl.Full)
                                {
                                    <RadzenButton Icon="wysiwyg" Variant="Variant.Text" Text="View" Click="@ViewCompose" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))" />
                                    <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/stacks/" + StackId + "/edit")"><RadzenButton Icon="edit" Variant="Variant.Text" Text="Edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))" /></a>
                                }
                                else
                                {
                                    <RadzenButton Icon="wysiwyg" Variant="Variant.Text" Text="View" Click="@ViewCompose" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Disabled="@(!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))" />
                                }
                            </RadzenStack>
                        </RadzenTableCell>
                    </RadzenTableRow>
                }

                <RadzenTableRow>
                    <RadzenTableCell>
                        Type
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Stack.Type.ToString()
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Control
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Stack.ControlType.ToString()
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Stack.Version
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Created
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @Utils.GetLocalDate(Session, Stack.CreatedAt)
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Updated
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (Stack == null)
                        {
                            <RadzenSkeleton></RadzenSkeleton>
                        }
                        else
                        {
                            @if (Stack.UpdatedAt.HasValue)
                            {
                                @Utils.GetLocalDate(Session, Stack.UpdatedAt)
                            }
                        }
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    @if (Stack != null)
    {
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><iconify-icon icon="ri:box-3-fill"></iconify-icon></div>
                <RadzenText TextStyle="TextStyle.H6">Containers</RadzenText>
            </div>
            <br />
            <ActionBar>
                <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Start" Click="@(() => RunSelectedContainersAction(ControlContainerType.Start))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: var(--rz-button-border-radius) 0 0 var(--rz-button-border-radius) !important;" />
                <RadzenButton Variant="Variant.Outlined" Text="Stop" Click="@(() => RunSelectedContainersAction(ControlContainerType.Stop))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Restart" Click="@(() => RunSelectedContainersAction(ControlContainerType.Restart))" Icon="restart_alt" IconColor="@Colors.WarningDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Kill" Click="@(() => RunSelectedContainersAction(ControlContainerType.Kill))" Icon="bolt" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Pause" Click="@(() => RunSelectedContainersAction(ControlContainerType.Pause))" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton Variant="Variant.Outlined" Text="Resume" Click="@(() => RunSelectedContainersAction(ControlContainerType.UnPause))" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsLoading || !CanControlStacks)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlContainerType.Remove))" Icon="delete" Disabled="@(!AnySelected || IsLoading || !CanManageStacks)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: 0 var(--rz-button-border-radius) var(--rz-button-border-radius) 0 !important; margin-right: 4px !important;" />
                <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshContainers" Disabled="@IsLoading" />
                <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" Placeholder="Search containers" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
            </ActionBar>
            <RadzenDataGrid class="mt-4" @ref="@Grid" Data="@ContainersList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                            Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No containers."
                            PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                            @bind-Value="@SelectedContainers" SelectionMode="DataGridSelectionMode.Multiple"
                            ShowPagingSummary="true" PagingSummaryFormat="@(Count + " container" + (Count != 1 ? "s" : "") + $" - {CountDead} down" )"
                            AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TItem="DockerContainerInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
                <Columns>
                    <RadzenDataGridColumn Width="36px" Frozen="true">
                        <HeaderTemplate>
                            <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                            Value="@(SelectedContainers == null || SelectedContainers?.Any() != true ? false : ContainersList != null && !ContainersList.All(i => SelectedContainers.Contains(i)) ? null : ContainersList != null && ContainersList.Any(i => SelectedContainers.Contains(i)))"
                                            Change="@(args => SelectedContainers = args == true ? (SelectedContainers != null && SelectedContainers.Any()) ? null : ContainersList?.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedContainers != null && SelectedContainers.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                            TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Name" Width="@GridWidth.Name" Frozen="true" Property="@nameof(DockerContainerInfo.Name)">
                        <Template>
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + context.Id)" Text="@context.Name" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Status" Width="@GridWidth.Type" Property="@nameof(DockerContainerInfo.State)" FilterMode="FilterMode.CheckBoxList">
                        <Template>
                            @switch (context.State)
                            {
                                case "running":
                                    @if (context.Status.EndsWith("(healthy)"))
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Healthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    else if (context.Status.EndsWith("(unhealthy)"))
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Unhealthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Running" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    break;
                                case "created":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Created" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "restarting":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Restarting" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "removing":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Removing" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "paused":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Paused" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "exited":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Exited" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "dead":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsThree" Filterable="false">
                        <Template>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="6px">
                                <RadzenButton Click="@(args => ShowContextMenuWithControlsItems(context, args))" Icon="power_settings_new" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(!CanControlStacks || IsLoading)" />
                                <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                                @if (!string.IsNullOrEmpty(context.Url))
                                {
                                    <a href="@context.Url" target="_blank" @onclick="@(() => Session.ConfirmOpenTab(context.Url))" @onclick:preventDefault="true"><RadzenButton Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                                }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Image" Width="280px" Property="@nameof(DockerContainerInfo.ImageName)" FilterMode="FilterMode.CheckBoxList">
                        <Template>
                            @if (!string.IsNullOrEmpty(context.ImageName) && context.ImageName.StartsWith("sha256:"))
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName.Substring(7, 10)" />
                            }
                            else
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Created" Filterable="false">
                        <Template>
                            @Utils.GetLocalDate(Session, context.CreatedAt)
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>

        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><iconify-icon icon="mdi:storage"></iconify-icon></div>
                <RadzenText TextStyle="TextStyle.H6">Volumes</RadzenText>
            </div>
            <br />
            <RadzenDataGrid AllowRowSelectOnRowClick="false" Data="@Stack.Volumes" AllowPaging="true" PageSize="15"
                            PagerHorizontalAlign="HorizontalAlign.Center" GridLines="DataGridGridLines.Horizontal"
                            AllowSorting="false" EmptyText="No volumes."
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
                <Columns>
                    <RadzenDataGridColumn Title="Type" Width="100px">
                        <Template>
                            @switch (context.Type)
                            {
                                case "bind":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" Style="height: 100%;">
                                            <RadzenIcon Icon="directory_sync" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Bind
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "volume":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal">
                                            <RadzenIcon Icon="folder" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Volume
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "tmpfs":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal">
                                            <RadzenIcon Icon="folder_delete" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Temp
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "npipe":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal">
                                            <RadzenIcon Icon="settings" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Named Pipe
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                                case "cluster":
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal">
                                            <RadzenIcon Icon="cloud" Style="font-variation-settings: 'FILL' 1;"></RadzenIcon>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                Cluster
                                            </RadzenText>
                                        </RadzenStack>
                                    }
                                    break;
                            }

                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Source" Width="300px">
                        <Template>
                            @if (context.Type == "volume")
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/volumes/" + context.Name)">@context.Name</RadzenLink>
                            }
                            else
                            {
                                @context.Source
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Destination" Width="300px">
                        <Template>
                            @context.Destination
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn>
                        <Template>
                            @if (context.RW)
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read & Write" IsPill="true" />
                            }
                            else
                            {
                                <RadzenBadge Shade="Shade.Darker" BadgeStyle="BadgeStyle.Info" Text="Read-only" IsPill="true" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>

        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><iconify-icon icon="mdi:local-area-network"></iconify-icon></div>
                <RadzenText TextStyle="TextStyle.H6">Networks</RadzenText>
            </div>
            <br />
            <RadzenDataGrid AllowRowSelectOnRowClick="false" Data="@Stack.Networks"
                            PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                            AllowSorting="false" EmptyText="No networks."
                            AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
                <Columns>
                    <RadzenDataGridColumn Title="Name" Width="240px" Frozen="true" Filterable="false">
                        <Template>
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/networks/" + context.Id)">@context.Name</RadzenLink>
                            @if (context.IsNetworkSystem())
                            {
                                <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Info" Text="System" class="ml-2" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="IP Address" Width="100px">
                        <Template>
                            @context.IPAddress
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Gateway" Width="100px">
                        <Template>
                            @context.Gateway
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="MAC Address" Width="160px">
                        <Template>
                            @context.MacAddress
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn>
                        <Template>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        </div>
    }
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Resource as ServerData;

    [Parameter]
    public required string StackId { get; set; }

    public DockerStackInfo? Stack { get; set; }
    public bool IsLoading { get; set; } = true;

    public bool CanControlStacks;
    public bool CanManageStacks;
    public bool CanViewLogs;
    public bool CanInspect;
    public bool CanViewStats;
    public bool CanViewChanges;
    public bool CanUseConsole;

    protected override void OnAfterRender(bool firstRender)
    {
        LoadPerms();
    }

    public void LoadPerms()
    {
        if (Member == null)
            return;

        CanManageStacks = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks);
        CanControlStacks = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks);
        CanViewLogs = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs);
        CanInspect = Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator);
        CanViewStats = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats);
        CanViewChanges = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges);
        CanUseConsole = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.UseContainerConsole);
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshContainers();
    }

    public async Task ViewCompose()
    {
        if (Server == null || Member == null || Team == null || Stack == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
            return;

        SocketResponse<DockerStackComposeInfo?> Result = await Server.RunJsonAsync<DockerStackComposeInfo, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, StackId, stackType: ControlStackType.ComposeInfo));
        if (!Result.IsSuccess || Result.Data == null)
            return;

        await Dialogs.OpenAsync<StackComposeViewDialog>("Stack Compose", new Dictionary<string, object?>()
        {
            { "StackName", Stack.Name },
            { "Compose", Result.Data.Content }
        });
    }

    public async Task RefreshContainers()
    {
        if (Member == null || Server == null)
            return;

        LoadPerms();
        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
            return;

        if (Program.IsPreviewMode && StackId != "64")
        {
            IsLoading = false;
            return;
        }

        IsLoading = true;
        try
        {
            SocketResponse<DockerStackInfo?> Result = await Server.RunJsonAsync<DockerStackInfo, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, StackId, stackType: ControlStackType.View));
            Stack = Result.Data;
            if (Stack != null && Program.IsPreviewMode && StackId == "64")
            {
                Stack.ControlType = DockerStackControl.Full;
                Stack.Volumes.Clear();
                Stack.Containers.RemoveWhere(x => x.Name == "devspace-mongodb");
                Stack.Containers.First().Id = "devspace-demo";
                Stack.Networks = new HashSet<DockerContainerNetwork>
                {
                    new DockerContainerNetwork
                    {
                        Id = "d38254f7c4f952d6cc32c059e3aaf5993c304163880d179c14de81e60eecbb0c",
                        Name = "devspace_demo_network",
                        IPAddress = "172.21.0.2/16",
                        MacAddress = "02:42:ac:15:00:02"
                    }
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }

        if (ContainersList != null)
            await Grid.RefreshDataAsync();


    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
            return;

        if (Program.IsPreviewMode && StackId != "64")
        {
            IsLoading = false;
            return;
        }

        if (Stack != null)
        {
            IQueryable<DockerContainerInfo> query = Stack.Containers.AsQueryable();

            if (!string.IsNullOrEmpty(args.Filter))
                query = query.Where(args.Filter);

            if (!string.IsNullOrEmpty(args.OrderBy))
                query = query.OrderBy(args.OrderBy);

            Count = query.Count();
            CountDead = query.Count(x => !x.IsRunning());
            ContainersList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
        }
        IsLoading = false;
    }

    IQueryable<DockerContainerInfo>? ContainersList;
    public int Count = 0;
    public int CountDead = 0;
    IList<DockerContainerInfo>? SelectedContainers;
    public bool AnySelected => SelectedContainers != null ? SelectedContainers.Any() : false;
    RadzenDataGrid<DockerContainerInfo> Grid = null!;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    void ShowContextMenuWithControlsItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Start", Value = "start", Icon = "power_settings_new", IconColor = Colors.SuccessDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem(){ Text = "Stop", Value = "stop", Icon = "stop", IconColor = Colors.DangerDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem(){ Text = "Restart", Value = "restart", Icon = "restart_alt", IconColor = Colors.WarningDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem(){ Text = "Kill", Value = "kill", Icon = "bolt", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem(){ Text = "Pause", Value = "pause", Icon = "pause", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem(){ Text = "Resume", Value = "resume", Icon = "play_arrow", IconColor = Colors.InfoDark, Disabled = IsLoading || !CanControlStacks },
                new ContextMenuItem() { Text = "Remove", Value = "remove", Icon = "delete", IconColor = Colors.Danger, Disabled = IsLoading || !CanManageStacks }
                                 }, x => MenuItemClick(x, item));
    }

    void ShowContextMenuWithManageItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                // new ContextMenuItem(){ Text = "Config", Value = "config", Icon = "settings" },
                // new ContextMenuItem(){ Text = "Permissions", Value = "permissions", Icon = "shield_lock" },
                new ContextMenuItem() { Text = "View", Value = "view", Icon = "deployed_code" },
                new ContextMenuItem(){ Text = "Logs", Value = "logs", Icon = "description", Disabled = !CanViewLogs },
                new ContextMenuItem(){ Text = "Stats", Value = "stats", Icon = "bar_chart_4_bars", Disabled = !CanViewStats },
                new ContextMenuItem(){ Text = "Changes", Value = "changes", Icon = "topic", Disabled = !CanViewChanges },
                new ContextMenuItem(){ Text = "Inspect", Value = "inspect", Icon = "info", Disabled = !CanInspect },
                new ContextMenuItem() { Text = "Copy Container ID", Value = "copy", Icon = "content_copy" }
                                             }, x => MenuItemClick(x, item));
    }



    void MenuItemClick(MenuItemEventArgs args, DockerContainerInfo item)
    {
        ContextMenuService.Close();
        if (Program.IsPreviewMode && args.Value.ToString() != "view" && args.Value.ToString() != "stats")
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "start":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Start));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "stop":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Stop));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "restart":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Restart));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "kill":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Kill));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "pause":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Pause));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "resume":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.UnPause));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "view":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + item.Id);
                    break;
                case "logs":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + item.Id + "/logs");
                    break;
                case "inspect":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + item.Id + "/inspect");
                    break;
                case "stats":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + item.Id + "/stats");
                    break;
                case "changes":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Resource?.VanityUrl + "/containers/" + item.Id + "/changes");
                    break;
                case "remove":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                        return;

                    bool Confirm = await Dialogs.ShowConfirmAsync("Remove Container: " + item?.Name, item!.IsRunning() ?
                        "This container is still running, are you sure you want to remove it?." :
                        "Are you sure you want to remove this container?", "Confirm", ButtonStyle.Success);

                    if (!Confirm)
                        return;

                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                        return;

                    IsLoading = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Remove));
                    IsLoading = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "copy":
                    {
                        await JS.CopyTextAsync(item.Id);
                    }
                    break;
            }
        });
    }

    async Task RunSelectedContainersAction(ControlContainerType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedContainers == null)
            return;

        LoadPerms();

        if (type == ControlContainerType.Remove || type == ControlContainerType.ForceRemove)
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                return;

            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedContainers.Count()} container" + (SelectedContainers.Count() > 1 ? "s" : ""),
            SelectedContainers.Any(x => x.IsRunning) ? "Some containers are still running, are you sure you want to remove?" :
            "Are you sure you want to remove containers?", "Confirm", ButtonStyle.Success);

            type = ControlContainerType.ForceRemove;

            if (!Confirm)
                return;

            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                return;
        }
        else
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                return;
        }

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            foreach (DockerContainerInfo i in SelectedContainers)
            {
                await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlContainer, i.Id, type));
            }
            IsLoading = false;
            SelectedContainers = null;
            await InvokeAsync(RefreshContainers);
        });

    }

    async Task RunStackAction(ControlStackType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        LoadPerms();

        if (type == ControlStackType.Remove)
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                return;

            bool Confirm = await Dialogs.ShowConfirmAsync("Remove Stack: " + Stack?.Name, 
            "Are you sure you want to remove this stack?", "Confirm", ButtonStyle.Success);

            if (!Confirm)
                return;

            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageStacks))
                return;
        }
        else
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlStacks))
                return;            
        }

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, StackId, stackType: type));
            IsLoading = false;
            await InvokeAsync(RefreshContainers);
        });

    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);

}
