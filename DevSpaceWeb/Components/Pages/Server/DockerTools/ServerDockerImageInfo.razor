@using BlazorMonaco.Editor
@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@inject NotificationService Notifications
@inject DialogService Dialogs

@if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@ImageId" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Images
        </RadzenAlert>
    </div>
}
else if (Image == null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@ImageId" />
        </RadzenBreadCrumb>
        @if (IsActionLoading)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Image has been removed.
            </RadzenAlert>
        }
        else if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get image info.
            </RadzenAlert>
        }
    </div>
}
else
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@GetName()" />
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" Wrap="FlexWrap.Wrap">
                            <RadzenText TextStyle="TextStyle.Body2" class="mt-2">@GetName()</RadzenText>
                            <RadzenSplitButton Text="Remove" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Darker" Click="((args) => Remove(args?.Text))" Size="ButtonSize.Small" Disabled="@(IsActionLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))">
                                <ChildContent>
                                    <RadzenSplitButtonItem Text="Force Remove" Style="cursor: pointer;" />
                                </ChildContent>
                            </RadzenSplitButton>
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Version
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        ID
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.ID
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Comment
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Comment
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Created
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Utils.GetLocalDate(Session, Image.Created)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Size
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Utils.SizeSuffix(Image.Size)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Docker
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Image.DockerVersion))
                        {
                            @("Version " + Image.DockerVersion)

                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        OS
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Os, @Image.Architecture
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Driver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Parent
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Image.Parent))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + Image.Parent)">@Image.Parent</RadzenLink>
                        }
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:tag"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Tags</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                @if (Image.RepoTags != null)
                {
                    foreach (var i in Image.RepoTags)
                    {
                        <RadzenTableRow>
                            <RadzenTableCell>
                                @i
                            </RadzenTableCell>
                        </RadzenTableRow>
                    }
                }
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:file-document"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Dockerfile</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Command
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.Command
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Entrypoint
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.Entrypoint

                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Working Directory
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.WorkingDirectory
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Ports
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Gap="8px" Orientation="Orientation.Horizontal">
                            @if (Image.Config != null && Image.Config.ExposedPorts != null)
                            {
                                @foreach (var i in Image.Config.ExposedPorts)
                                {
                                    <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Base" Shade="Shade.Dark" Text="@i" />
                                }
                            }
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:view-list"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Environment</RadzenText>
        </div>
        <br />
        @if (ShowEnvironment)
        {
            @if (Image.Config != null && Image.Config.Entrypoint != null)
            {
                foreach (var i in ParseEnvironment(Image.Config.Environment!))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @i.Value
                    </RadzenText>
                    <br />
                }
            }
        }
        else
        {
            <RadzenText TextStyle="TextStyle.Body2">Environment is hidden by default</RadzenText>
            <RadzenButton Text="Show Environment" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@(() => ShowEnvironment = true)" />

        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:tag"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Labels</RadzenText>
        </div>
        <br />
        @if (Image.Config != null && Image.Config.Labels != null)
        {
            foreach (var i in Image.Config.Labels)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @i.Value
                </RadzenText>
                <br />
            }
        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:format-list-numbered"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Layers</RadzenText>
        </div>
        <br />
        @if (ShowLayers)
        {
            <RadzenTabs RenderMode="TabRenderMode.Server">
                <Tabs>
                    <RadzenTabsItem Text="List">
                        <RadzenTable GridLines="DataGridGridLines.Horizontal" AllowAlternatingRows="false" class="table-properties">
                            <RadzenTableHeader>
                                <RadzenTableHeaderRow>
                                    <RadzenTableHeaderCell Style="width: 60px !important;">
                                        Order
                                    </RadzenTableHeaderCell>
                                    <RadzenTableHeaderCell Style="width: 100px !important;">
                                        Size
                                    </RadzenTableHeaderCell>
                                    <RadzenTableHeaderCell>
                                        Data
                                    </RadzenTableHeaderCell>
                                </RadzenTableHeaderRow>
                            </RadzenTableHeader>
                            <RadzenTableBody>
                                @if (Layers != null)
                                {
                                    @for (var i = 0; i < Layers.Count(); i++)
                                    {
                                        var col = i;
                                        <RadzenTableRow>
                                            <RadzenTableCell>
                                                @col
                                            </RadzenTableCell>
                                            <RadzenTableCell>
                                                @Utils.SizeSuffix(Layers[col].Size)
                                            </RadzenTableCell>
                                            <RadzenTableCell>
                                                @Layers[col].CreatedBy
                                            </RadzenTableCell>
                                        </RadzenTableRow>
                                    }
                                }
                            </RadzenTableBody>
                        </RadzenTable>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="File">
                        <StandaloneCodeEditor @ref="_editor" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" OnDidInit="@SetLayerFile" />
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>

        }
        else
        {
            <RadzenText TextStyle="TextStyle.Body2">Layers is hidden by default</RadzenText>
            <RadzenButton Text="Show Layers" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@(() => ShowLayers = true)" />

        }
    </div>
}

<style>
    .monaco-editor, .monaco-diff-editor {
        height: 400px !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public required string ImageId { get; set; }

    DockerImageInfo? Image { get; set; }
    public bool Failed { get; set; }

    List<ImageHistoryResponse>? Layers { get; set; }

    public bool ShowEnvironment { get; set; }
    public bool ShowLayers { get; set; }

    public List<KeyValuePair<string, string?>> ParseEnvironment(IList<string> variables)
    {
        List<KeyValuePair<string, string?>> List = new List<KeyValuePair<string, string?>>();
        foreach (var i in variables)
        {
            string[] Split = i.Split('=');
            if (Split.Length == 1)
                List.Add(new KeyValuePair<string, string?>(Split[0], null));
            else
                List.Add(new KeyValuePair<string, string?>(Split[0], Split[1]));
        }
        return List;
    }

    public string GetName()
    {
        string Name = "Unknown";
        if (Image == null)
            return Name;

        if (Image.RepoTags != null && Image.RepoTags.Any())
            Name = Image.RepoTags.First().Split(':').First();
        else if (Image.RepoDigests != null && Image.RepoDigests.Any())
            Name = Image.RepoDigests.First().Split('@').First();

        return Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
            return;

        try
        {
            var Result = await Server.RunJsonAsync<DockerImageInfo>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: ControlImageType.View));
            Failed = !Result.IsSuccess;
            Image = Result.Data;
            if (Result.IsSuccess)
            {
                await Server.RunJsonAsync<List<ImageHistoryResponse>>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: ControlImageType.Layers), (reseponse) =>
                {
                    reseponse.Data.Reverse();
                    Layers = reseponse.Data;
                });
            }
            else
            {
                Layers = null;
            }
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    private StandaloneCodeEditor _editor = null!;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "dockerfile",
            Theme = "vs-dark",
            ScrollBeyondLastLine = false,
            ColumnSelection = true,
            Folding = false,
            ReadOnly = true,
            WordWrap = "on"
        };

    }

    public async Task SetLayerFile()
    {
        if (Layers != null)
        {
            var Model = await _editor.GetModel();
            await Model.SetValue(string.Join("\n\n", Layers.Select(x => x.CreatedBy)));
        }
    }

    public bool IsActionLoading { get; set; }

    public async Task Remove(string? option)
    {
        if (string.IsNullOrEmpty(option))
            option = "Remove";

        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync(option + " Image", $"Are you sure you want to {option.ToLower()} this image?", "Yes", ButtonStyle.Success);
        if (Confirm)
        {
            if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
                return;

            IsActionLoading = true;

            var Result = await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: option == "Force Remove" ? ControlImageType.ForceRemove : ControlImageType.Remove));
            if (Result.IsSuccess)
                Image = null;
        }
    }
}
