@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using Docker.DotNet.Models
@using Newtonsoft.Json.Linq
@using System.Linq.Dynamic.Core
@inject NotificationService Notifications
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject NavigationManager Nav
@inject TooltipService tooltipService
@inject IJSRuntime JS

@if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
{
    <PageTitle>Image Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@ImageId" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Images
        </RadzenAlert>
    </div>
}
else if (Image == null)
{
    <PageTitle>Image Info | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@ImageId" />
        </RadzenBreadCrumb>
        @if (IsActionLoading)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Image has been removed.
            </RadzenAlert>
        }
        else if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get image info.
            </RadzenAlert>
        }
    </div>
}
else
{
    <PageTitle>@GetName() Image | @_Data.Config.Instance.Name</PageTitle>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:folder-image"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Image Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images")" Text="Images" />
            <RadzenBreadCrumbItem Text="@GetName()" />
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.Body2">@GetName()</RadzenText>
                            <RadzenSplitButton Text="Remove" Icon="delete" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Darker" Click="((args) => Remove(args?.Text))" Size="ButtonSize.Small" Disabled="@(IsActionLoading || !Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))">
                                <ChildContent>
                                    <RadzenSplitButtonItem Text="Force Remove" Style="cursor: pointer;" />
                                </ChildContent>
                            </RadzenSplitButton>
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Version
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Image.AltVersion))
                        {
                            if (!string.IsNullOrEmpty(Image.Version))
                            {
                                @($"{Image.Version} ({Image.AltVersion})")
                            }
                            else
                            {
                                @Image.AltVersion
                            }
                        }
                        else
                        {
                            @Image.Version
                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        ID
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.ID
                        <CopyClipboard Value="@Image.ID"></CopyClipboard>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Description
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Description
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Links
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="6px" Wrap="FlexWrap.Wrap">
                            @if (!string.IsNullOrEmpty(Image.Website) && Image.Website != Image.Source)
                            {
                                <a href="@Image.Website" target="_blank"><RadzenButton Text="Website" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                            @if (!string.IsNullOrEmpty(Image.Docs))
                            {
                                <a href="@Image.Docs" target="_blank"><RadzenButton Text="Docs" Icon="book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                            @if (!string.IsNullOrEmpty(Image.Source))
                            {
                                <a href="@Image.Source" target="_blank"><RadzenButton Text="Source" Icon="code" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Created
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Utils.GetLocalDate(Session, Image.Created)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Size
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Utils.SizeSuffix(Image.Size)
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Parent
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Image.Parent))
                        {
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + Image.Parent)">@Image.Parent</RadzenLink>
                        }
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:tag"></span></div>
                <RadzenText TextStyle="TextStyle.H6">Tags</RadzenText>
            </div>
            <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
                <RadzenTableBody>
                    @if (Image.RepoTags != null)
                    {
                            foreach (string i in Image.RepoTags)
                            {
                                    <RadzenTableRow>
                                        <RadzenTableCell>
                                            @i
                                        </RadzenTableCell>
                                    </RadzenTableRow>
                            }
                    }
                </RadzenTableBody>
            </RadzenTable>
        </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:view-list"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Details</RadzenText>
        </div>
        <br />
        <RadzenTabs RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="Info">
                    <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Command
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.Command
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Entrypoint
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.Entrypoint

                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Working Directory
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Config?.WorkingDirectory
                    </RadzenTableCell>
                </RadzenTableRow>

                    <RadzenTableRow>
                        <RadzenTableCell>
                            Driver
                        </RadzenTableCell>
                        <RadzenTableCell>
                            @Image.Driver
                        </RadzenTableCell>
                    </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Ports
                    </RadzenTableCell>
                    <RadzenTableCell>
                        <RadzenStack Gap="8px" Orientation="Orientation.Horizontal">
                            @if (Image.Config != null && Image.Config.ExposedPorts != null)
                            {
                                @foreach (string i in Image.Config.ExposedPorts)
                                {
                                    <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Base" Shade="Shade.Dark" Text="@i" />
                                }
                            }
                        </RadzenStack>
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Build">
                    <RadzenTable GridLines="DataGridGridLines.Horizontal" class="table-properties">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Comment
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Comment
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Docker
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @if (!string.IsNullOrEmpty(Image.DockerVersion))
                        {
                            @("Version " + Image.DockerVersion)

                        }
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        OS
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Image.Os (@Image.Architecture)
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
                </RadzenTabsItem>
                @if (Image.Config != null && Image.Config.Labels != null && Image.Config.Labels.Any())
                {
                    <RadzenTabsItem Text="Labels">
                    @foreach (KeyValuePair<string, string> i in Image.Config.Labels)
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2">
                            @i.Value
                        </RadzenText>
                        <br />
                    }
                    </RadzenTabsItem>
                }
                @if (Image.Config != null && Image.Config.Environment != null && Image.Config.Environment.Any())
                {
                    <RadzenTabsItem Text="Environment">
                        @if (ShowEnvironment)
                        {
                            foreach (KeyValuePair<string, string?> i in ParseEnvironment(Image.Config.Environment!))
                            {
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @i.Value
                                </RadzenText>
                                <br />
                            }
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body2">Environment is hidden by default</RadzenText>
                            <RadzenButton Text="Show Environment" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@(() => ShowEnvironment = true)" />
                        }
                    </RadzenTabsItem>
                }
             </Tabs>
        </RadzenTabs>
    </div>

    <div class="dash-box">
        <div class="dash-box-header dash-box-content">
            <div class="dash-box-icon">
                <span class="iconify" data-icon="ri:box-3-fill"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Containers</RadzenText>
            @if ((IsLoading || IsActionRunning) && Member != null && Member != null && Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>

        @if (Member == null || !Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
        {
            <div class="dash-box-content">
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    You do not have permission for View Containers
                </RadzenAlert>
            </div>
        }
        else
        {
            <div class="dash-box-content">
                <ActionBar>
                    <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Start" Click="@(() => RunSelectedContainersAction(ControlContainerType.Start))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: var(--rz-button-border-radius) 0 0 var(--rz-button-border-radius) !important;" />
                    <RadzenButton Variant="Variant.Outlined" Text="Stop" Click="@(() => RunSelectedContainersAction(ControlContainerType.Stop))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Restart" Click="@(() => RunSelectedContainersAction(ControlContainerType.Restart))" Icon="restart_alt" IconColor="@Colors.WarningDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Kill" Click="@(() => RunSelectedContainersAction(ControlContainerType.Kill))" Icon="bolt" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Pause" Click="@(() => RunSelectedContainersAction(ControlContainerType.Pause))" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Resume" Click="@(() => RunSelectedContainersAction(ControlContainerType.UnPause))" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!AnySelected || IsActionRunning || !CanControlContainer)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlContainerType.Remove))" Icon="delete" Disabled="@(!AnySelected || IsActionRunning || !CanManageContainer)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: 0 var(--rz-button-border-radius) var(--rz-button-border-radius) 0 !important; margin-right: 4px !important;" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshContainers" Disabled="@IsLoading" />
                    <RadzenFormField Variant="Variant.Outlined">
                    <Start>
                        <RadzenIcon Icon="search" />
                    </Start>
                    <ChildContent>
                        <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                       autocapitalize="none" MaxLength="100" inputmode="search"
                                       @oninput="@(args => SetNameFilter(args.Value as string))" />
                    </ChildContent>
                    <End>
                        @if (!string.IsNullOrWhiteSpace(SearchText))
                        {
                            <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                        }
                    </End>
                </RadzenFormField>
                </ActionBar>
            </div>
            <RadzenDataGrid @ref="@Grid" Data="@ContainersList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                            Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No containers."
                            PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                            @bind-Value="@SelectedContainers" SelectionMode="DataGridSelectionMode.Multiple"
                            ShowPagingSummary="true" PagingSummaryFormat="@(Count + " container" + (Count != 1 ? "s" : "") + $" - {CountDead} down" )"
                            AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TItem="DockerContainerInfo" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
                <Columns>
                    <RadzenDataGridColumn Width="36px" Frozen="true">
                        <HeaderTemplate>
                            <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                            Value="@(SelectedContainers == null || SelectedContainers?.Any() != true ? false : !ContainersList.All(i => SelectedContainers.Contains(i)) ? null : ContainersList.Any(i => SelectedContainers.Contains(i)))"
                                            Change="@(args => SelectedContainers = args == true ? (SelectedContainers != null && SelectedContainers.Any()) ? null : ContainersList.ToList() : null)" Disabled="@IsActionRunning" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedContainers != null && SelectedContainers.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                            TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsActionRunning" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(DockerContainerInfo.Name)">
                        <Template>
                            <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + context.Id)" Text="@context.Name" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Status" Width="100px" Property="@nameof(DockerContainerInfo.State)" FilterMode="FilterMode.CheckBoxList">
                        <Template>
                            @switch (context.State)
                            {
                                case "running":
                                    @if (context.Status.EndsWith("(healthy)"))
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Healthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    else if (context.Status.EndsWith("(unhealthy)"))
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Unhealthy" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Running" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    }
                                    break;
                                case "created":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Created" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "restarting":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Restarting" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "removing":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Secondary" Text="Removing" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "paused":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Info" Text="Paused" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "exited":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Exited" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                                case "dead":
                                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Down" IsPill="true" MouseEnter="@(args => ShowUptimeTooltip(args, context.Status))" />
                                    break;
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Actions" Width="100px" Filterable="false">
                        <Template>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenButton Click="@(args => ShowContextMenuWithControlsItems(context, args))" Icon="power_settings_new" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(!CanControlContainer || IsActionRunning)" />
                                <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Stack" Width="160px" Property="@nameof(DockerContainerInfo.StackName)" FilterMode="FilterMode.CheckBoxList">
                        <Template>
                            @if (!string.IsNullOrEmpty(context.StackId))
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/stacks/" + context.StackId)" Text="@context.StackName" />
                            }

                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Image" Width="280px" Filterable="false">
                        <Template>
                            @if (!string.IsNullOrEmpty(context.ImageName) && context.ImageName.StartsWith("sha256:"))
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName.Substring(7, 10)" />
                            }
                            else
                            {
                                <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/images/" + context.ImageId)" Text="@context.ImageName" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Created" Filterable="false">
                        <Template>
                            @Utils.GetLocalDate(Session, context.CreatedAt)
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:format-list-numbered"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Layers</RadzenText>
        </div>
        <br />
        @if (ShowLayers)
        {
            <RadzenTabs RenderMode="TabRenderMode.Server">
                <Tabs>
                    <RadzenTabsItem Text="List">
                        <RadzenTable GridLines="DataGridGridLines.Horizontal" AllowAlternatingRows="false" class="table-properties">
                            <RadzenTableHeader>
                                <RadzenTableHeaderRow>
                                    <RadzenTableHeaderCell Style="width: 60px !important;">
                                        Order
                                    </RadzenTableHeaderCell>
                                    <RadzenTableHeaderCell Style="width: 100px !important;">
                                        Size
                                    </RadzenTableHeaderCell>
                                    <RadzenTableHeaderCell>
                                        Data
                                    </RadzenTableHeaderCell>
                                </RadzenTableHeaderRow>
                            </RadzenTableHeader>
                            <RadzenTableBody>
                                @if (Layers != null)
                                {
                                    @for (int col = 0; col < Layers.Count(); col++)
                                    {
                                        int index = col;
                                        <RadzenTableRow>
                                            <RadzenTableCell>
                                                @index
                                            </RadzenTableCell>
                                            <RadzenTableCell>
                                                @Utils.SizeSuffix(Layers[index].Size)
                                            </RadzenTableCell>
                                            <RadzenTableCell>
                                                @Layers[index].CreatedBy
                                            </RadzenTableCell>
                                        </RadzenTableRow>
                                    }
                                }
                            </RadzenTableBody>
                        </RadzenTable>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="File">
                        <Editor @ref="@_editor" Value="@LayersText" FileName="Dockerfile" Language="dockerfile" ReadOnly="true"></Editor>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>

        }
        else
        {
            <RadzenText TextStyle="TextStyle.Body2">Layers is hidden by default</RadzenText>
            <RadzenButton Text="Show Layers" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Click="@(() => ShowLayers = true)" />

        }
    </div>
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public required string ImageId { get; set; }

    DockerImageInfo? Image { get; set; }
    public bool Failed { get; set; }

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    List<ImageHistoryResponse>? Layers { get; set; }

    public bool ShowEnvironment { get; set; }
    public bool ShowLayers { get; set; }

    public List<KeyValuePair<string, string?>> ParseEnvironment(IList<string> variables)
    {
        List<KeyValuePair<string, string?>> List = new List<KeyValuePair<string, string?>>();
        foreach (string i in variables)
        {
            string[] Split = i.Split('=');
            if (Split.Length == 1)
                List.Add(new KeyValuePair<string, string?>(Split[0], null));
            else
                List.Add(new KeyValuePair<string, string?>(Split[0], Split[1]));
        }
        return List;
    }

    public string GetName()
    {
        string Name = "Unknown";
        if (Image == null)
            return Name;

        if (Image.RepoTags != null && Image.RepoTags.Any())
            Name = Image.RepoTags.First().Split(':').First();
        else if (Image.RepoDigests != null && Image.RepoDigests.Any())
            Name = Image.RepoDigests.First().Split('@').First();

        return Name;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        LoadPerms();

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewImages))
            return;

        try
        {
            SocketResponse<DockerImageInfo?> Result = await Server.RunJsonAsync<DockerImageInfo>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: ControlImageType.View));
            Failed = !Result.IsSuccess;
            Image = Result.Data;
            if (Result.IsSuccess)
            {
                await Server.RunJsonAsync<List<ImageHistoryResponse>>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: ControlImageType.Layers), (reseponse) =>
                {
                    reseponse.Data.Reverse();
                    Layers = reseponse.Data;
                    LayersText = string.Join("\n\n", Layers.Select(x => x.CreatedBy));
                });
            }
            else
            {
                Layers = null;
            }
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    private Editor _editor = null!;
    public string? LayersText = null;

    public bool IsActionLoading { get; set; }

    public async Task Remove(string? option)
    {
        if (string.IsNullOrEmpty(option))
            option = "Remove";

        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync($"{option} Image: " + Image?.Name,
            option == "Force Remove" ? "This will stop any running containers using this image." : "Are you sure you want to remove this image?", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManageImages))
            return;

        IsActionLoading = true;

        SocketResponse<object?> Result = await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlImage, ImageId, imageType: option == "Force Remove" ? ControlImageType.ForceRemove : ControlImageType.Remove));
        if (Result.IsSuccess)
            Image = null;
    }

    public bool CanManageContainer;
    public bool CanControlContainer;
    public bool CanViewLogs;
    public bool CanInspect;
    public bool CanViewStats;
    public bool CanViewChanges;
    public bool CanUseConsole;

    public void LoadPerms()
    {
        if (Member == null)
            return;

        CanManageContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers);
        CanControlContainer = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers);
        CanViewLogs = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs);
        CanInspect = Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator);
        CanViewStats = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats);
        CanViewChanges = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges);
        CanUseConsole = Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.UseContainerConsole);
    }


    SocketResponse<DockerContainerInfo[]?>? ContainersResponse = null;

    IQueryable<DockerContainerInfo>? ContainersList;
    public int Count = 0;
    public int CountDead = 0;
    IList<DockerContainerInfo>? SelectedContainers;
    public bool AnySelected => SelectedContainers != null ? SelectedContainers.Any() : false;
    RadzenDataGrid<DockerContainerInfo> Grid;
    public bool IsLoading = true;
    public bool IsActionRunning { get; set; }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null || Image == null)
            return;

        LoadPerms();
        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
            return;

        if (Program.IsPreviewMode && ImageId != "sha256:a24316da3958ca259f1d8f371809ff8c813684172a53ce39ed43428319a6c934")
        {
            IsLoading = false;
            return;
        }

        if (ContainersResponse == null)
        {
            IsLoading = true;
            try
            {
                ContainersResponse = await Server.RunJsonAsync<DockerContainerInfo[]>(Notifications, new DockerEvent(DockerEventType.ListContainers)
                    {
                        Data = JObject.FromObject(new ListContainersEvent
                        {
                            Filters = new Dictionary<string, string>
                            {
                                { "ancestor", Image.ID }
                            }
                        })
                    });
            }
            catch (Exception ex)
            {
                Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
            }
            IsLoading = false;


        }

        if (ContainersResponse != null && ContainersResponse.IsSuccess && ContainersResponse.Data != null)
        {
            IQueryable<DockerContainerInfo> query = ContainersResponse.Data.AsQueryable();

            if (!string.IsNullOrEmpty(args.Filter))
                query = query.Where(args.Filter);

            if (!string.IsNullOrEmpty(args.OrderBy))
                query = query.OrderBy(args.OrderBy);

            Count = query.Count();
            CountDead = query.Count(x => !x.IsRunning());
            ContainersList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            if (Program.IsPreviewMode && ImageId == "sha256:a24316da3958ca259f1d8f371809ff8c813684172a53ce39ed43428319a6c934")
            {
                ContainersList = ContainersList.Where(x => x.Name == "devspace-demo");
                if (ContainersList.Any())
                    ContainersList.First().Id = "devspace-demo";
            }
        }
    }

    void ShowContextMenuWithControlsItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Start", Value = "start", Icon = "power_settings_new", IconColor = Colors.SuccessDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem(){ Text = "Stop", Value = "stop", Icon = "stop", IconColor = Colors.DangerDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem(){ Text = "Restart", Value = "restart", Icon = "restart_alt", IconColor = Colors.WarningDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem(){ Text = "Kill", Value = "kill", Icon = "bolt", IconColor = Colors.InfoDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem(){ Text = "Pause", Value = "pause", Icon = "pause", IconColor = Colors.InfoDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem(){ Text = "Resume", Value = "resume", Icon = "play_arrow", IconColor = Colors.InfoDark, Disabled = IsActionRunning || !CanControlContainer },
                new ContextMenuItem() { Text = "Remove", Value = "remove", Icon = "delete", IconColor = Colors.Danger, Disabled = IsActionRunning || !CanManageContainer }
                                 }, x => MenuItemClick(x, item));
    }

    void ShowContextMenuWithManageItems(DockerContainerInfo item, MouseEventArgs args)
    {
        LoadPerms();
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                // new ContextMenuItem(){ Text = "Config", Value = "config", Icon = "settings" },
                // new ContextMenuItem(){ Text = "Permissions", Value = "permissions", Icon = "shield_lock" },
                new ContextMenuItem() { Text = "View", Value = "view", Icon = "deployed_code" },
                new ContextMenuItem(){ Text = "Logs", Value = "logs", Icon = "description", Disabled = !CanViewLogs },
                new ContextMenuItem(){ Text = "Stats", Value = "stats", Icon = "bar_chart_4_bars", Disabled = !CanViewStats },
                new ContextMenuItem(){ Text = "Changes", Value = "changes", Icon = "topic", Disabled = !CanViewChanges },
                new ContextMenuItem(){ Text = "Inspect", Value = "inspect", Icon = "info", Disabled = !CanInspect },
                new ContextMenuItem() { Text = "Copy Container ID", Value = "copy", Icon = "content_copy" }
                                             }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, DockerContainerInfo item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view" && args.Value.ToString() != "stats")
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (Member == null || Server == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "start":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Start));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "stop":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Stop));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "restart":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Restart));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "kill":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Kill));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "pause":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Pause));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "resume":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.UnPause));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                case "view":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainers))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id);
                    break;
                case "logs":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerLogs))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/logs");
                    break;
                case "inspect":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.DockerAdministrator))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/inspect");
                    break;
                case "stats":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerStats))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/stats");
                    break;
                case "changes":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewContainerChanges))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + item.Id + "/changes");
                    break;
                case "remove":
                    if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                        return;

                    IsActionRunning = true;
                    await InvokeAsync(StateHasChanged);
                    await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, item.Id, ControlContainerType.Remove));
                    IsActionRunning = false;
                    await InvokeAsync(RefreshContainers);
                    break;
                    case "copy":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.Id);
                        }
                        catch { }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    void RunSelectedContainersAction(ControlContainerType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Server == null || Member == null || SelectedContainers == null)
            return;

        if (type == ControlContainerType.Remove || type == ControlContainerType.ForceRemove)
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ManageContainers))
                return;
        }
        else
        {
            if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ControlContainers))
                return;
        }

        _ = Task.Run(async () =>
        {
            IsActionRunning = true;
            await InvokeAsync(StateHasChanged);
            foreach (DockerContainerInfo i in SelectedContainers)
            {
                await Server.RunJsonAsync<object>(Notifications, new DockerEvent(DockerEventType.ControlContainer, i.Id, type));
            }

            IsActionRunning = false;
            SelectedContainers = null;
            await InvokeAsync(RefreshContainers);
        });

    }

    void ShowUptimeTooltip(ElementReference elementReference, string uptime) => tooltipService.Open(elementReference, uptime, null);


    public async Task RefreshContainers()
    {
        ContainersResponse = null;
        await Grid.RefreshDataAsync();
    }
}
