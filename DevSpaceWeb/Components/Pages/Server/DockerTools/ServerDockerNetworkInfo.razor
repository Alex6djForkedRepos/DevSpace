@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@inject NotificationService Notifications

@if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:local-area-network"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Network Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks")" Text="Networks" />
            <RadzenBreadCrumbItem Text="@NetworkId" />
        </RadzenBreadCrumb>
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Networks
        </RadzenAlert>
    </div>
}
else if (Network == null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:local-area-network"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Network Info</RadzenText>
            @if (!Failed)
            {
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
            }
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks")" Text="Networks" />
            <RadzenBreadCrumbItem Text="@NetworkId" />
        </RadzenBreadCrumb>
        @if (Failed)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Darker" AllowClose="false">
                Failed to get network info.
            </RadzenAlert>
        }
    </div>
}
else
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:local-area-network"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Network Info</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/networks")" Text="Networks" />
            <RadzenBreadCrumbItem Text="@Network.Name" />
        </RadzenBreadCrumb>
        <br />
        <RadzenTable GridLines="DataGridGridLines.Horizontal" AllowAlternatingRows="false">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Name
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.Name
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Id
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.Id
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.Driver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Scope
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.Scope
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Ingress
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.Ingress
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Attachable
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IsAttachable
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        Internal
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IsInternal
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:ip-network"></span></div>
            <RadzenText TextStyle="TextStyle.H6">IPAM</RadzenText>
        </div>
        <RadzenTable GridLines="DataGridGridLines.Horizontal" AllowAlternatingRows="false">
            <RadzenTableBody>
                <RadzenTableRow>
                    <RadzenTableCell>
                        Driver
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.Driver
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv4 Subnet
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv4Subnet
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv4 Gateway
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv4Gateway
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv4 Range
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv4Range
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv6 Subnet
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv6Subnet
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv6 Gateway
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv6Gateway
                    </RadzenTableCell>
                </RadzenTableRow>

                <RadzenTableRow>
                    <RadzenTableCell>
                        IPv6 Range
                    </RadzenTableCell>
                    <RadzenTableCell>
                        @Network.IPAM?.IPv6Range
                    </RadzenTableCell>
                </RadzenTableRow>
            </RadzenTableBody>
        </RadzenTable>
    </div>

    @if (Network.Options != null && Network.Options.Any())
    {
        <div class="dash-box dash-box-content">
            <div class="dash-box-header">
                <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
                <RadzenText TextStyle="TextStyle.H6">Options</RadzenText>
            </div>
            <RadzenTable GridLines="DataGridGridLines.Horizontal" AllowAlternatingRows="false">
                <RadzenTableBody>
                    @foreach (var i in Network.Options)
                    {
                        <RadzenTableRow>
                            <RadzenTableCell>
                                @i.Key
                            </RadzenTableCell>
                            <RadzenTableCell>
                                @i.Value
                            </RadzenTableCell>
                        </RadzenTableRow>
                    }
                </RadzenTableBody>
            </RadzenTable>
        </div>
    }

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:tag"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Labels</RadzenText>
        </div>
        <br />
        @if (Network.Labels != null)
        {
            foreach (var i in Network.Labels)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">@i.Key</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @i.Value
                </RadzenText>
                <br />
            }
        }
    </div>

    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="ri:box-3-fill"></span></div>
            <RadzenText TextStyle="TextStyle.H6">Containers</RadzenText>
        </div>
        <RadzenDataGrid Data="@Network.ContainersList"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                        ShowPagingSummary="true"
                        PagingSummaryFormat="@(Network.ContainersCount + " " + (Network.ContainersCount != 1 ? "containers" : "container") )" Density="Density.Default"
                        AllowSorting="false" AllowFiltering="false">
            <Columns>
                <RadzenDataGridColumn Title="Name" Width="160px">
                    <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/containers/" + context.Key)" Text="@context.Value.Name" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="IPv4 Address" Width="100px">
                    <Template>
                        @context.Value.IPv4Address
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="IPv6 Address" Width="100px">
                    <Template>
                        @context.Value.IPv6Address
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Mac Address" Width="160px">
                    <Template>
                        @context.Value.MacAddress
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Action">
                    <Template>
                        <RadzenButton Click="@(() => LeaveNetwork(context.Key))" Text="Leave Network" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Disabled="@(Network.Name == "host" || IsActionLoading)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    [Parameter]
    public required string NetworkId { get; set; }

    DockerNetworkInfo? Network { get; set; }
    public bool Failed { get; set; }
    public bool IsActionLoading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewNetworks))
            return;


        try
        {
            var Result = await Server.RunJsonAsync<DockerNetworkInfo>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, NetworkId, networkType: ControlNetworkType.View));
            Failed = !Result.IsSuccess;
            Network = Result.Data;
        }
        catch (Exception ex)
        {
            Failed = true;
            Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
        }
    }

    public async Task LeaveNetwork(string id)
    {
        if (Member == null || Server == null)
            return;

        IsActionLoading = true;
        await Server.RunJsonAsync<DockerNetworkInfo>(Notifications, new DockerEvent(DockerEventType.ControlNetwork, NetworkId, networkType: ControlNetworkType.LeaveNetwork) { ResourceList = new string[] { id } }, (response) =>
        {
            
        });
        IsActionLoading = false;
        await InvokeAsync(OnParametersSetAsync);
    }
}
