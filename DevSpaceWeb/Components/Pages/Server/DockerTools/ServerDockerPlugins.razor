@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:power-plug"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Docker Plugins</RadzenText>
        <RadzenTextBox Placeholder="Search..." @oninput=@(args => SetNameFilter(args.Value.ToString())) Style="max-width: 240px;" class="ml-4" />
    </div>

    <div class="dash-box-content">
        <RadzenButton Variant="Variant.Outlined" Text="Enable" Click="@(() => RunSelectedContainersAction(ControlPluginType.Enable))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(!AnySelected)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: var(--rz-button-border-radius) 0 0 var(--rz-button-border-radius) !important;" />
        <RadzenButton Variant="Variant.Outlined" Text="Disable" Click="@(() => RunSelectedContainersAction(ControlPluginType.Disable))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!AnySelected)" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
        <RadzenButton Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedContainersAction(ControlPluginType.Remove))" Icon="delete" Disabled="@(!AnySelected)" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" Style="border-radius: 0 var(--rz-button-border-radius) var(--rz-button-border-radius) 0 !important; margin-right: 4px !important;" />
        <RadzenButton Variant="Variant.Filled" Text="Install Plugin" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@InstallPlugin" />
        <RadzenButton Variant="Variant.Filled" Text="Refresh Plugins" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshPlugins" />
    </div>

    <RadzenDataGrid @ref="@grid" AllowRowSelectOnRowClick="true" Data="@employees" LoadData="@LoadData" Count="@count" IsLoading="@isLoading"
    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
    @bind-Value="@selectedEmployees" SelectionMode="DataGridSelectionMode.Multiple" ShowPagingSummary="true"
    PagingSummaryFormat="@(count + " plugin" + (count != 1 ? "s" : "") )" Density="Density.Compact"
    AllowSorting="false"
    AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    GotoFirstPageOnSort="true"
    LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
        <Columns>
            <RadzenDataGridColumn Width="36px" Sortable="false" Filterable="false" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                    Value="@(selectedEmployees == null || selectedEmployees?.Any() != true ? false : !employees.All(i => selectedEmployees.Contains(i)) ? null : employees.Any(i => selectedEmployees.Contains(i)))"
                    Change="@(args => selectedEmployees = args == true ? employees.ToList() : null)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedEmployees != null && selectedEmployees.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                    TValue="bool" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Filterable="false">
                <Template>
                    @* <RadzenLink Path="@("https://" + context.PluginReference.Replace("docker.io/", "hub.docker.com/r/").Split(":").First())" Target="_blank" Text="" /> *@
                    <RadzenLink Path="@("/teams/" + Session.Selected.Team.Data.GetVanityUrl() + "/servers/" + Session.Selected.Server.Data.GetVanityUrl() + "/plugins/" + context.ID)" Text="@context.Name.Replace(":", "")" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Status" Width="100px">
                <Template>
                    @if (context.Enabled)
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Success" Text="Enabled" />
                    }
                    else
                    {
                        <RadzenBadge Shade="Shade.Lighter" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Disabled" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Actions" Width="70px" Sortable="false" Filterable="false" Pickable="false">
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenButton Click=@(args => ShowContextMenuWithManageItems(context, args)) Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Description">
                <Template>
                    @context.Config.Description
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .dash-box-content .rz-button:not(.rz-button.rz-info):not(.rz-button.rz-success) {
        border-radius: 0px !important;
        margin-right: -4px !important;
        box-shadow: inset 0 0 0 var(--rz-border-width) #717376 !important;
    }

    .dash-box-content .rz-button-sm .rzi {
        font-size: 1.15rem !important;
        width: 1.15rem !important;
        height: 1.15rem !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public TeamMemberData Member { get; set; }

    DockerResponse<Plugin[]>? containers = null;

    IQueryable<Plugin> employees;
    public int count = 0;
    IList<Plugin> selectedEmployees;
    public bool AnySelected => selectedEmployees != null ? selectedEmployees.Any() : false;
    RadzenDataGrid<Plugin> grid;
    public bool isLoading = false;

    public async Task LoadData(LoadDataArgs args)
    {
        Logger.LogMessage("Loading Data", LogSeverity.Info);

        if (Program.IsPreviewMode)
        {
            employees = new List<Plugin>
            {
            }.AsQueryable();
            count = 0;
        }
        else
        {
            if (containers == null)
            {
                isLoading = true;
                try
                {
                    containers = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<Plugin[]>>(new DockerEvent(DockerEventType.ListPlugins));
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                isLoading = false;


            }

            if (containers != null)
            {
                var query = containers.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                count = query.Count();
                employees = query.Skip(args.Skip.Value).Take(args.Top.Value);
            }
        }
    }

    public async Task SetNameFilter(string text)
    {

        Console.WriteLine("Set Filter: " + text);
        await grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
    }

    void RunSelectedContainersAction(ControlPluginType type)
    {
        _ = Task.Run(async () =>
        {
            await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, null, null, type) { ResourceList = selectedEmployees.Select(x => x.ID).ToArray() });
        });
        selectedEmployees.Clear();
    }

    void ShowContextMenuWithManageItems(Plugin item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Enable", Value = "enable", Icon = "power_settings_new", Disabled = item.Enabled },
                new ContextMenuItem(){ Text = "Disable", Value = "disable", Icon = "stop", Disabled = !item.Enabled },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete" },
                                         }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, Plugin item)
    {
        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "enable":
                    await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, item.ID, null, ControlPluginType.Enable));
                    break;
                case "disable":
                    await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, item.ID, null, ControlPluginType.Disable));
                    break;
                case "remove":
                    await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, item.ID, null, ControlPluginType.Remove));
                    break;
            }
        });

        ContextMenuService.Close();
    }

    async Task InstallPlugin()
    {
        var Response = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, "mickyg/kafka-logdriver", null, ControlPluginType.InstallCheck));
        if (Response.Error != DockerError.None)
        {
            await DialogService.ShowInfoAsync($"Plugin Install Failed", Response.Data as string);
            return;
        }
        Console.WriteLine($"{Response.Data.GetType().Name}");
        if (Response.Data is JArray list)
        {
            
            List<string> Perms = new List<string>();
            foreach (var i in list.ToObject<IList<PluginPrivilege>>())
            {
                Perms.Add($"{i.Name}: {string.Join(",", i.Value)}");
            }
            var Confirm = await DialogService.ShowConfirmAsync("Plugin Install Permissions", $"This plugin requires permissions.\n\n" + string.Join("\n\n", Perms), "Accept", ButtonStyle.Success);
            if (!Confirm)
                return;
        }
        Response = await Session.Selected.Server.Data.GetWebSocket().Client.RecieveJsonAsync<DockerResponse<object>>(new DockerEvent(DockerEventType.ControlPlugin, "mickyg/kafka-logdriver", null, ControlPluginType.InstallFull));
        if (Response.Error != DockerError.None)
        {
            await DialogService.ShowInfoAsync($"Plugin Install Failed", Response.Data as string);
            return;
        }
    }

    public async Task RefreshPlugins()
    {

    }
}
