@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Extensions.Filters
@using DevSpaceWeb.Models.Servers
@using Docker.DotNet.Models
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json.Linq
@inject DialogService Dialogs
@inject ContextMenuService ContextMenuService
@inject NotificationService Notifications
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>Docker Plugins | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:power-plug"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Plugins</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewPlugins))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Plugins" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewPlugins))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Plugins
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                Docker plugins are a depreciated/legacy feature and some functions may not work.
            </RadzenAlert>
            <br />
            <ActionBar>
                <RadzenButton Variant="Variant.Filled" Text="Install Plugin" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@InstallPlugin" Disabled="@(!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))" />
                <a href="https://hub.docker.com/search?type=plugin" target="_blank"><RadzenButton Text="Docker Hub" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
            </ActionBar>
            <div class="mt-2">
                <ActionBar>
                    <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Enable" Click="@(() => RunSelectedPluginsAction(ControlPluginType.Enable))" Icon="power_settings_new" IconColor="@Colors.SuccessDark" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Outlined" Text="Disable" Click="@(() => RunSelectedPluginsAction(ControlPluginType.Disable))" Icon="stop" IconColor="@Colors.DangerDark" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@(() => RunSelectedPluginsAction(ControlPluginType.Remove))" Icon="delete" Disabled="@(!AnySelected || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                    <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshPlugins" Disabled="@IsLoading" />
                    <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <Start>
                            <RadzenIcon Icon="search" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @ref="@SearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                           autocapitalize="none" MaxLength="100" Placeholder="Search plugins" inputmode="search"
                                           @oninput="@(args => SetNameFilter(args.Value as string))" />
                        </ChildContent>
                        <End>
                            @if (!string.IsNullOrWhiteSpace(SearchText))
                            {
                                <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                            }
                        </End>
                    </RadzenFormField>
                </ActionBar>
            </div>
        </div>

        <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@PluginsList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                        @bind-Value="@SelectedPlugins" SelectionMode="DataGridSelectionMode.Multiple"
                        PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                        PagingSummaryFormat="@(Count + " plugin" + (Count != 1 ? "s" : "") )" Density="Density.Compact"
                        EmptyText="No plugins."
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        TItem="Plugin" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
            <Columns>
                <RadzenDataGridColumn Width="36px" Frozen="true">
                    <HeaderTemplate>
                        <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                        Value="@(SelectedPlugins == null || SelectedPlugins?.Any() != true ? false : !PluginsList.All(i => SelectedPlugins.Contains(i)) ? null : PluginsList.Any(i => SelectedPlugins.Contains(i)))"
                                        Change="@(args => SelectedPlugins = args == true ? PluginsList.ToList() : null)" Disabled="@(IsLoading || Count == 0)" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedPlugins != null && SelectedPlugins.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                        TValue="bool" Change="@(() => Grid.SelectRow(data))" Disabled="@IsLoading" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="@GridWidth.Name" Frozen="true" Property="@nameof(Plugin.Name)">
                    <Template>
                        <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/plugins/" + context.ID)" Text="@context.Name.Split(":").First()" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Version" Width="120px" Filterable="false">
                    <Template>
                        @context.PluginReference.Split(':').Last()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Status" Width="@GridWidth.Type" Property="@nameof(Plugin.Enabled)" FilterMode="FilterMode.CheckBoxList" FormatString="{0}" FormatProvider="@EnabledFilterProvider.Instance">
                    <Template>
                        @if (context.Enabled)
                        {
                            <RadzenBadge Shade="Shade.Dark" IsPill="true" BadgeStyle="BadgeStyle.Success" Text="Enabled" />
                        }
                        else
                        {
                            <RadzenBadge Shade="Shade.Darker" IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Disabled" />
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Actions" Width="@GridWidth.ActionsOne" Filterable="false">
                    <Template>
                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Links" Width="170px" Filterable="false">
                    <Template>
                        <RadzenStack Gap="8px" Orientation="Orientation.Horizontal">
                            @if (context.PluginReference.StartsWith("docker.io"))
                            {
                                <a href="@("https://hub.docker.com/r/" + context.Name.Split(':').First())" target="_blank"><RadzenButton Text="Plugin" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                            else
                            {
                                <a href="@("https://" + context.PluginReference.Split(':').First())" target="_blank"><RadzenButton Text="Plugin" Icon="open_in_new" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }

                            @if (!string.IsNullOrEmpty(context.Config.Documentation) && context.Config.Documentation != "-")
                            {
                                <a href="@context.Config.Documentation" target="_blank"><RadzenButton Text="Docs" Icon="book" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" /></a>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Description" Filterable="false">
                    <Template>
                        @context.Config.Description
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox SearchBox { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && SearchBox != null)
            _ = SearchBox.FocusAsync();
    }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    SocketResponse<Plugin[]?>? PluginsResponse = null;

    IQueryable<Plugin>? PluginsList;
    public int Count = 0;
    IList<Plugin>? SelectedPlugins;
    public bool AnySelected => SelectedPlugins != null ? SelectedPlugins.Any() : false;
    RadzenDataGrid<Plugin> Grid;
    public bool IsLoading = true;

    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await Grid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await Grid.Reload();
    }

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewPlugins))
            return;

        if (Program.IsPreviewMode)
        {
            PluginsList = new List<Plugin>
            {
                new Plugin
                {
                    ID = "2d421985d32be33c53393366bf6ed7740c5d3e478fe1c9db3371446ca3f09019",
                    Name = "docker/imagefs:latest",
                    PluginReference = "docker.io/docker/imagefs:latest",
                    Config = new PluginConfig
                    {
                        Description = "ImageFS plugin for Docker"
                    }
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (PluginsResponse == null)
            {
                IsLoading = true;
                try
                {
                    PluginsResponse = await Server.RunJsonAsync<Plugin[], DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListPlugins));

                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }
                IsLoading = false;
            }

            if (PluginsResponse != null && PluginsResponse.IsSuccess && PluginsResponse.Data != null)
            {
                IQueryable<Plugin> query = PluginsResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                PluginsList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    async Task RunSelectedPluginsAction(ControlPluginType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null || SelectedPlugins == null)
            return;

        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
            return;

        if (type == ControlPluginType.Remove)
        {
            bool Confirm = await Dialogs.ShowConfirmAsync($"Remove {SelectedPlugins.Count} plugin" + (SelectedPlugins.Count != 1 ? "s" : ""),
                $"Are you sure you want to remove these {(SelectedPlugins.Count == 1 ? "this plugin" : "these plugins")}: " + string.Join(", ", SelectedPlugins.Select(x => x.Name.Split(':').First())), "Confirm", ButtonStyle.Success);

            if (!Confirm)
                return;

            if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                return;
        }

        _ = Task.Run(async () =>
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            foreach(Plugin i in SelectedPlugins)
            {
                await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, i.Name, pluginType: type));
            }
            SelectedPlugins = null;
            IsLoading = false;
            await InvokeAsync(RefreshPlugins);
        });
    }

    void ShowContextMenuWithManageItems(Plugin item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = "view", Icon = "power", Disabled = Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewPlugins) },
                new ContextMenuItem(){ Text = item.Enabled ? "Disable" : "Enable", Value = item.Enabled ? "disable" : "enable", Icon = item.Enabled ? "stop" : "power_settings_new", Disabled = IsLoading || Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins) },
                new ContextMenuItem() { Text = "Upgrade", Value = "upgrade", Icon = "upgrade", Disabled = IsLoading || Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins) },
                new ContextMenuItem(){ Text = "Remove", Value = "remove", Icon = "delete", Disabled = IsLoading || Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins) },
                new ContextMenuItem() { Text = "Copy Plugin ID", Value = "copy", Icon = "content_copy" }
                                                 }, x => MenuItemClick(x, item));
    }

    void MenuItemClick(MenuItemEventArgs args, Plugin item)
    {
        if (Program.IsPreviewMode && args.Value.ToString() != "view")
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (Server == null || Member == null)
            return;

        _ = Task.Run(async () =>
        {
            switch (args.Value.ToString())
            {
                case "view":
                    if (!Member.HasDockerPermission(Team, Server, DockerPermission.ViewPlugins))
                        return;

                    Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl + "/plugins/" + item.ID);
                    break;
                case "enable":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, item.Name, null, ControlPluginType.Enable), (response) =>
                        {
                            item.Enabled = true;
                        });
                        IsLoading = false;
                    }
                    break;
                case "disable":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, item.Name, null, ControlPluginType.Disable), (response) =>
                        {
                            item.Enabled = false;
                        });
                        IsLoading = false;
                    }
                    break;
                case "upgrade":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                            return;

                        AuthUser? AuthUser = await Session.GetCurrentUserAsync();
                        bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, false);
                        if (!TwoFactorValid)
                        {
                            await Dialogs.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
                            return;
                        }

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);

                        SocketResponse<object?> Response = await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, item.Name, null, ControlPluginType.InstallCheck));
                        if (!Response.IsSuccess)
                        {
                            _ = Dialogs.ShowInfoAsync("Plugin Upgrade Failed", Response.Data as string);

                            IsLoading = false;
                            await InvokeAsync(StateHasChanged);
                            return;
                        }

                        if (Response.Data is JArray list)
                        {
                            List<string> Perms = new List<string>();
                            foreach (PluginPrivilege i in list.ToObject<IList<PluginPrivilege>>())
                            {
                                Perms.Add($"{i.Name}: {string.Join(",", i.Value)}");
                            }

                            if (Perms.Any())
                            {
                                bool Confirm = await Dialogs.ShowConfirmAsync($"{item.Name.Split(':').First()} Requires Permissions", $"This plugin requires permissions.\n\n" + string.Join("\n\n", Perms), "Accept", ButtonStyle.Success);
                                if (!Confirm)
                                    if (!Response.IsSuccess)
                                    {
                                        _ = Dialogs.ShowInfoAsync("Plugin Upgrade Failed", "You need to accept plugin permissions to upgrade.");

                                        IsLoading = false;
                                        await InvokeAsync(StateHasChanged);
                                        return;
                                    }
                            }
                        }

                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, item.Name, null, ControlPluginType.Update), (response) =>
                        {

                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshPlugins);
                    }
                    break;
                case "remove":
                    {
                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                            return;

                        bool Confirm = await Dialogs.ShowConfirmAsync("Remove Plugin: " + item?.Name.Split(':').First(),
                            "Are you sure you want to remove this plugin?", "Confirm", ButtonStyle.Success);

                        if (!Confirm)
                            return;

                        if (!Member.HasDockerPermission(Team, Server, DockerPermission.ManagePlugins))
                            return;

                        IsLoading = true;
                        await InvokeAsync(StateHasChanged);
                        await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, item.Name, null, ControlPluginType.Remove), (response) =>
                        {

                        });
                        IsLoading = false;
                        await InvokeAsync(RefreshPlugins);
                    }
                    break;
                    case "copy":
                    {
                        try
                        {
                            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.ID);
                        }
                        catch { }
                    }
                    break;
            }
        });

        ContextMenuService.Close();
    }

    async Task InstallPlugin()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member == null || Server == null)
            return;

        AuthUser? AuthUser = await Session.GetCurrentUserAsync();
        bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, false);
        if (!TwoFactorValid)
        {
            await Dialogs.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
            return;
        }

        await Dialogs.ShowDynamicFormAsync<InstallPluginModel>("Install Plugin", new InstallPluginModel(), async (InstallPluginModel data) =>
        {
            SocketResponse<object?> Response = await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, data.Name, null, ControlPluginType.InstallCheck));
            if (!Response.IsSuccess)
                return "Plugin install failed: " + Response.Data as string;

            if (Response.Data is JArray list)
            {
                List<string> Perms = new List<string>();
                foreach (PluginPrivilege i in list.ToObject<IList<PluginPrivilege>>())
                {
                    Perms.Add($"{i.Name}: {string.Join(", ", i.Value)}");
                }

                if (Perms.Any())
                {
                    bool Confirm = await Dialogs.ShowConfirmAsync($"{data.Name} Requires Permissions", $"This plugin requires permissions.\n\n" + string.Join("\n\n", Perms), "Accept", ButtonStyle.Success);
                    if (!Confirm)
                        return "You need to accept plugin permissions to install.";
                }
            }
            Response = await Server.RunJsonAsync<object, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlPlugin, data.Name, null, ControlPluginType.InstallFull));
            if (!Response.IsSuccess)
                return "Plugin install failed: " + Response.Data as string;

            await RefreshPlugins();
            return null;
        });
    }

    public async Task RefreshPlugins()
    {
        PluginsResponse = null;
        await Grid.RefreshDataAsync();
    }
}
