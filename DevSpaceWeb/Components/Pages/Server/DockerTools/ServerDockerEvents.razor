@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Components.Dialogs.Docker
@inject NotificationService Notifications
@inject DialogService Dialogs

<PageTitle>Docker Events | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="ri:stack-fill"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Docker Events</RadzenText>
        @if (IsLoading && Member != null && Member.HasDockerPermission(Team, Server, DockerPermission.ViewEvents))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2 ml-4" style="margin-top: -2px !important; margin-bottom: 10px;">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Events" />
    </RadzenBreadCrumb>

    @if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewEvents))
    {
        <div class="dash-box-content">
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View Events
            </RadzenAlert>
        </div>
    }
    else
    {
        <div class="dash-box-content">
            <RadzenText TextStyle="TextStyle.Body1">
                This will show recent docker events
            </RadzenText>
        </div>
        <RadzenDataGrid @ref="@Grid" AllowRowSelectOnRowClick="false" Data="@EventsList" LoadData="@LoadData" Count="@Count" IsLoading="@IsLoading"
                        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15" GridLines="DataGridGridLines.Horizontal"
                        PagingSummaryFormat="@(Count + " events" + (Count != 1 ? "s" : "") )" Density="Density.Compact"
                        AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        TItem="DockerEventInfo" EmptyText="No events.">
            <Columns>
                <RadzenDataGridColumn Title="Date" Width="120px" Filterable="false">
                    <Template>
                        @Utils.GetLocalDate(Session, DateTimeOffset.FromUnixTimeSeconds(context.Time).DateTime)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Type" Width="120px" Property="@nameof(DockerEventInfo.Type)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @switch (context.Type)
                        {
                            case "container":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="ri:box-3-fill"></span></div>
                            break;
                            case "builder":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:build"></span></div>
                                break;
                            case "config":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:gear"></span></div>
                                break;
                            case "daemon":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:docker"></span></div>
                                break;
                            case "image":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:folder-image"></span></div>
                                break;
                            case "network":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:local-area-network"></span></div>
                                break;
                            case "node":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:access-point"></span></div>
                                break;
                            case "plugin":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:power-plug"></span></div>
                                break;
                            case "secret":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:password"></span></div>
                                break;
                            case "service":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:lightning-bolt"></span></div>
                                break;
                            case "volume":
                                <div style="display: inline-block;" class="mr-1"><span class="iconify" data-icon="mdi:storage"></span></div>
                                break;
                        }
                        @context.Type
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Name" Width="300px" Filterable="false">
                    <Template>
                        @if (context.Actor != null && context.Actor.Attributes != null && context.Actor.Attributes.TryGetValue("name", out object? name))
                        {
                            @(name as string)
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Action" Width="110px" Property="@nameof(DockerEventInfo.Action)" FilterMode="FilterMode.CheckBoxList">
                    <Template>
                        @context.Action
                    </Template>
                </RadzenDataGridColumn>
                    
                    <RadzenDataGridColumn Title="Details" Filterable="false">
                    <Template>
                        @if (context.Actor != null)
                        {
                            <RadzenButton Variant="Variant.Filled" Size="ButtonSize.Small" Text="More Details" Click="@(() => OpenMoreDetails(context))" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Disabled="@Program.IsPreviewMode" />
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public bool IsLoading { get; set; } = true;

    SocketResponse<List<DockerEventInfo>?>? EventsResponse = null;

    IQueryable<DockerEventInfo>? EventsList;
    public int Count = 0;
    RadzenDataGrid<DockerEventInfo> Grid = null!;

    public async Task LoadData(LoadDataArgs args)
    {
        if (Member == null || Server == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewEvents))
            return;

        if (Program.IsPreviewMode)
        {
            EventsList = new List<DockerEventInfo>()
            {
                new DockerEventInfo
                {
                    Type = "container",
                    Time = 1746655630,
                    Actor = new DockerEventInfoActor
                    {
                        Attributes = new Dictionary<string, object>
                        {
                            { "name", "devspace-web" }
                        }
                    },
                    Action = "start"
                }
            }.AsQueryable();
            Count = 0;
            IsLoading = false;
        }
        else
        {
            if (EventsResponse == null)
            {
                IsLoading = true;
                try
                {
                    EventsResponse = await Server.RunJsonAsync<List<DockerEventInfo>>(Notifications, new DockerEvent(DockerEventType.Events));
                    if (EventsResponse.Data != null)
                        EventsResponse.Data = EventsResponse.Data.Where(x => !x.Action.StartsWith("exec_")).OrderByDescending(x => x.Time).ToList();
                }
                catch (Exception ex)
                {
                    Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
                }

                IsLoading = false;
            }

            if (EventsResponse != null && EventsResponse.IsSuccess && EventsResponse.Data != null)
            {
                IQueryable<DockerEventInfo> query = EventsResponse.Data.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                    query = query.Where(args.Filter);

                if (!string.IsNullOrEmpty(args.OrderBy))
                    query = query.OrderBy(args.OrderBy);

                Count = query.Count();
                EventsList = query.Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());
            }
        }
    }

    public async Task OpenMoreDetails(DockerEventInfo evnt)
    {
        if (Member == null || !Member.HasDockerPermission(Team, Server, DockerPermission.ViewEvents))
            return;

        string? Name = evnt.Type;
        if (evnt.Actor.Attributes != null && evnt.Actor.Attributes.TryGetValue("name", out object? name))
        {
            Name = name as string;
        }

        await Dialogs.OpenAsync<DockerEventsDetailsDialog>($"Event {Name}", new Dictionary<string, object>()
        {
            { "Event", evnt.Actor }
        }, new DialogOptions
        {
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }
}
