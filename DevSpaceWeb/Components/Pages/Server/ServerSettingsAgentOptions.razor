@using DevSpaceShared.Agent
@using DevSpaceShared.WebSocket
@using DevSpaceWeb.Models.Consoles
@using DevSpaceWeb.Models.Servers
@using System.Net
@inject NotificationService Notifications

<PageTitle>@(Server?.Name ?? "Server") Agent Options | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:mixer-settings"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Agent Options</RadzenText>
        @if (IsActionLoading)
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" Text="Servers" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers/" + Session.Selected.Team?.Server?.VanityUrl)" Text="@Session.Selected.Team?.Server?.Data.Name" />
        <RadzenBreadCrumbItem Text="Agent Options" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ServerAdministrator))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Server Administrator
        </RadzenAlert>
    }
    else if (!Server.HasVersionOrHigher(new Version(1, 0, 49)))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You need to install Dev Space Agent v1.0.49 or higher
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Log Agent Events</RadzenText>
        <RadzenText TextStyle="TextStyle.Body2">This will log agent processing to the console/container log of devspace-agent.</RadzenText>
        <RadzenSwitch Value="@(Options?.LogAgentEvents ?? false)" ValueChanged="@ToggleAgentEvents" Disabled="@(Options == null || IsActionLoading)" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Log Agent Events Switch" } })" />

        <br />
        <br />

        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Log Docker Events</RadzenText>
        <RadzenText TextStyle="TextStyle.Body2">This will log docker real-time events to the console/container log of devspace-agent.</RadzenText>
        <RadzenSwitch Value="@(Options?.LogDockerEvents ?? false)" ValueChanged="@ToggleDockerEvents" Disabled="@(Options == null || IsActionLoading)" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Log Docker Events Switch" } })" />
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public AgentOptions Options { get; set; }
    public bool IsActionLoading { get; set; } = true;

    public async Task ToggleAgentEvents(bool value)
    {
        if (Server == null)
            return;

        if (Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ServerAdministrator))
            return;

        IsActionLoading = true;

        await Server.RunJsonAsync<AgentOptions, AgentOptionsUpdate>(Notifications, new AgentOptionsUpdate
        {
            LogAgentEvents = value
        });
        await LoadOptions();
    }

    public async Task ToggleDockerEvents(bool value)
    {
        if (Server == null)
            return;

        if (Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ServerAdministrator))
            return;

        IsActionLoading = true;

        await Server.RunJsonAsync<AgentOptions, AgentOptionsUpdate>(Notifications, new AgentOptionsUpdate
        {
            LogDockerEvents = value
        });
        await LoadOptions();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Server == null)
            return;

        if (Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ServerAdministrator))
            return;

        await LoadOptions();
    }

    public async Task LoadOptions()
    {
        var Repsonse = await Server!.RunJsonAsync<AgentOptions, IWebSocketTask>(Notifications, new IWebSocketTask(DevSpaceShared.WebSocket.EventType.GetAgentOptions));
        if (Repsonse.Data != null)
            Options = Repsonse.Data;

        IsActionLoading = false;
    }
}
