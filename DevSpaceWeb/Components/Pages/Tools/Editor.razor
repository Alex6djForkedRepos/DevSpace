@page "/tools/editor"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject IJSRuntime jsRuntime

<div class="dash-box">
		<MudToolBar Dense="true">
			<MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
		<MudSelect Value="@("plaintext")" Margin="Margin.Dense" T="string" Label="Language" Variant="Variant.Outlined" ValueChanged="ChangeEditor">
			<MudSelectItem Value="@("plaintext")" />
			<MudSelectItem Value="@("javascript")" />
			<MudSelectItem Value="@("json")" />
			<MudSelectItem Value="@("csharp")" />
		</MudSelect>
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.VerticalSplit" Color="@(EnableDiffEditor ? Color.Success : Color.Default)" OnClick="@(() => EnableDiffEditor = !EnableDiffEditor)" />
			<MudIconButton Icon="@Icons.Material.Outlined.PushPin" />
			<MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt" />
			<MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
		</MudToolBar>
	@if (false)
	{
		<StandaloneDiffEditor @ref="_diffEditor" Id="my-editor-instance-id" ConstructionOptions="DiffEditorConstructionOptions" OnDidInit="EditorOnDidInit" />
	}
	else
	{
		<StandaloneCodeEditor @ref="_editor" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" />
	}
	
</div>

<style>
	.monaco-editor {
		min-height: calc(100vh - 140px) !important;
		max-height: calc(100vh - 140px) !important;
		padding-top: 10px;
	}
</style>

@code {
	public bool EnableDiffEditor { get; set; } = false;
	public string Language = "text";

	private StandaloneCodeEditor _editor = null;
	private StandaloneDiffEditor _diffEditor = null!;
	private string _valueToSetOriginal = "";
	private string _valueToSetModified = "";

	public async Task ChangeEditor(string language)
	{
		BlazorMonaco.Editor.Global.SetModelLanguage(await _editor.GetModel(), language);
	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		editor.UpdateOptions(new EditorUpdateOptions
		{

		});
		return new StandaloneEditorConstructionOptions
			{
				AutomaticLayout = true,
				Language = Language,
				Theme = "vs-dark"
			};
	}

	private StandaloneDiffEditorConstructionOptions DiffEditorConstructionOptions(StandaloneDiffEditor editor)
	{
		return new StandaloneDiffEditorConstructionOptions
			{
				AutomaticLayout = true,
				Theme = "vs-dark",
				OriginalEditable = true
			};
	}

	private async Task EditorOnDidInit()
	{
		// Get or create the original model
		TextModel original_model = await BlazorMonaco.Editor.Global.GetModel(jsRuntime, "sample-diff-editor-originalModel");
		if (original_model == null)
		{
			var original_value = _valueToSetOriginal;
			original_model = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, original_value, Language, "sample-diff-editor-originalModel");
		}

		// Get or create the modified model
		TextModel modified_model = await BlazorMonaco.Editor.Global.GetModel(jsRuntime, "sample-diff-editor-modifiedModel");
		if (modified_model == null)
		{
			var modified_value = _valueToSetModified;
			modified_model = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, modified_value, Language, "sample-diff-editor-modifiedModel");
		}

		// Set the editor model
		await _diffEditor.SetModel(new DiffEditorModel
			{
				Original = original_model,
				Modified = modified_model
			});
		await _diffEditor.OriginalEditor.UpdateOptions(new EditorUpdateOptions
			{
				AutomaticLayout = true
			});
		await _diffEditor.ModifiedEditor.UpdateOptions(new EditorUpdateOptions
			{
				AutomaticLayout = true
			});
	}
}
