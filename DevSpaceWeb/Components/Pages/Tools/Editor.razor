@page "/tools/editor"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject IJSRuntime jsRuntime

<PageTitle>Editor | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box">
    <div class="dash-box-content">
        <RadzenDropDown TValue="string" Data="@Languages" Value="@("plaintext")" ValueChanged="@ChangeEditorLang" />
        <RadzenCheckBox @bind-Value="@EnableDiffEditor" Name=" CheckboxDiff" />
        <RadzenLabel Text="Toggle Diff" Component="CheckboxDiff" class="rz-ms-2" />
    </div>
    @if (EnableDiffEditor)
    {
        <StandaloneDiffEditor @ref="_diffEditor" Id="my-editor-instance-id2" ConstructionOptions="DiffEditorConstructionOptions" OnDidInit="EditorOnDidInit" />
    }
    else
    {
        <StandaloneCodeEditor @ref="_editor" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" />
    }

</div>

<style>
    .monaco-editor, .monaco-diff-editor {
        background-color: #1e1e1e !important;
    }

    .monaco-editor-container, .monaco-diff-editor {
        min-height: 400px !important;
        max-height: calc(100vh - 140px) !important;
        padding-top: 6px;
        padding-bottom: 10px;
    }
</style>

@code {
    public bool EnableDiffEditor { get; set; } = false;
    public string[] Languages = new string[]
    {
        "plaintext",
        "bat",
        "c",
        "cpp",
        "csharp",
        "css",
        "dockerfile",
        "go",
        "graphql",
        "html",
        "java",
        "javascript",
        "json",
        "kotlin",
        "less",
        "lua",
        "markdown",
        "mysql",
        "pgsql",
        "php",
        "powershell",
        "python",
        "razor",
        "redis",
        "ruby",
        "rust",
        "scala",
        "shell",
        "swift",
        "typescript",
        "xml",
        "yaml"
    };

    private StandaloneCodeEditor _editor = null!;
    private StandaloneDiffEditor _diffEditor = null!;
    private string _valueToSetOriginal = "";
    private string _valueToSetModified = "";

    public async Task ChangeEditorLang(string language)
    {
        await BlazorMonaco.Editor.Global.SetModelLanguage(jsRuntime, await _editor.GetModel(), language);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        editor.UpdateOptions(new EditorUpdateOptions
        {

        });
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "plaintext",
                Theme = "vs-dark",
                ScrollBeyondLastLine = false,
            };
    }

    private StandaloneDiffEditorConstructionOptions DiffEditorConstructionOptions(StandaloneDiffEditor editor)
    {
        return new StandaloneDiffEditorConstructionOptions
            {
                AutomaticLayout = true,
                Theme = "vs-dark",
                OriginalEditable = true
            };
    }

    private async Task EditorOnDidInit()
    {
        // Get or create the original model
        TextModel original_model = await BlazorMonaco.Editor.Global.GetModel(jsRuntime, "sample-diff-editor-originalModel");
        if (original_model == null)
        {
            string original_value = _valueToSetOriginal;
            original_model = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, original_value, "plaintext", "sample-diff-editor-originalModel");
        }

        // Get or create the modified model
        TextModel modified_model = await BlazorMonaco.Editor.Global.GetModel(jsRuntime, "sample-diff-editor-modifiedModel");
        if (modified_model == null)
        {
            string modified_value = _valueToSetModified;
            modified_model = await BlazorMonaco.Editor.Global.CreateModel(jsRuntime, modified_value, "plaintext", "sample-diff-editor-modifiedModel");

        }

        // Set the editor model
        await _diffEditor.SetModel(new DiffEditorModel
            {
                Original = original_model,
                Modified = modified_model
            });
        await _diffEditor.OriginalEditor.UpdateOptions(new EditorUpdateOptions
            {
                AutomaticLayout = true
            });
        await _diffEditor.ModifiedEditor.UpdateOptions(new EditorUpdateOptions
            {
                AutomaticLayout = true
            });
    }
}
