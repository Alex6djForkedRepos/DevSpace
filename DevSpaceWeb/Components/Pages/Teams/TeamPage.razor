@page "/teams/{team_id?}/{service?}/{service_id?}/{resource_type?}/{resource_data?}/{resource_feature?}"
@using DevSpaceWeb.Apps.Data
@using DevSpaceWeb.Components.Pages.Apps
@using DevSpaceWeb.Components.Pages.Console
@using DevSpaceWeb.Components.Pages.Proxmox
@using DevSpaceWeb.Components.Pages.Server.DockerTools
@using DevSpaceWeb.Components.Pages.Teams.Settings
@using DevSpaceWeb.Data.Consoles

@if (Team == null || Member == null)
{
    <PageTitle>Unknown Team | @_Data.Config.Instance.Name</PageTitle>
    <p>This team does not exist.</p>
}
else if (Member.Disabled != null)
{
    <PageTitle>Member Restricted | @_Data.Config.Instance.Name</PageTitle>
    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
        Your account has been restricted from accessing this team.
    </RadzenAlert>
}
else if (Team.Require2FA && Member.UserId != Team.OwnerId && !Session.CurrentUser!.Has2FA)
{
    <PageTitle>Member Restricted | @_Data.Config.Instance.Name</PageTitle>
    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
        This team and resources requires 2FA to access, setup 2FA for your account.
    </RadzenAlert>
}
else
{
    <PageTitle>@Team.Name | @_Data.Config.Instance.Name</PageTitle>
    switch (service)
    {
        case "home":
        case null:
        case "":
            {
                <TeamHome></TeamHome>
                <PageTitle>@Team.Name | @_Data.Config.Instance.Name</PageTitle>
            }
            break;
        case "settings":
            {
                switch (service_id)
                {
                    case null:
                    case "":
                        <TeamSettings></TeamSettings>
                        break;
                    case "basic":
                        <TeamSettingsBasic></TeamSettingsBasic>
                        break;
                    case "members":
                        <TeamMembers></TeamMembers>
                        break;
                    case "roles":
                        <TeamRoles></TeamRoles>
                        break;
                    case "audit":
                        <TeamAuditLogs></TeamAuditLogs>
                        break;
                    case "api":
                        <TeamAPISettings></TeamAPISettings>
                        break;
                    case "delete":
                        <TeamDelete></TeamDelete>
                        break;
                }

            }
            break;
        case "api":
            {
                <TeamAPIClient ClientId="@service_id"></TeamAPIClient>
            }
            break;
        case "links":
            {
                <DevSpaceWeb.Components.Pages.Links.LinksPage></DevSpaceWeb.Components.Pages.Links.LinksPage>
            }
            break;
        case "apps":
            {
                if (!Session.IsInstanceAdmin)
                {
                    <p>Instance admin is required</p>
                }
                else if (string.IsNullOrEmpty(service_id))
                {
                    <AppList></AppList>
                }
                else if (App == null || !Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator))
                {
                    <p>This apps does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <AppHome></AppHome>
                            break;
                        case "settings":
                            <AppSettingsBasic></AppSettingsBasic>
                            break;
                        case "install":
                            <AppInstall></AppInstall>
                            break;
                        case "commands":
                            <AppCommands></AppCommands>
                            break;
                        case "interactions":
                            <AppInteractions></AppInteractions>
                            break;
                        case "permissions":
                            <AppPermissions></AppPermissions>
                            break;
                    }
                }
            }
            break;
        case "servers":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ServerList></ServerList>
                }
                else if (Server == null || !Member.HasServerPermission(Team, Server, ServerPermission.ViewServer))
                {
                    <p>This server does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ServerHome></ServerHome>
                            break;
                        case "settings":
                            <ServerSettingsBasic></ServerSettingsBasic>
                            break;
                        case "connection":
                            <ServerSettingsAgentConnection></ServerSettingsAgentConnection>
                            break;
                        case "options":
                            <ServerSettingsAgentOptions></ServerSettingsAgentOptions>
                            break;
                        case "permissions":
                            <ServerPermissions></ServerPermissions>
                            break;
                        @* case "databases":
                                <ServerDatabase></ServerDatabase>
                                break; *@
                        case "host":
                            <ServerDockerHostInfo></ServerDockerHostInfo>
                            break;
                        case "debug":
                            <ServerDebug></ServerDebug>
                            break;
                        case "stacks":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerStacks></ServerDockerStacks>
                            }
                            else
                            {
                                @if (resource_data == "build")
                                {
                                    <ServerDockerStackBuild></ServerDockerStackBuild>
                                }
                                else
                                {
                                    switch (resource_feature)
                                    {
                                        case null:
                                        case "":
                                            <ServerDockerStackInfo StackId="@resource_data"></ServerDockerStackInfo>
                                            break;
                                        case "edit":
                                            <ServerDockerStackEdit StackId="@resource_data"></ServerDockerStackEdit>
                                            break;
                                    }

                                }
                            }
                            break;
                        case "containers":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerContainers></ServerDockerContainers>
                            }
                            else
                            {
                                switch (resource_feature)
                                {
                                    case null:
                                    case "":
                                        <ServerDockerContainerInfo ContainerId="@resource_data"></ServerDockerContainerInfo>
                                        break;
                                    case "stats":
                                        <ServerDockerContainerStats ContainerId="@resource_data"></ServerDockerContainerStats>
                                        break;
                                    case "logs":
                                        <ServerDockerContainerLogs ContainerId="@resource_data"></ServerDockerContainerLogs>
                                        break;
                                    case "inspect":
                                        <ServerDockerContainerInspect ContainerId="@resource_data"></ServerDockerContainerInspect>
                                        break;
                                    case "console":
                                        <ServerDockerContainerConsole ContainerId="@resource_data"></ServerDockerContainerConsole>
                                        break;
                                    case "changes":
                                        <ServerDockerContainerChanges ContainerId="@resource_data"></ServerDockerContainerChanges>
                                        break;
                                }

                            }
                            break;
                        case "plugins":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerPlugins></ServerDockerPlugins>
                            }
                            else
                            {
                                <ServerDockerPluginInfo PluginId="@resource_data"></ServerDockerPluginInfo>
                            }
                            break;
                        case "images":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerImages></ServerDockerImages>

                            }
                            else
                            {
                                @if (resource_data == "build")
                                {
                                    <ServerDockerImageBuild></ServerDockerImageBuild>
                                }
                                else
                                {
                                    <ServerDockerImageInfo ImageId="@resource_data"></ServerDockerImageInfo>
                                }

                            }
                            break;
                        case "networks":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerNetworks></ServerDockerNetworks>
                            }
                            else
                            {
                                <ServerDockerNetworkInfo NetworkId="@resource_data"></ServerDockerNetworkInfo>
                            }
                            break;
                        case "volumes":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerVolumes></ServerDockerVolumes>
                            }
                            else
                            {
                                <ServerDockerVolumeInfo VolumeId="@resource_data"></ServerDockerVolumeInfo>
                            }
                            break;
                        case "execute":
                            <ServerDockerExecute></ServerDockerExecute>
                            break;
                        case "registry":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerRegistry></ServerDockerRegistry>
                            }
                            else
                            {
                                <ServerDockerRegistryInfo RegistryId="@resource_data"></ServerDockerRegistryInfo>
                            }
                            break;
                        case "events":
                            <ServerDockerEvents></ServerDockerEvents>
                            break;
                        @* case "firewall":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else if (Server.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerFirewall></ServerFirewall>
                                }

                                break; *@
                        @* case "files":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else if (Server.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerFiles></ServerFiles>
                                }

                                break; *@
                        @* case "ssh":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else if (Server.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerSSH></ServerSSH>
                                }

                                break; *@
                        @* case "status":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerStatus></ServerStatus>
                                }

                                break; *@
                        @* case "webhooks":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerWebhooks></ServerWebhooks>
                                }

                                break; *@
                        @* case "info":
                                @if (!Member.HasServerPermission(Server, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerSystemInfo></ServerSystemInfo>
                                }

                                break; *@
                        case "templates":
                            if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerAppTemplates></ServerDockerAppTemplates>
                            }
                            else if (resource_data.Equals("custom"))
                            {
                                <ServerDockerCustomTemplates></ServerDockerCustomTemplates>

                            }
                            break;
                    }

                }

            }
            break;
        case "proxmox":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ProxmoxList></ProxmoxList>
                }
                else if (Console == null || !Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator))
                {
                    <p>This node does not exist.</p>
                }
                else
                {

                }
            }
            break;
        case "consoles":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ConsoleList></ConsoleList>
                }
                else if (Console == null || !Member.HasConsolePermission(Team, Console, ConsolePermission.ViewConsole))
                {
                    <p>This console does not exist.</p>
                }
                else
                {
                    <ConsolePage Page="@resource_type"></ConsolePage>
                }
            }
            break;
        case "projects":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ProjectsList></ProjectsList>
                }
                else if (Project == null || !Member.HasProjectPermission(Team, Project, ProjectPermission.ViewProject))
                {
                    <p>This project does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ProjectsHome></ProjectsHome>
                            break;
                    }
                }

            }
            break;
        case "logs":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <LogsList></LogsList>
                }
                else if (Log == null || !Member.HasLogPermission(Team, Log, LogPermission.ViewLog))
                {
                    <p>This log does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":

                            <LogsHome></LogsHome>
                            break;
                    }
                }

            }
            break;
        case "websites":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <WebsitesList></WebsitesList>
                }
                else if (Website == null || !Member.HasWebsitePermission(Team, Website, WebsitePermission.ViewWebsite))
                {
                    <p>This website does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <WebsiteHome></WebsiteHome>
                            break;
                    }

                }

            }
            break;
    }
}

@code {
    [Parameter]
    public string team_id { get; set; } = "";

    [Parameter]
    public string service { get; set; } = "";

    [Parameter]
    public string service_id { get; set; } = "";

    [Parameter]
    public string resource_type { get; set; } = "";

    [Parameter]
    public string resource_data { get; set; } = "";

    [Parameter]
    public string resource_feature { get; set; } = "";

    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public AppData? App => Session.Selected.App;
    public ServerData? Server => Session.Selected.Server;
    public ProjectData? Project => Session.Selected.Project;
    public ConsoleData? Console => Session.Selected.Console;
    public LogData? Log => Session.Selected.Log;
    public WebsiteData? Website => Session.Selected.Website;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(team_id))
        {
            bool UpdateNav = false;

            TeamData? GotTeam = null;
            if (!ObjectId.TryParse(team_id, out ObjectId TeamId) || !_DB.Teams.Cache.TryGetValue(TeamId, out GotTeam))
            {
                if (_DB.TeamsVanityCache.TryGetValue(team_id, out TeamData? tmid))
                    GotTeam = tmid;
            }

            if (GotTeam != null && (Session.Selected.Team == null || Session.Selected.Team.Data.Id != GotTeam.Id))
            {
                TeamMemberData? Member = GotTeam.GetMember(Session);
                if (Session.CurrentUser?.Id == GotTeam.OwnerId || (Member != null && GotTeam.Id == Member.TeamId))
                {
                    Session.Selected.Team = new SelectedTeamData(GotTeam)
                    {
                        Member = Member!
                    };
                }
                else
                    Session.Selected.Team = null;

                UpdateNav = true;
            }

            if (Session.Selected.Team != null)
            {
                if (Member != null && Member.Disabled != null)
                    return;

                switch (service)
                {
                    case "apps":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                AppData? GotApp = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId ServiceId) || !_DB.Apps.Cache.TryGetValue(ServiceId, out GotApp))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.AppVanityUrls.TryGetValue(service_id, out ObjectId appId))
                                    {
                                        _DB.Apps.Cache.TryGetValue(appId, out GotApp);
                                    }
                                }

                                if (GotApp != null && (Session.Selected.App == null || !Session.Selected.Team.App.IsVisible || Session.Selected.App.Id != GotApp.Id))
                                {
                                    if (Member.TeamId == GotApp.TeamId && Member.HasTeamPermission(Team, TeamPermission.GlobalAdministrator))
                                        Session.Selected.Team.App = new SelectedAppData(GotApp);
                                    else
                                        Session.Selected.Team.App = null;

                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "servers":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ServerData? GotServer = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId ServiceId) || !_DB.Servers.Cache.TryGetValue(ServiceId, out GotServer))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.ServerVanityUrls.TryGetValue(service_id, out ObjectId serverId))
                                    {
                                        _DB.Servers.Cache.TryGetValue(serverId, out GotServer);
                                    }
                                }

                                if (GotServer != null && (Session.Selected.Server == null || !Session.Selected.Team.Server.IsVisible || Session.Selected.Server.Id != GotServer.Id))
                                {
                                    if (Member.TeamId == GotServer.TeamId && Member.HasServerPermission(Team, GotServer, ServerPermission.ViewServer))
                                        Session.Selected.Team.Server = new SelectedServerData(GotServer);
                                    else
                                        Session.Selected.Team.Server = null;

                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "consoles":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ConsoleData? GotConsole = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId ConsoleId) || !_DB.Consoles.Cache.TryGetValue(ConsoleId, out GotConsole))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.ConsoleVanityUrls.TryGetValue(service_id, out ObjectId consoleId))
                                    {
                                        _DB.Consoles.Cache.TryGetValue(consoleId, out GotConsole);
                                    }
                                }


                                if (GotConsole != null && (Session.Selected.Console == null || !Session.Selected.Team.Console.IsVisible || Session.Selected.Console.Id != GotConsole.Id))
                                {
                                    if (Member.TeamId == GotConsole.TeamId && Member.HasConsolePermission(Team, GotConsole, ConsolePermission.ViewConsole))
                                        Session.Selected.Team.Console = new SelectedConsoleData(GotConsole);
                                    else
                                        Session.Selected.Team.Console = null;

                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "projects":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ProjectData? GotProject = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId ProjectId) || !_DB.Projects.Cache.TryGetValue(ProjectId, out GotProject))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.ProjectVanityUrls.TryGetValue(service_id, out ObjectId projectId))
                                    {
                                        _DB.Projects.Cache.TryGetValue(projectId, out GotProject);
                                    }
                                }


                                if (GotProject != null && (Session.Selected.Project == null || !Session.Selected.Team.Project.IsVisible || Session.Selected.Project.Id != GotProject.Id))
                                {
                                    if (Member.TeamId == GotProject.TeamId && Member.HasProjectPermission(Team, GotProject, ProjectPermission.ViewProject))
                                        Session.Selected.Team.Project = new SelectedProjectData(GotProject);
                                    else
                                        Session.Selected.Team.Project = null;

                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "logs":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                LogData? GotLog = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId LogId) || !_DB.Logs.Cache.TryGetValue(LogId, out GotLog))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.LogVanityUrls.TryGetValue(service_id, out ObjectId logId))
                                    {
                                        _DB.Logs.Cache.TryGetValue(logId, out GotLog);
                                    }
                                }

                                if (GotLog != null && (Session.Selected.Log == null || Session.Selected.Log.Id != GotLog.Id))
                                {

                                    if (Member.TeamId == GotLog.TeamId && GotLog != null && (Session.Selected.Log == null || !Session.Selected.Team.Log.IsVisible || Session.Selected.Log.Id != GotLog.Id))
                                    {
                                        if (Member.HasLogPermission(Team, GotLog, LogPermission.ViewLog))
                                            Session.Selected.Team.Log = new SelectedLogData(GotLog);
                                        else
                                            Session.Selected.Team.Log = null;
                                        UpdateNav = true;
                                    }
                                }
                            }
                        }
                        break;
                    case "websites":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                WebsiteData? GotWebsite = null;
                                if (!ObjectId.TryParse(service_id, out ObjectId WebsiteId) || !_DB.Websites.Cache.TryGetValue(WebsiteId, out GotWebsite))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out VanityUrlData? vanity) && vanity.WebsiteVanityUrls.TryGetValue(service_id, out ObjectId websiteId))
                                    {
                                        _DB.Websites.Cache.TryGetValue(websiteId, out GotWebsite);
                                    }
                                }

                                if (GotWebsite != null && (Session.Selected.Website == null || !Session.Selected.Team.Website.IsVisible || Session.Selected.Website.Id != GotWebsite.Id))
                                {
                                    if (Member.TeamId == GotWebsite.TeamId && Member.HasWebsitePermission(Team, GotWebsite, WebsitePermission.ViewWebsite))
                                        Session.Selected.Team.Website = new SelectedWebsiteData(GotWebsite);
                                    else
                                        Session.Selected.Team.Website = null;


                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                }


            }

            if (UpdateNav)
            {
                Session.TriggerNavMenuChange();
            }
        }

    }
}