@page "/teams/{team_id?}/{service?}/{service_id?}/{resource_type?}/{resource_data?}"
@using DevSpaceWeb.Components.Pages.Server.DockerTools

@if (Session.Selected.Team == null)
{

}
else
{
    switch (service)
    {
        case "home":
        case null:
        case "":
            {
                <TeamHome></TeamHome>
            }
            break;
        case "settings":
            {
                <TeamSettings></TeamSettings>
            }
            break;
        case "servers":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ServerList></ServerList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ServerHome></ServerHome>
                            break;
                        case "databases":
                            <ServerDatabase></ServerDatabase>
                            break;
                        case "stacks":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerStacks></ServerDockerStacks>
                            }
                            else
                            {
                                <ServerDockerStackInfo StackId="@resource_data"></ServerDockerStackInfo>
                            }
                            break;
                        case "containers":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerContainers></ServerDockerContainers>
                            }
                            else
                            {
                                <ServerDockerContainerInfo ContainerId="@resource_data"></ServerDockerContainerInfo>
                            }
                            break;
                        case "plugins":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerPlugins></ServerDockerPlugins>
                            }
                            else
                            {
                                <ServerDockerPluginInfo PluginInfo="@resource_data"></ServerDockerPluginInfo>
                            }
                            break;
                        case "images":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerImages></ServerDockerImages>
                            }
                            else
                            {
                                <ServerDockerImageInfo ImageId="@resource_data"></ServerDockerImageInfo>
                            }
                            break;
                        case "networks":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerNetworks></ServerDockerNetworks>
                            }
                            else
                            {
                                <ServerDockerNetworkInfo NetworkId="@resource_data"></ServerDockerNetworkInfo>
                            }
                            break;
                        case "volumes":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerVolumes></ServerDockerVolumes>
                            }
                            else
                            {
                                <ServerDockerVolumeInfo VolumeId="@resource_data"></ServerDockerVolumeInfo>
                            }
                            break;
                        case "execute":
                            <ServerDockerExecute></ServerDockerExecute>
                            break;
                        case "registry":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerRegistry></ServerDockerRegistry>
                            }
                            else
                            {
                                <ServerDockerRegistryInfo RegistryId="@resource_data"></ServerDockerRegistryInfo>
                            }
                            break;
                        case "firewall":
                            <ServerFirewall></ServerFirewall>
                            break;
                        case "files":
                            <ServerFiles></ServerFiles>
                            break;
                        case "ssh":
                            <ServerSSH></ServerSSH>
                            break;
                        case "status":
                            <ServerStatus></ServerStatus>
                            break;
                        case "webhooks":
                            <ServerWebhooks></ServerWebhooks>
                            break;
                        case "info":
                            <ServerSystemInfo></ServerSystemInfo>
                            break;
                    }
                }

            }
            break;
        case "projects":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ProjectsList></ProjectsList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ProjectsHome></ProjectsHome>
                            break;
                    }
                }

            }
            break;
        case "logs":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <LogsList></LogsList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":

                            break;
                        case "home":

                            <LogsHome></LogsHome>
                            break;
                    }
                }

}
            break;
        case "websites":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
<WebsitesList></WebsitesList>
                }
                else
                {
                    switch (resource_type)
                {
                    case null:
                    case "":
                    case "home":
                        <WebsiteHome></WebsiteHome>
                        break;
                }
                
                }
                
            }
            break;
    }
}

@code {
    [Parameter]
    public string team_id { get; set; } = "";

    [Parameter]
    public string service { get; set; } = "";

    [Parameter]
    public string service_id { get; set; } = "";

    [Parameter]
    public string resource_type { get; set; } = "";

    [Parameter]
    public string resource_data { get; set; } = "";

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(team_id))
        {

            bool UpdateNav = false;

            TeamData? Team = null;
            if (!_DB.Teams.Cache.TryGetValue(team_id, out Team))
            {
                if (_DB.TeamsVanityCache.TryGetValue(team_id, out var tmid))
                    Team = tmid;
            }

            if (Team != null && (Session.Selected.Team == null || Session.Selected.Team.Data.Id != Team.Id))
            {
                Session.Selected.Team = new SelectedTeamData(Team);
                UpdateNav = true;


            }

            if (Session.Selected.Team != null)
            {
                switch (service)
                {
                    case "servers":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ServerData? Server = null;
                                if (!_DB.Servers.Cache.TryGetValue(service_id, out Server))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Id, out var vanity) && vanity.ServerVanityUrls.TryGetValue(service_id, out var serverId))
                                    {
                                        _DB.Servers.Cache.TryGetValue(serverId.ToString(), out Server);
                                    }
                                }

                                if (Server != null && (Session.Selected.Server == null || Session.Selected.Server.Data.Id != Server.Id))
                                {
                                    Session.Selected.Team.Server = new SelectedServerData(Session.Selected.Team, Server);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "projects":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ProjectData? Project = null;
                                if (!_DB.Projects.Cache.TryGetValue(service_id, out Project))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Id, out var vanity) && vanity.ProjectVanityUrls.TryGetValue(service_id, out var projectId))
                                    {
                                        _DB.Projects.Cache.TryGetValue(projectId.ToString(), out Project);
                                    }
                                }


                                if (Project != null && (Session.Selected.Project == null || Session.Selected.Project.Data.Id != Project.Id))
                                {
                                    Session.Selected.Team.Project = new SelectedProjectData(Session.Selected.Team, Project);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "logs":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                LogData? Log = null;
                                if (!_DB.Logs.Cache.TryGetValue(service_id, out Log))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Id, out var vanity) && vanity.LogsVanityUrls.TryGetValue(service_id, out var logId))
                                    {
                                        _DB.Logs.Cache.TryGetValue(logId.ToString(), out Log);
                                    }
                                }

                                if (Log != null && (Session.Selected.Log == null || Session.Selected.Log.Data.Id != Log.Id))
                                {
                                    Session.Selected.Team.Log = new SelectedLogData(Session.Selected.Team, Log);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "websites":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                WebsiteData? Website = null;
                                if (!_DB.Websites.Cache.TryGetValue(service_id, out Website))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Id, out var vanity) && vanity.WebsiteVanityUrls.TryGetValue(service_id, out var websiteId))
                                    {
                                        _DB.Websites.Cache.TryGetValue(websiteId.ToString(), out Website);
                                    }
                                }

                                if (Website != null && (Session.Selected.Website == null || Session.Selected.Website.Data.Id != Website.Id))
                                {
                                    Session.Selected.Team.Website = new SelectedWebsiteData(Session.Selected.Team, Website);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                }


            }

            if (UpdateNav)
            {
                Session.TriggerChange();
            }
        }

    }
}