@page "/teams/{team_id?}/{service?}/{service_id?}/{resource_type?}/{resource_data?}"
@using DevSpaceWeb.Components.Pages.Server.DockerTools

@if (Session.Selected.Team == null || Member == null)
{
    <p>This team does not exist.</p>
}
else
{
    switch (service)
    {
        case "home":
        case null:
        case "":
            {
                <TeamHome></TeamHome>
            }
            break;
        case "settings":
            {
                <TeamSettings></TeamSettings>
            }
            break;
        case "servers":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ServerList></ServerList>
                }
                else if (Session.Selected.Server == null || !Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ViewServer))
                {
                    <p>This server does not exist.</p>
                }
                else
                {
                    @if (Session.Selected.Server.Data.GetWebSocket() == null)
                    {
                        <ServerConnectionError></ServerConnectionError>
                    }
                    else
                    {
                        switch (resource_type)
                        {
                            case null:
                            case "":
                            case "home":
                                <ServerHome></ServerHome>
                                break;
                            case "settings":
                                <ServerSettings></ServerSettings>
                                break;
                            case "databases":
                                <ServerDatabase></ServerDatabase>
                                break;
                            case "stacks":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewContainers))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Containers.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerStacks></ServerDockerStacks>
                                }
                                else
                                {
                                    <ServerDockerStackInfo StackId="@resource_data"></ServerDockerStackInfo>
                                }
                                break;
                            case "containers":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewContainers))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Containers.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerContainers></ServerDockerContainers>
                                }
                                else
                                {
                                    <ServerDockerContainerInfo ContainerId="@resource_data"></ServerDockerContainerInfo>
                                }
                                break;
                            case "plugins":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewPlugins))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Plugins.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerPlugins></ServerDockerPlugins>
                                }
                                else
                                {
                                    <ServerDockerPluginInfo PluginInfo="@resource_data"></ServerDockerPluginInfo>
                                }
                                break;
                            case "images":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewImages))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Images.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerImages></ServerDockerImages>
                                }
                                else
                                {
                                    <ServerDockerImageInfo ImageId="@resource_data"></ServerDockerImageInfo>
                                }
                                break;
                            case "networks":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewNetworks))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Networks.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerNetworks></ServerDockerNetworks>
                                }
                                else
                                {
                                    <ServerDockerNetworkInfo NetworkId="@resource_data"></ServerDockerNetworkInfo>
                                }
                                break;
                            case "volumes":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewVolumes))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Volumes.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerVolumes></ServerDockerVolumes>
                                }
                                else
                                {
                                    <ServerDockerVolumeInfo VolumeId="@resource_data"></ServerDockerVolumeInfo>
                                }
                                break;
                            case "execute":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerDockerExecute></ServerDockerExecute>
                                }

                                break;
                            case "registry":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewRegistries))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Registries.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerRegistry></ServerDockerRegistry>
                                }
                                else
                                {
                                    <ServerDockerRegistryInfo RegistryId="@resource_data"></ServerDockerRegistryInfo>
                                }
                                break;
                            case "firewall":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else if (Session.Selected.Server.Data.GetWebSocket().Client.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerFirewall></ServerFirewall>
                                }

                                break;
                            case "files":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else if (Session.Selected.Server.Data.GetWebSocket().Client.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerFiles></ServerFiles>
                                }

                                break;
                            case "ssh":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else if (Session.Selected.Server.Data.GetWebSocket().Client.IsRunningDockerContainer)
                                {
                                    <ServerLimitedControlError></ServerLimitedControlError>
                                }
                                else
                                {
                                    <ServerSSH></ServerSSH>
                                }

                                break;
                            case "status":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerStatus></ServerStatus>
                                }

                                break;
                            case "webhooks":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerWebhooks></ServerWebhooks>
                                }

                                break;
                            case "info":
                                @if (!Member.HasServerPermission(Session.Selected.Server.Data, ServerPermission.ServerAdministrator))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for Server Administrator.
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <ServerSystemInfo></ServerSystemInfo>
                                }

                                break;
                            case "templates":
                                @if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewTemplates))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                        You do not have permission for View Templates.
                                    </RadzenAlert>
                                }
                                else if (string.IsNullOrEmpty(resource_data))
                                {
                                    <ServerDockerAppTemplates></ServerDockerAppTemplates>
                                }
                                else if (resource_data.Equals("custom"))
                                {
                                    if (!Member.HasDockerPermission(Session.Selected.Server.Data, DockerPermission.ViewCustomTemplates))
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            You do not have permission for View Custom Templates.
                                        </RadzenAlert>
                                    }
                                    else
                                    {
                                        <ServerDockerCustomTemplates></ServerDockerCustomTemplates>
                                    }
                                }
                                break;
                        }
                    }
                }

            }
            break;
        case "projects":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ProjectsList></ProjectsList>
                }
                else if (Session.Selected.Project == null || !Member.HasProjectPermission(Session.Selected.Project.Data, ProjectPermission.ViewProject))
                {
                    <p>This project does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ProjectsHome></ProjectsHome>
                            break;
                    }
                }

            }
            break;
        case "logs":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <LogsList></LogsList>
                }
                else if (Session.Selected.Log == null || !Member.HasLogPermission(Session.Selected.Log.Data, LogPermission.ViewLog))
                {
                    <p>This log does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":

                            <LogsHome></LogsHome>
                            break;
                    }
                }

            }
            break;
        case "websites":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <WebsitesList></WebsitesList>
                }
                else if (Session.Selected.Website == null || !Member.HasWebsitePermission(Session.Selected.Website.Data, WebsitePermission.ViewWebsite))
                {
                    <p>This website does not exist.</p>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <WebsiteHome></WebsiteHome>
                            break;
                    }

                }

            }
            break;
    }
}

@code {
    [Parameter]
    public string team_id { get; set; } = "";

    [Parameter]
    public string service { get; set; } = "";

    [Parameter]
    public string service_id { get; set; } = "";

    [Parameter]
    public string resource_type { get; set; } = "";

    [Parameter]
    public string resource_data { get; set; } = "";

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(team_id))
        {

            bool UpdateNav = false;

            TeamData? Team = null;
            if (!ObjectId.TryParse(team_id, out var TeamId) || !_DB.Teams.Cache.TryGetValue(TeamId, out Team))
            {
                if (_DB.TeamsVanityCache.TryGetValue(team_id, out var tmid))
                    Team = tmid;
            }

            if (Team != null && (Session.Selected.Team == null || Session.Selected.Team.Data.Id != Team.Id))
            {
                Session.Selected.Team = new SelectedTeamData(Team);
                Session.Selected.Member = Team.GetMember(Session)!;
                UpdateNav = true;
            }

            if (Session.Selected.Team != null)
            {
                switch (service)
                {
                    case "servers":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ServerData? Server = null;
                                if (!ObjectId.TryParse(service_id, out var ServiceId) || !_DB.Servers.Cache.TryGetValue(ServiceId, out Server))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.ServerVanityUrls.TryGetValue(service_id, out var serverId))
                                    {
                                        _DB.Servers.Cache.TryGetValue(serverId, out Server);
                                    }
                                }

                                if (Server != null && (Session.Selected.Server == null || Session.Selected.Server.Data.Id != Server.Id))
                                {
                                    Session.Selected.Team.Server = new SelectedServerData(Session.Selected.Team, Server);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "projects":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ProjectData? Project = null;
                                if (!ObjectId.TryParse(service_id, out var ProjectId) || !_DB.Projects.Cache.TryGetValue(ProjectId, out Project))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.ProjectVanityUrls.TryGetValue(service_id, out var projectId))
                                    {
                                        _DB.Projects.Cache.TryGetValue(projectId, out Project);
                                    }
                                }


                                if (Project != null && (Session.Selected.Project == null || Session.Selected.Project.Data.Id != Project.Id))
                                {
                                    Session.Selected.Team.Project = new SelectedProjectData(Session.Selected.Team, Project);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "logs":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                LogData? Log = null;
                                if (!ObjectId.TryParse(service_id, out var LogId) || !_DB.Logs.Cache.TryGetValue(LogId, out Log))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.LogsVanityUrls.TryGetValue(service_id, out var logId))
                                    {
                                        _DB.Logs.Cache.TryGetValue(logId, out Log);
                                    }
                                }

                                if (Log != null && (Session.Selected.Log == null || Session.Selected.Log.Data.Id != Log.Id))
                                {
                                    Session.Selected.Team.Log = new SelectedLogData(Session.Selected.Team, Log);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "websites":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                WebsiteData? Website = null;
                                if (!ObjectId.TryParse(service_id, out var WebsiteId) || !_DB.Websites.Cache.TryGetValue(WebsiteId, out Website))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.WebsiteVanityUrls.TryGetValue(service_id, out var websiteId))
                                    {
                                        _DB.Websites.Cache.TryGetValue(websiteId, out Website);
                                    }
                                }

                                if (Website != null && (Session.Selected.Website == null || Session.Selected.Website.Data.Id != Website.Id))
                                {
                                    Session.Selected.Team.Website = new SelectedWebsiteData(Session.Selected.Team, Website);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                }


            }

            if (UpdateNav)
            {
                Session.TriggerNavMenuChange();
            }
        }

    }
}