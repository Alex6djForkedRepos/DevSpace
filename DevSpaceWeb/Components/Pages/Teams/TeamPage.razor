@page "/teams/{team_id?}/{service?}/{service_id?}/{resource_type?}/{resource_data?}"
@using DevSpaceWeb.Components.Pages.Server.DockerTools

@if (Session.Selected.Team == null || Member == null)
{
    <p>This team does not exist</p>
}
else
{
    switch (service)
    {
        case "home":
        case null:
        case "":
            {
                <TeamHome Member="@Member"></TeamHome>
            }
            break;
        case "settings":
            {
                <TeamSettings Member="@Member"></TeamSettings>
            }
            break;
        case "servers":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ServerList Member="@Member"></ServerList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ServerHome Member="@Member"></ServerHome>
                            break;
                        case "databases":
                            <ServerDatabase Member="@Member"></ServerDatabase>
                            break;
                        case "stacks":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerStacks Member="@Member"></ServerDockerStacks>
                            }
                            else
                            {
                                <ServerDockerStackInfo StackId="@resource_data" Member="@Member"></ServerDockerStackInfo>
                            }
                            break;
                        case "containers":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerContainers Member="@Member"></ServerDockerContainers>
                            }
                            else
                            {
                                <ServerDockerContainerInfo ContainerId="@resource_data" Member="@Member"></ServerDockerContainerInfo>
                            }
                            break;
                        case "plugins":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerPlugins Member="@Member"></ServerDockerPlugins>
                            }
                            else
                            {
                                <ServerDockerPluginInfo PluginInfo="@resource_data" Member="@Member"></ServerDockerPluginInfo>
                            }
                            break;
                        case "images":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerImages Member="@Member"></ServerDockerImages>
                            }
                            else
                            {
                                <ServerDockerImageInfo ImageId="@resource_data" Member="@Member"></ServerDockerImageInfo>
                            }
                            break;
                        case "networks":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerNetworks Member="@Member"></ServerDockerNetworks>
                            }
                            else
                            {
                                <ServerDockerNetworkInfo NetworkId="@resource_data" Member="@Member"></ServerDockerNetworkInfo>
                            }
                            break;
                        case "volumes":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerVolumes Member="@Member"></ServerDockerVolumes>
                            }
                            else
                            {
                                <ServerDockerVolumeInfo VolumeId="@resource_data" Member="@Member"></ServerDockerVolumeInfo>
                            }
                            break;
                        case "execute":
                            <ServerDockerExecute Member="@Member"></ServerDockerExecute>
                            break;
                        case "registry":
                            @if (string.IsNullOrEmpty(resource_data))
                            {
                                <ServerDockerRegistry Member="@Member"></ServerDockerRegistry>
                            }
                            else
                            {
                                <ServerDockerRegistryInfo RegistryId="@resource_data" Member="@Member"></ServerDockerRegistryInfo>
                            }
                            break;
                        case "firewall":
                            <ServerFirewall Member="@Member"></ServerFirewall>
                            break;
                        case "files":
                            <ServerFiles Member="@Member"></ServerFiles>
                            break;
                        case "ssh":
                            <ServerSSH Member="@Member"></ServerSSH>
                            break;
                        case "status":
                            <ServerStatus Member="@Member"></ServerStatus>
                            break;
                        case "webhooks":
                            <ServerWebhooks Member="@Member"></ServerWebhooks>
                            break;
                        case "info":
                            <ServerSystemInfo Member="@Member"></ServerSystemInfo>
                            break;
                    }
                }

            }
            break;
        case "projects":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <ProjectsList Member="@Member"></ProjectsList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <ProjectsHome Member="@Member"></ProjectsHome>
                            break;
                    }
                }

            }
            break;
        case "logs":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <LogsList Member="@Member"></LogsList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":

                            break;
                        case "home":

                            <LogsHome Member="@Member"></LogsHome>
                            break;
                    }
                }

            }
            break;
        case "websites":
            {
                @if (string.IsNullOrEmpty(service_id))
                {
                    <WebsitesList Member="@Member"></WebsitesList>
                }
                else
                {
                    switch (resource_type)
                    {
                        case null:
                        case "":
                        case "home":
                            <WebsiteHome Member="@Member"></WebsiteHome>
                            break;
                    }

                }

            }
            break;
    }
}

@code {
    [Parameter]
    public string team_id { get; set; } = "";

    [Parameter]
    public string service { get; set; } = "";

    [Parameter]
    public string service_id { get; set; } = "";

    [Parameter]
    public string resource_type { get; set; } = "";

    [Parameter]
    public string resource_data { get; set; } = "";

    public TeamMemberData Member { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(team_id))
        {

            bool UpdateNav = false;

            TeamData? Team = null;
            if (!ObjectId.TryParse(team_id, out var TeamId) || !_DB.Teams.Cache.TryGetValue(TeamId, out Team))
            {
                if (_DB.TeamsVanityCache.TryGetValue(team_id, out var tmid))
                    Team = tmid;
            }

            if (Team != null && (Session.Selected.Team == null || Session.Selected.Team.Data.Id != Team.Id))
            {
                Session.Selected.Team = new SelectedTeamData(Team);
                Member = Team.GetMember(Session)!;
                UpdateNav = true;
            }

            if (Session.Selected.Team != null)
            {
                switch (service)
                {
                    case "servers":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ServerData? Server = null;
                                if (!ObjectId.TryParse(service_id, out var ServiceId) || !_DB.Servers.Cache.TryGetValue(ServiceId, out Server))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.ServerVanityUrls.TryGetValue(service_id, out var serverId))
                                    {
                                        _DB.Servers.Cache.TryGetValue(serverId, out Server);
                                    }
                                }

                                if (Server != null && (Session.Selected.Server == null || Session.Selected.Server.Data.Id != Server.Id))
                                {
                                    Session.Selected.Team.Server = new SelectedServerData(Session.Selected.Team, Server);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "projects":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                ProjectData? Project = null;
                                if (!ObjectId.TryParse(service_id, out var ProjectId) || !_DB.Projects.Cache.TryGetValue(ProjectId, out Project))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.ProjectVanityUrls.TryGetValue(service_id, out var projectId))
                                    {
                                        _DB.Projects.Cache.TryGetValue(projectId, out Project);
                                    }
                                }


                                if (Project != null && (Session.Selected.Project == null || Session.Selected.Project.Data.Id != Project.Id))
                                {
                                    Session.Selected.Team.Project = new SelectedProjectData(Session.Selected.Team, Project);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "logs":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                LogData? Log = null;
                                if (!ObjectId.TryParse(service_id, out var LogId) || !_DB.Logs.Cache.TryGetValue(LogId, out Log))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.LogsVanityUrls.TryGetValue(service_id, out var logId))
                                    {
                                        _DB.Logs.Cache.TryGetValue(logId, out Log);
                                    }
                                }

                                if (Log != null && (Session.Selected.Log == null || Session.Selected.Log.Data.Id != Log.Id))
                                {
                                    Session.Selected.Team.Log = new SelectedLogData(Session.Selected.Team, Log);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                    case "websites":
                        {
                            if (!string.IsNullOrEmpty(service_id))
                            {
                                WebsiteData? Website = null;
                                if (!ObjectId.TryParse(service_id, out var WebsiteId) || !_DB.Websites.Cache.TryGetValue(WebsiteId, out Website))
                                {
                                    if (_DB.TeamVanityUrls.Cache.TryGetValue(Session.Selected.Team.Data.Id, out var vanity) && vanity.WebsiteVanityUrls.TryGetValue(service_id, out var websiteId))
                                    {
                                        _DB.Websites.Cache.TryGetValue(websiteId, out Website);
                                    }
                                }

                                if (Website != null && (Session.Selected.Website == null || Session.Selected.Website.Data.Id != Website.Id))
                                {
                                    Session.Selected.Team.Website = new SelectedWebsiteData(Session.Selected.Team, Website);
                                    UpdateNav = true;
                                }
                            }
                        }
                        break;
                }


            }

            if (UpdateNav)
            {
                Session.TriggerChange();
            }
        }

    }
}