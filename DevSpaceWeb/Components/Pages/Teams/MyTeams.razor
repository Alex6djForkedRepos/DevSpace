@page "/teams"
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService

<PageTitle>My Teams | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:account-supervisor-circle"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">My Teams</RadzenText>
        <br/>
        <br />
    </div>
    <br />
    <div style="display: flex; align-items: flex-start; flex-wrap: wrap;">
        @foreach (TeamData i in _DB.Teams.Cache.Values.Where(x => Session.CurrentUser != null &&x.Members.ContainsKey(Session.CurrentUser.Id)).OrderBy(x => x.Name))
        {
            <a href="teams/@i.GetVanityUrlOrId()" style="color: cornflowerblue">
                <div Class="team-item">
                    <RadzenText TextStyle="TextStyle.Subtitle1">@i.Name</RadzenText>
                    <img src="@i.GetIconOrDefault()">
                </div>
            </a>
        }
        <div Class="team-item team-item-add" @onclick="@CreateTeam" style="cursor: pointer;">
            <img src="https://cdn.fluxpoint.dev/devspace/team_add.webp">
        </div>
    </div>
</div>

<style>
    .team-item {
        display: inline-block !important;
        margin-right: 10px;
        margin-bottom: 10px;
        margin-top: 4px;
        border-radius: 8px;
        padding: 10px;
        border: 1px solid #2f2f31 !important;
        background-color: #161617 !important;
        width: 10rem;
        height: 10rem;
        text-align: center;
    }

        .team-item:hover {
            background-color: #1b1b1c !important;
            border: 1px solid #3b3b3e !important;
        }

        .team-item .rz-text-subtitle1 {
            height: 40px;
            max-height: 40px;
        }


        .team-item img {
            margin-top: 4px;
            width: var(--rz-text-h1-font-size);
            height: var(--rz-text-h1-font-size);
        }

    .team-item-add {
        padding-top: 20px;
    }

        .team-item-add img {
            margin-top: 2.5rem;
        }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public async Task CreateTeam()
    {
        if (Session.CurrentUser == null)
            return;

        await DialogService.ShowDynamicFormAsync<TeamBasicModel>("Create Team", new TeamBasicModel(), async (TeamBasicModel data) =>
            {
                string? VanityUrl = Utils.FormatVanityUrl(data.VanityUrl);
                if (!string.IsNullOrEmpty(VanityUrl) && _DB.TeamsVanityCache.ContainsKey(VanityUrl))
                    return Lang.Errors.vanity_url_already_taken;

                TeamData Team = new TeamData
                {
                    Name = data.Name,
                    VanityUrl = VanityUrl,
                    OwnerId = Session.CurrentUser.Id,
                    Require2FA = data.MembersRequire2FA
                };
                await _DB.Teams.CreateAsync(Team);
                TeamMemberData Member = new TeamMemberData()
                {
                    UserId = Session.CurrentUser.Id,
                    TeamId = Team.Id
                };

                await _DB.Members.CreateAsync(Member);


                await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, new Dictionary<ObjectId, ObjectId>
                {
                    { Member.UserId, Member.Id }
                }), () =>
                {
                    _DB.Members.Cache.TryAdd(Member.Id, Member);
                    Team.Members.Add(Member.UserId, Member.Id);
                    Team.CachedMembers.Add(Member.Id, Member);
                });


                if (!string.IsNullOrEmpty(VanityUrl))
                {
                    VanityUrlData Vanity = new VanityUrlData
                    {

                    };
                    await _DB.TeamVanityUrls.CreateAsync(Vanity);
                    _DB.TeamsVanityCache.TryAdd(VanityUrl, Team);
                    _DB.VanityUrlCache.TryAdd(Team.Id, VanityUrl);
                }

                _DB.Teams.Cache.TryAdd(Team.Id, Team);


                _ = InvokeAsync(StateHasChanged);
                return null;
            });
    }
}
