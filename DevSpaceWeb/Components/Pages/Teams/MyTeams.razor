@page "/teams"
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:account"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">My Teams</RadzenText>
    </div>
    <br />
    <div style="display: flex; align-items: flex-start;">
        @foreach (TeamData i in _DB.Teams.Cache.Values.Where(x => x.Members.ContainsKey(Session.CurrentUserId.Value)))
        {
            <a href="teams/@i.GetVanityUrl()" style="color: cornflowerblue">
                <div Class="team-item">
                    <h4>@i.Name</h4>
                    <img src="@i.GetIconOrDefault()">
                </div>
            </a>
        }
        <div Class="team-item" @onclick="@CreateTeam" style="cursor: pointer;">
            <h4>⠀</h4>
            <img src="https://cdn.fluxpoint.dev/devspace/team_add.webp">
        </div>
    </div>
</div>

<style>
    .team-item {
    display: inline-block !important;
    margin-right: 10px;
    margin-bottom: 10px;
    margin-top: 4px;
    border-radius: 8px;
    padding: 10px;
    border: 1px solid #2f2f31 !important;
    background-color: #161617 !important;
    width: 180px;
    height: 180px;
    text-align: center;
    }

    .team-item:hover {
    background-color: #1b1b1c !important;
    border: 1px solid #3b3b3e !important;
    }

    .mud-paper h4 {
    height: 40px;
    max-height: 40px;
    }

    .team-item img {
    width: 100px;
    height: 100px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public async Task CreateTeam()
    {
        await DialogService.ShowDynamicFormAsync<TeamBasicModel>("Create Team", new TeamBasicModel(), async (TeamBasicModel data) =>
            {
                string VanityUrl = data.VanityUrl.Replace(" ", "-").ToLower();
                if (_DB.TeamsVanityCache.ContainsKey(VanityUrl))
                    return "This vanity url is already taken.";

                TeamData Team = new TeamData
                {
                    Name = data.Name,
                    VanityUrl = VanityUrl,
                    OwnerId = Session.CurrentUserId.Value
                };
                await _DB.Teams.CreateAsync(Team);
                    TeamMemberData Member = new TeamMemberData()
                    {
                        UserId = Session.CurrentUserId.Value,
                        TeamId = Team.Id
                    };

                    await _DB.Members.CreateAsync(Member);

                    _DB.Members.Cache.TryAdd(Member.Id, Member);
                    Team.Members.Add(Member.UserId, Member.Id);
                    Team.CachedMembers.Add(Member.Id, Member);
                    try
                    {
                        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Team.Members));
                    }
                    catch
                    {
                        throw new Exception("Failed");
                    }

                    if (!string.IsNullOrEmpty(VanityUrl))
                    {
                    VanityUrlData Vanity = new VanityUrlData
                        {

                        };
                        await _DB.TeamVanityUrls.CreateAsync(Vanity);
                        _DB.TeamsVanityCache.TryAdd(VanityUrl, Team);
                        _DB.VanityUrlCache.TryAdd(Team.Id, VanityUrl);
                    }

                _DB.Teams.Cache.TryAdd(Team.Id, Team);
                

                InvokeAsync(StateHasChanged);
                return null;
            });
    }
}
