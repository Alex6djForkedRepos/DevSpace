@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models.Defaults
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService

<PageTitle>Team Members | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Team.Name Members</RadzenText>
    </div>


    @if (!Member.HasTeamPermission(TeamPermission.ViewMembers))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Members.
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Member" Click="@AddMember" />
        <br />
        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Members">
            <Template Context="user">
                <RadzenCard Style="width:300px;">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        @if (_DB.Users.TryGetValue(user.UserId, out PartialUserData ud))
                        {
                            <RadzenImage Path="@ud.GetAvatarOrDefault()" Style="width: 80px; height: 80px; border-radius: 50%" />
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Username</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @ud.UserName
                                </RadzenText>
                            </RadzenStack>
                        }
                        else
                        {
                            <RadzenImage Path="https://cdn.fluxpoint.dev/devspace/user_avatar.webp" Style="width: 80px; height: 80px; border-radius: 50%" />
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Account Deleted</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    @user.ToString()
                                </RadzenText>
                            </RadzenStack>
                        }
                    </RadzenStack>
                    <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                    <RadzenStack Gap="6px" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                        @if (_DB.Users.TryGetValue(user.UserId, out PartialUserData ud))
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Change Roles" Click="@(() => ChangeMemberRoles(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.AssignRoles))" />
                            @if (user.UserId != Team.OwnerId)
                            {
                                @if (user.Disabled == null)
                                {
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Disable" Click="@(() => DisableMember(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))"></RadzenButton>
                                }
                                else
                                {
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Disable" Click="@(() => DisableMember(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))"></RadzenButton>

                                }

                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Transfer Ownership" Click="@(() => TransferOwnership(ud))" />
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(ud.Id))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))" />
                            }

                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(user.UserId))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))" />
                        }
                    </RadzenStack>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        Members = Team.CachedMembers.Values;
    }

    public IEnumerable<TeamMemberData> Members { get; set; }

    public async Task EnableMember(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        await DialogService.ShowDynamicFormAsync<ReasonModel>("Enable Member " + user.UserName, new ReasonModel(), async (ReasonModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members.";

            if (user.ManagedAccountTeamId.HasValue)
            {
                FilterDefinition<AuthUser> filter = Builders<AuthUser>.Filter.Eq(r => r.Id, user.Id);
                UpdateDefinition<AuthUser> update = Builders<AuthUser>.Update.Set(x => x.Disabled, null);
                UpdateResult Result = _DB.Client.GetDatabase(_Data.Config.Database.Name).GetCollection<AuthUser>("users").UpdateOne(filter, update);
                if (!Result.IsAcknowledged)
                    return "Failed to enable user";
            }
            _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);

            await Team.GetMember(user).UpdateAsync(Builders<TeamMemberData>.Update.Set(x => x.Disabled, null));
            Team.GetMember(user).Disabled = null;
            return null;
        });
    }

    public async Task DisableMember(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        await DialogService.ShowDynamicFormAsync<ReasonModel>("Disable Member " + user.UserName, new ReasonModel(), async (ReasonModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members.";

            UserDisabled Disabled = new UserDisabled
            {
                DisabledAt = DateTime.UtcNow,
                State = UserDisabledState.TeamManaged,
                Reason = data.Reason
            };
            if (user.ManagedAccountTeamId.HasValue)
            {
                FilterDefinition<AuthUser> filter = Builders<AuthUser>.Filter.Eq(r => r.Id, user.Id);
                UpdateDefinition<AuthUser> update = Builders<AuthUser>.Update.Set(x => x.Disabled, Disabled);
                UpdateResult Result = _DB.Client.GetDatabase(_Data.Config.Database.Name).GetCollection<AuthUser>("users").UpdateOne(filter, update);
                if (!Result.IsAcknowledged)
                    return "Failed to disable user";
            }
            _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);

            await Team.GetMember(user).UpdateAsync(Builders<TeamMemberData>.Update.Set(x => x.Disabled, Disabled));
            Team.GetMember(user).Disabled = Disabled;
            return null;
        });
    }

    public async Task AddMember()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        await DialogService.ShowDynamicFormAsync<TeamAddUserModel>("Add Team User", new TeamAddUserModel(), async (TeamAddUserModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members.";

            PartialUserData? user = _DB.Users.Values.FirstOrDefault(x => x.Email.Equals(data.Email, StringComparison.OrdinalIgnoreCase));
            if (user == null)
                return "Could not find a user account with that email address.";

            if (user.ManagedAccountTeamId.HasValue)
                return "This user account is managed by another team.";

            if (Team.Members.ContainsKey(user.Id))
                return "This user account has already been added to the team.";

            TeamMemberData memberData = new TeamMemberData
                {
                    TeamId = Team.Id,
                    UserId = user.Id
                };

            try
            {
                await _DB.Members.CreateAsync(memberData);
            }
            catch
            {
                return "Failed to create member.";
            }
            _DB.Members.Cache.TryAdd(memberData.Id, memberData);
            Team.Members.Add(user.Id, memberData.Id);
            Team.CachedMembers.Add(memberData.Id, memberData);
            try
            {
                await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Team.Members));
                _DB.AuditLogs.CreateAsync(new AuditLog(Session.CurrentUserId.Value, Team.Id, AuditLogCategoryType.Member, AuditLogEventType.MemberAdded).SetTarget(AuditLogTargetType.Team, Team.Id));
            }
            catch
            {
                _DB.Members.Cache.Remove(memberData.Id, out _);
                Team.Members.Remove(user.Id);
                Team.CachedMembers.Remove(memberData.Id);
                return "Failed to add user.";
                }
            return string.Empty;
        });
    }

    public async Task TransferOwnership(PartialUserData user)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Team Ownership Transfer", $"This will give ownership of team {Team.Name} to the account {user.UserName}, are you sure you want to continue?", "Yes", ButtonStyle.Success);
        if (!Confirm)
            return;

        AuthUser User = await Session.GetCurrentUserAsync();

        bool twoFactorConfirm = await Session.TriggerTwoFactorAuthentication(User, true, true);
        if (!twoFactorConfirm)
            return;

        if (Member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.OwnerId, user.Id));
        _DB.AuditLogs.CreateAsync(new AuditLog(Session.CurrentUserId.Value, Team.Id, AuditLogCategoryType.Member, AuditLogEventType.OwnershipTransfered).SetTarget(AuditLogTargetType.User, user.Id));
        Team.OwnerId = user.Id;

    }

    public async Task RemoveTeamMember(ObjectId user)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        Team.Members.TryGetValue(user, out ObjectId SelectedMember);

        if (SelectedMember == null)
            return;

        Team.Members.Remove(user);
        try
        {
            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Team.Members));
            _DB.Members.Cache.Remove(user, out _);
            _DB.AuditLogs.CreateAsync(new AuditLog(Session.CurrentUserId.Value, Team.Id, AuditLogCategoryType.Member, AuditLogEventType.MemberRemoved).SetTarget(AuditLogTargetType.User, user));
        }
        catch
        {
            Team.Members.TryAdd(user, SelectedMember);
        }

    }

    public async Task ChangeMemberRoles(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        await DialogService.OpenAsync<ChangeMemberRolesDialog>($"Update Roles for {user.UserName}", new Dictionary<string, object>()
        {
            { "Team", Team },
            { "Member", Team.GetMember(user) }
        });
    }
}
