@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models.Defaults
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService
@inject TooltipService TooltipService

<PageTitle>Team Members | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">@Team.Name Members</RadzenText>
    </div>


    @if (!Member.HasTeamPermission(TeamPermission.ViewMembers))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Members
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Member" Click="@AddMember" />
        <br />
        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Members">
            <Template Context="user">
                <RadzenCard Style="width:300px;">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        @if (_DB.Users.TryGetValue(user.UserId, out PartialUserData ud))
                        {
                            <RadzenImage Path="@ud.GetAvatarOrDefault()" Style="width: 60px; height: 60px; border-radius: 50%" />
                            <RadzenText TextStyle="TextStyle.H6">
                                @ud.UserName
                            </RadzenText>
                        }
                        else
                        {
                            <RadzenImage Path="https://cdn.fluxpoint.dev/devspace/user_avatar.webp" Style="width: 60px; height: 60px; border-radius: 50%" />
                            <RadzenText TextStyle="TextStyle.H6">
                                @user.ToString()
                            </RadzenText>
                        }
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" class="mt-3">
                        @if (user.UserId == Team.OwnerId)
                        {
                            <RadzenIcon class="filled-icon" Icon="assignment_ind" IconColor="#F0B232" />
                        }
                        else if (user.HasTeamPermission(TeamPermission.GlobalAdministrator))
                        {
                            <RadzenIcon class="filled-icon" Icon="shield_person" IconColor="#D88838" />
                        }
                        else
                        {
                            <RadzenIcon class="filled-icon" Icon="person" IconColor="#1ABC9C" />
                        }
                        <RadzenIcon class="filled-icon" Icon="person_off" IconColor="#ff3535" />
                    </RadzenStack>
                    <br />
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="@(user.Roles.Any() ? "rz-mb-1" : "rz-mb-05")">Roles</RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="6px">
                        @if (user.Roles.Any())
                        {
                            @foreach(var i in user.Roles)
                            {
                                if (Team.CachedRoles.TryGetValue(i, out var role))
                                {
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Primary" Text="@role.Name" />
                                }
                                else
                                {
                                    <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Primary" Text="Unknown Role?" />
                                }
                            }
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body2">
                                No roles
                            </RadzenText>
                        }
                    </RadzenStack>
                    <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                    <RadzenStack Gap="6px" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceEvenly">
                        <RadzenMenu>
                            <RadzenMenuItem Text="View" Icon="visibility">
                                <RadzenMenuItem Text="Info" Icon="account_circle"></RadzenMenuItem>
                                <RadzenMenuItem Text="Roles" Icon="account_circle"></RadzenMenuItem>
                                <RadzenMenuItem Text="Permissions" Icon="shield_person"></RadzenMenuItem>
                                <RadzenMenuItem Text="Resources" Icon="account_circle"></RadzenMenuItem>
                            </RadzenMenuItem>
                        </RadzenMenu>
                        <RadzenMenu>
                            <RadzenMenuItem Text="Manage" Icon="manage_accounts">
                                <RadzenMenuItem Text="Change Roles" Icon="account_circle"></RadzenMenuItem>
                                <RadzenMenuItem Text="Disable Member" Icon="account_circle"></RadzenMenuItem>
                                <RadzenMenuItem Text="Transfer Ownership" Icon="account_circle"></RadzenMenuItem>
                                <RadzenMenuItem Text="Remove Member" Icon="account_circle"></RadzenMenuItem>
                            </RadzenMenuItem>
                        </RadzenMenu>
                    </RadzenStack>

                    @* @if (_DB.Users.TryGetValue(user.UserId, out PartialUserData ud))
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Change Roles" Click="@(() => ChangeMemberRoles(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.AssignRoles))" />
                        @if (user.UserId != Team.OwnerId)
                        {
                            @if (user.Disabled == null)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Disable" Click="@(() => DisableMember(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))"></RadzenButton>
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Enable" Click="@(() => EnableMember(ud))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))"></RadzenButton>

                            }

                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Transfer Ownership" Click="@(() => TransferOwnership(ud))" />
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(ud.Id))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))" />
                        }

                    }
                    else
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(user.UserId))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageMembers))" />
                    } *@
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
</div>

<style>
    .rz-body .rz-navigation-item-wrapper .rz-navigation-item-icon, .filled-icon {
        font-variation-settings: 'FILL' 1;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        Members = Team.CachedMembers.Values;
    }

    void ShowTooltip(ElementReference elementReference, string text) => TooltipService.Open(elementReference, text, null);

    public IEnumerable<TeamMemberData> Members { get; set; }

    public async Task EnableMember(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        TeamMemberData SelectedMember = Team.GetMember(user);
        int CurrentRank = Member.GetRank();
        int SelectedRank = SelectedMember.GetRank();
        if (CurrentRank <= SelectedRank)
        {
            await DialogService.ShowInfoAsync("Access Failed", $"You do not have access to modify this member with your current roles (You {CurrentRank} | Selected {SelectedRank})");
            return;
        }

        bool Confirm = await DialogService.ShowConfirmAsync("Enable Member " + user.UserName, "Are you sure you want to enable this member?", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            if (Program.IsPreviewMode)
            {
                Session.ShowPreviewModeNotice();
                return;
            }

            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
            {
                await DialogService.ShowPermissionErrorAsync(TeamPermission.ManageMembers);
                return;
            }

            if (user.ManagedAccountTeamId.HasValue)
            {
                FilterDefinition<AuthUser> filter = Builders<AuthUser>.Filter.Eq(r => r.Id, user.Id);
                UpdateDefinition<AuthUser> update = Builders<AuthUser>.Update.Set(x => x.Disabled, null);
                UpdateResult Result = _DB.Client.GetDatabase(_Data.Config.Database.Name).GetCollection<AuthUser>("users").UpdateOne(filter, update);
                if (!Result.IsAcknowledged)
                {
                    await DialogService.ShowInfoAsync("Database Error", "Failed to enable account.");
                    return;
                }
            }


            await Team.GetMember(user).UpdateAsync(Builders<TeamMemberData>.Update.Set(x => x.Disabled, null), () =>
            {
                _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
                Team.GetMember(user).Disabled = null;
            });
        }
    }

    public async Task DisableMember(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }


        Console.WriteLine("User: " + user.Id.ToString());
        TeamMemberData SelectedMember = Team.GetMember(user);
        int CurrentRank = Member.GetRank();
        int SelectedRank = SelectedMember.GetRank();
        if (CurrentRank <= SelectedRank)
        {
            await DialogService.ShowInfoAsync("Access Failed", $"You do not have access to modify this member with your current roles (You {CurrentRank} | Selected {SelectedRank})");
            return;
        }

        await DialogService.ShowDynamicFormAsync<ReasonModel>("Disable Member " + user.UserName, new ReasonModel(), async (ReasonModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members";

            UserDisabled Disabled = new UserDisabled
            {
                DisabledAt = DateTime.UtcNow,
                State = UserDisabledState.TeamManaged,
                Reason = data.Reason
            };
            if (user.ManagedAccountTeamId.HasValue)
            {
                FilterDefinition<AuthUser> filter = Builders<AuthUser>.Filter.Eq(r => r.Id, user.Id);
                UpdateDefinition<AuthUser> update = Builders<AuthUser>.Update.Set(x => x.Disabled, Disabled);
                UpdateResult Result = _DB.Client.GetDatabase(_Data.Config.Database.Name).GetCollection<AuthUser>("users").UpdateOne(filter, update);
                if (!Result.IsAcknowledged)
                    return "Failed to disable user";
            }

            await Team.GetMember(user).UpdateAsync(Builders<TeamMemberData>.Update.Set(x => x.Disabled, Disabled), () =>
            {
                Team.GetMember(user).Disabled = Disabled;
                _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
            });

            return null;
        });
    }

    public async Task AddMember()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        AuthUser User = await Session.GetCurrentUserAsync();

        bool twoFactorConfirm = await Session.TriggerTwoFactorAuthentication(User, true, false);
        if (!twoFactorConfirm)
            return;

        await DialogService.ShowDynamicFormAsync<TeamAddUserModel>("Add Team User", new TeamAddUserModel(), async (TeamAddUserModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members";

            PartialUserData? user = _DB.Users.Values.FirstOrDefault(x => x.Email.Equals(data.Email, StringComparison.OrdinalIgnoreCase));
            if (user == null)
                return "Could not find a user account with that email address.";

            if (user.ManagedAccountTeamId.HasValue)
                return "This user account is managed by another team.";

            if (Team.Members.ContainsKey(user.Id))
                return "This user account has already been added to the team.";

            TeamMemberData memberData = new TeamMemberData
                {
                    TeamId = Team.Id,
                    UserId = user.Id
                };

            try
            {
                await _DB.Members.CreateAsync(memberData);
            }
            catch
            {
                return "Failed to create member.";
            }

            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Team.Members), () =>
        {
            _DB.Members.Cache.TryAdd(memberData.Id, memberData);
            Team.Members.Add(user.Id, memberData.Id);
            Team.CachedMembers.Add(memberData.Id, memberData);
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Member, AuditLogEventType.MemberAdded)
            .SetTarget(user));
        });

            return string.Empty;
        });
    }

    public async Task TransferOwnership(PartialUserData user)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Member.Team.OwnerId != Session.CurrentUser.Id)
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Team Ownership Transfer", $"This will give ownership of team {Team.Name} to the account {user.UserName}, are you sure you want to continue?", "Yes", ButtonStyle.Success);
        if (!Confirm)
            return;

        AuthUser User = await Session.GetCurrentUserAsync();

        bool twoFactorConfirm = await Session.TriggerTwoFactorAuthentication(User, true, true);
        if (!twoFactorConfirm)
            return;

        if (Member.Team.OwnerId != Session.CurrentUser.Id)
            return;

        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.OwnerId, user.Id), () =>
        {
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Member, AuditLogEventType.TeamOwnershipChanged)
            .SetTarget(user));
            Team.OwnerId = user.Id;
        });


    }

    public async Task RemoveTeamMember(ObjectId user)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }
        
        Team.Members.TryGetValue(user, out ObjectId selected);

        TeamMemberData SelectedMember = Team.CachedMembers[selected];
        int CurrentRank = Member.GetRank();
        int SelectedRank = SelectedMember.GetRank();
        if (CurrentRank <= SelectedRank)
        {
            await DialogService.ShowInfoAsync("Access Failed", $"You do not have access to modify this member with your current roles (You {CurrentRank} | Selected {SelectedRank})");
            return;
        }

        if (SelectedMember == null)
            return;

        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Team.Members), () =>
        {
            Team.Members.Remove(user);
            _DB.Members.Cache.Remove(user, out _);
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Member, AuditLogEventType.MemberRemoved)
            .SetTarget(_DB.Users[user])
            .AddProperty("User", _DB.Users[user].UserName)
            .AddProperty("ID", _DB.Users[user].Id.ToString()));
        });
    }

    public async Task ChangeMemberRoles(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        TeamMemberData SelectedMember = Team.GetMember(user);
        int CurrentRank = Member.GetRank();
        int SelectedRank = SelectedMember.GetRank();
        if (CurrentRank <= SelectedRank)
        {
            await DialogService.ShowInfoAsync("Access Failed", $"You do not have access to modify this member with your current roles (You {CurrentRank} | Selected {SelectedRank})");
            return;
        }

        await DialogService.OpenAsync<ChangeMemberRolesDialog>($"Update Roles for {user.UserName}", new Dictionary<string, object>()
        {
            { "Team", Team },
            { "Member", Team.GetMember(user) }
        });
    }
}
