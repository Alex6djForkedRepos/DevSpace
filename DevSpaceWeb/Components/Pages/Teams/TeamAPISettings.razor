@using DevSpaceWeb.Data.API
@using DevSpaceWeb.Models.Teams
@inject Radzen.DialogService dialogService

<PageTitle>Team API Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:robot"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Team.Name API</RadzenText>
    </div>
        @if (!Member.HasTeamPermission(TeamPermission.ViewAPIs))
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for View APIs.
            </RadzenAlert>
        }
        else
        {
        <br />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Create API Client" Click="@CreateApi" Disabled="(!(Member.HasTeamPermission(TeamPermission.ManageOwnAPIs) || Member.HasTeamPermission(TeamPermission.ManageAllAPIs)))" />
            <br />
            <br />
            <RadzenStack Orientation="Orientation.Vertical" Gap="10px">
                @foreach (APIClient i in _DB.API.Cache.Values.Where(x => x.HasAccess(Member)))
                {
                    <a href="@("/teams/" + Session.Selected.Team.VanityUrl + "/api/" + i.Id.ToString())">
                        <div class="api-item">
                            <h4>@i.Name</h4>
                        </div>
                    </a>
                }
            </RadzenStack>
        }
    
</div>

<style>
    .api-item {
        padding: 10px;
        padding-left: 20px;
        padding-right: 20px;
        border-radius: 8px;
        background-color: rgba(52,53,63,0.8) !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    public async Task CreateApi()
    {
        await dialogService.ShowDynamicFormAsync<TeamCreateAPIModel>("Create API Client", new TeamCreateAPIModel() { }, async (TeamCreateAPIModel data) =>
            {
                APIClient client = new APIClient
                {
                    Name = data.Name,
                    OwnerId = Member.UserId,
                    TeamId = Member.TeamId
                };
                await _DB.API.CreateAsync(client);
                _DB.API.Cache.TryAdd(client.Id, client);
                StateHasChanged();
                return null;
            });
    }
}
