@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

@if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
{
    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
        You do not have permission for Manage Roles.
    </RadzenAlert>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Create Role" Click="@CreateRole" />
    <br />
    <RadzenRow Gap="0.2rem">
        <RadzenColumn Size="3" class=" rz-py-2 pr-2">
            <RadzenListBox @bind-Value="@SelectedRole" Change="@(() => Permissions = SelectedRole.Permissions.Clone())" Data="@Roles" Disabled="@UnsavedPermissions"
            TextProperty="@nameof(TeamRoleData.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
            Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />
        </RadzenColumn>
        <RadzenColumn class="rz-py-2">
            @if (SelectedRole != null)
            {
                <div class="role-info">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">@SelectedRole.Name Role</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @SelectedRole.Description
                    </RadzenText>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Delete Role" Click="@DeleteRole" Disabled="@(SelectedRole.Name == "Default")" />
                </div>

                <PermissionGrid PermissionType="PermissionType.All" Permissions="@Permissions" UnsavedPermissionsChanged="@((arg) => UnsavedPermissions = arg)"
                OnSave="@SavePermissions" OnLoad="@LoadPermissions"></PermissionGrid>
            }
        </RadzenColumn>
    </RadzenRow>
}

<style>
    .role-box .rz-dropdown {
    width: 100% !important;
    }

</style>


@code {
    public System.Collections.Generic.ICollection<TeamRoleData> Roles { get; set; }

    public TeamRoleData? SelectedRole { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    //public bool PermissionsLoaded { get; set; }
    public bool UnsavedPermissions { get; set; }
    public PermissionsSet Permissions { get; set; }



    public void LoadPermissions()
    {
        Console.WriteLine("Loading Permissions Now");
        Permissions = SelectedRole.Permissions.Clone();
        Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(Permissions));
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        if (SelectedRole.Name == "Default")
        {
            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.DefaultPermissions, perms));
            Team.DefaultPermissions = perms;
            SelectedRole.Permissions = perms;
        }
        else
        {
            await SelectedRole.UpdateAsync(new UpdateDefinitionBuilder<TeamRoleData>().Set(x => x.Permissions, perms));
            SelectedRole.Permissions = perms;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Roles == null)
        {
            Roles = Team.CachedRoles.Values;
            Roles = Roles.Prepend(new TeamRoleData { Name = "Default", Permissions = Team.DefaultPermissions }).ToArray();
            if (Roles.Any())
            {
                SelectedRole = Roles.First();
                Permissions = SelectedRole.Permissions.Clone();
            }
        }
    }

    public class PermissionItem<T> where T : Enum
    {
        public PermissionItem(T flag, string name, string description)
        {
            Flag = flag;
            Name = name;
            Description = description;
        }

        public T Flag { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }

    

    public async Task DeleteRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        await _DB.Roles.Collection.DeleteOneAsync(new FilterDefinitionBuilder<TeamRoleData>().Eq(x => x.Id, SelectedRole.Id));
        _DB.Roles.Cache.Remove(SelectedRole.Id, out _);
        Team.CachedRoles.Remove(SelectedRole.Id);
        Team.Roles = Team.Roles.Where(x => x != SelectedRole.Id).ToHashSet();
        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Team.Roles));

        SelectedRole = null;
    }

    public async Task CreateRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), (TeamRoleModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles.";

            if (data.Name.Equals("Default"))
                return "You can't name the role default";
            

            foreach (var r in Team.CachedRoles.Values)
            {
                if (r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
                {
                    TeamId = Team.Id,
                    Name = data.Name,
                    Description = data.Description
                };

            var task = Task.Run<bool>(async () =>
            {
                try
                {
                    await _DB.Roles.CreateAsync(role);
                }
                catch
                {
                    return false;
                }
                _DB.Roles.Cache.TryAdd(role.Id, role);
                Team.Roles.Add(role.Id);
                Team.CachedRoles.Add(role.Id, role);
                try
                {
                    await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Team.Roles));
                }
                catch
                {
                    Team.Roles.Remove(role.Id);
                    Team.CachedRoles.Remove(role.Id);
                    FilterDefinition<TeamRoleData> roleFilter = Builders<TeamRoleData>.Filter.Eq(r => r.Id, role.Id);
                    _DB.Roles.Collection.DeleteOne(roleFilter);
                    _DB.Roles.Cache.Remove(role.Id, out _);
                    return false;
                }
                return true;
            });
            task.Wait();
            if (!task.Result)
                return "Failed to create team role due to a database error.";
            
            
            return string.Empty;
        });
    }


}
