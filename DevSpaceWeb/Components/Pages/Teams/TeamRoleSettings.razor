@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

@if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
{
    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
        You do not have permission for Manage Roles.
    </RadzenAlert>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Create Role" Click="@CreateRole" />
    <br />
    <RadzenRow Gap="0.2rem">
        <RadzenColumn Size="3" class=" rz-py-2 pr-2">
            <RadzenListBox @bind-Value="@SelectedRole" Data="@Roles" Disabled="@UnsavedPermissions"
            TextProperty="@nameof(TeamRoleData.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
            Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />
        </RadzenColumn>
        <RadzenColumn class="rz-py-2">
            @if (SelectedRole != null)
            {
                <div class="role-info">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">@SelectedRole.Name Role</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @SelectedRole.Description
                    </RadzenText>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Delete Role" Click="@DeleteRole" Disabled="@(SelectedRole.Name == "Default")" />
                </div>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="0.2rem">

                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:tag"></span> Role Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@GlobalAdministrator" Name="TeamGlobalAdministrator" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Global Administrator" Component="TeamGlobalAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Access all permissions and resources for the team.</span>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:people-group"></span> Team Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@TeamAdministrator" Name="TeamAdministrator" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Team Administrator" Component="TeamAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All team permissions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="TeamGrid.Grid" @bind-Value="@TeamGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Disabled="@(!PermissionsLoaded || TeamAdministrator)" Placeholder="Select permission..." AllowFiltering="true" Chips="true" Data="@TeamGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<TeamPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<TeamPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<TeamPermission>).Name)
                                </ValueTemplate>

                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:server"></span> Server Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@ServerAdministrator" Name="ServerAdmin" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Server Administrator" Component="ServerAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All server permissions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="ServerGrid.Grid" @bind-Value="@ServerGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                            AllowFiltering="true" Chips="true" Data="@ServerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@(!PermissionsLoaded || ServerAdministrator)">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<ServerPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ServerPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<ServerPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:docker"></span> Docker Permissions</RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" Style="">
                            Requires permission <strong>View Servers</strong> to use docker features.
                        </RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@DockerAdministrator" Name="ServerDockerAdministrator" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Docker Administrator" Component="ServerDockerAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All docker permissions.</span>
                        </div>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@DockerManager" Name="ServerDockerManager" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Docker Manager" Component="ServerDockerManager" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage most docker features except for system access or dangerous actions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="DockerGrid.Grid" @bind-Value="@DockerGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                            AllowFiltering="true" Chips="true" Data="@DockerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@(!PermissionsLoaded || DockerManager || DockerAdministrator)">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<DockerPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<DockerPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<DockerPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:web"></span> Website Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@WebsiteAdministrator" Name="WebsiteAdmin" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Website Administrator" Component="WebsiteAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All website permissions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="WebsiteGrid.Grid" @bind-Value="@WebsiteGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                            AllowFiltering="true" Chips="true" Data="@WebsiteGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@(!PermissionsLoaded || WebsiteAdministrator)">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<WebsitePermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<WebsitePermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<WebsitePermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:lightbulb"></span> Project Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@ProjectAdministrator" Name="ProjectAdmin" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Project Administrator" Component="ProjectAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All project permissions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="ProjectGrid.Grid" @bind-Value="@ProjectGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                            AllowFiltering="true" Chips="true" Data="@ProjectGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@(!PermissionsLoaded || ProjectAdministrator)">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<ProjectPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ProjectPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<ProjectPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0"><span class="iconify" data-icon="mdi:warning"></span> Log Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox @bind-Value="@LogAdministrator" Name="LogAdmin" Disabled="@(!PermissionsLoaded)" />
                            <RadzenLabel Text="Log Administrator" Component="LogAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">All log permissions.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="LogGrid.Grid" @bind-Value="@LogGrid.Selected" Change="@(() => { if (PermissionsLoaded) { TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                            AllowFiltering="true" Chips="true" Data="@LogGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@(!PermissionsLoaded || LogAdministrator)">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<LogPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<LogPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<LogPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                </RadzenStack>
            }
        </RadzenColumn>
    </RadzenRow>
}

<style>
    .role-box .rz-dropdown {
    width: 100% !important;
    }

    .dialog-unsaved {
    height: 170px;
    margin-left: 20px;
    width: calc(100% - 40px);
    margin-bottom: 10px;
    background-color: var(--rz-base-700) !important;
    }

    .dialog-unsaved .rz-dialog-side-titlebar {
    background-color: var(--rz-base-700) !important;
    }
</style>

@if (UnsavedPermissions)
{
    <style>
        .rz-body {
        padding-bottom: 180px;
        }
    </style>
}

@code {
    public System.Collections.Generic.ICollection<TeamRoleData> Roles { get; set; }

    public TeamRoleData? SelectedRole { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public TeamMemberData Member { get; set; }

    public bool PermissionsLoaded = false;
    public bool UnsavedPermissions = false;

    private bool _globalAdministrator;
    public bool GlobalAdministrator { get { return _globalAdministrator; } set { _globalAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _teamAdministrator;
    public bool TeamAdministrator { get { return _teamAdministrator; } set { _teamAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _serverAdministrator;
    public bool ServerAdministrator { get { return _serverAdministrator; } set { _serverAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _dockerAdministrator;
    public bool DockerAdministrator { get { return _dockerAdministrator; } set { _dockerAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _dockerManager;
    public bool DockerManager { get { return _dockerManager; } set { _dockerManager = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _websiteAdministrator;
    public bool WebsiteAdministrator { get { return _websiteAdministrator; } set { _websiteAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _projectAdministrator;
    public bool ProjectAdministrator { get { return _projectAdministrator; } set { _projectAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    private bool _logAdministrator;
    public bool LogAdministrator { get { return _logAdministrator; } set { _logAdministrator = value; if (PermissionsLoaded) { TriggerUnsavedDialog(); } } }

    public async Task TriggerUnsavedDialog()
    {
        if (!UnsavedPermissions)
        {
            UnsavedPermissions = true;
            var Result = await DialogService.OpenSideAsync<PermissionChangesDialog>("Unsaved Changes", options: new SideDialogOptions { 
                CloseDialogOnOverlayClick = false,
                Position = DialogPosition.Bottom,
                ShowMask = false,
                ShowClose = false,
                CssClass = "dialog-unsaved"
            });

            if (Result != null)
            {
                if (Result is true)
                {
                    Console.WriteLine("Save Permissions");
                    await SavePermissions();
                    UnsavedPermissions = false;
                    StateHasChanged();
                }
                else if (Result is false)
                {
                    Console.WriteLine("Load Permissions");
                    LoadPermissions();
                    UnsavedPermissions = false;
                    StateHasChanged();
                }
            }

        }
    }

    public void LoadPermissions()
    {
        PermissionsLoaded = false;
        GlobalAdministrator = SelectedRole.Permissions.TeamPermissions.HasFlag(TeamPermission.GlobalAdministrator);
        TeamAdministrator = SelectedRole.Permissions.TeamPermissions.HasFlag(TeamPermission.TeamAdministrator);
        ServerAdministrator = SelectedRole.Permissions.ServerPermissions.HasFlag(ServerPermission.ServerAdministrator);
        DockerAdministrator = SelectedRole.Permissions.DockerPermissions.HasFlag(DockerPermission.DockerAdministrator);
        DockerManager = SelectedRole.Permissions.DockerPermissions.HasFlag(DockerPermission.DockerManager);
        WebsiteAdministrator = SelectedRole.Permissions.WebsitePermissions.HasFlag(WebsitePermission.WebsiteAdministrator);
        ProjectAdministrator = SelectedRole.Permissions.ProjectPermissions.HasFlag(ProjectPermission.ProjectAdministrator);
        LogAdministrator = SelectedRole.Permissions.LogPermissions.HasFlag(LogPermission.LogAdministrator);

        TeamGrid.Selected = TeamGrid.Data.Where(x => SelectedRole.Permissions.TeamPermissions.HasFlag(x.Flag));
        ServerGrid.Selected = ServerGrid.Data.Where(x => SelectedRole.Permissions.ServerPermissions.HasFlag(x.Flag));
        DockerGrid.Selected = DockerGrid.Data.Where(x => SelectedRole.Permissions.DockerPermissions.HasFlag(x.Flag));
        WebsiteGrid.Selected = WebsiteGrid.Data.Where(x => SelectedRole.Permissions.WebsitePermissions.HasFlag(x.Flag));
        ProjectGrid.Selected = ProjectGrid.Data.Where(x => SelectedRole.Permissions.ProjectPermissions.HasFlag(x.Flag));
        LogGrid.Selected = LogGrid.Data.Where(x => SelectedRole.Permissions.LogPermissions.HasFlag(x.Flag));
        PermissionsLoaded = true;
    }

    public async Task SavePermissions()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManagePermissions))
            return;

        PermissionsSet Set = new PermissionsSet();
        if (GlobalAdministrator)
            Set.TeamPermissions |= TeamPermission.GlobalAdministrator;

        if (TeamAdministrator)
            Set.TeamPermissions |= TeamPermission.TeamAdministrator;
        else
        {
            foreach(var i in TeamGrid.Selected)
            {
                Set.TeamPermissions |= i.Flag;
            }
        }

        if (ServerAdministrator)
            Set.ServerPermissions |= ServerPermission.ServerAdministrator;
        else
        {
            foreach (var i in ServerGrid.Selected)
            {
                Set.ServerPermissions |= i.Flag;
            }
        }

        if (DockerAdministrator)
            Set.DockerPermissions |= DockerPermission.DockerAdministrator;
        else if (DockerManager)
            Set.DockerPermissions |= DockerPermission.DockerManager;
        else
        {
            foreach (var i in DockerGrid.Selected)
            {
                Set.DockerPermissions |= i.Flag;
            }
        }

        if (WebsiteAdministrator)
            Set.WebsitePermissions |= WebsitePermission.WebsiteAdministrator;
        else
        {
            foreach (var i in WebsiteGrid.Selected)
            {
                Set.WebsitePermissions |= i.Flag;
            }
        }

        if (ProjectAdministrator)
            Set.ProjectPermissions |= ProjectPermission.ProjectAdministrator;
        else
        {
            foreach (var i in ProjectGrid.Selected)
            {
                Set.ProjectPermissions |= i.Flag;
            }
        }

        if (LogAdministrator)
            Set.LogPermissions |= LogPermission.LogAdministrator;
        else
        {
            foreach (var i in LogGrid.Selected)
            {
                Set.LogPermissions |= i.Flag;
            }
        }

        if (SelectedRole.Name == "Default")
        {
            await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.DefaultPermissions, Set));
            Session.Selected.Team.Data.DefaultPermissions = Set;
            SelectedRole.Permissions = Set;
        }
        else
        {
            await SelectedRole.UpdateAsync(new UpdateDefinitionBuilder<TeamRoleData>().Set(x => x.Permissions, Set));
            SelectedRole.Permissions = Set;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Roles == null)
        {
            Roles = Session.Selected.Team.Data.CachedRoles.Values;
            Roles = Roles.Prepend(new TeamRoleData { Name = "Default", Permissions = Session.Selected.Team.Data.DefaultPermissions }).ToArray();
            if (Roles.Any())
            {
                SelectedRole = Roles.First();
                LoadPermissions();
            }
        }
    }

    public class PermissionItem<T> where T : Enum
    {
        public PermissionItem(T flag, string name, string description)
        {
            Flag = flag;
            Name = name;
            Description = description;
        }

        public T Flag { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }

    public PermissionGrid<PermissionItem<TeamPermission>> TeamGrid = new PermissionGrid<PermissionItem<TeamPermission>>
    {
        Data = new PermissionItem<TeamPermission>[]
        {
            new PermissionItem<TeamPermission>(TeamPermission.ManageMembers, "Manage Members", "Add or remove members to the team except global admins."),
            new PermissionItem<TeamPermission>(TeamPermission.ManageRoles, "Manage Roles", "Give members roles except global admin."),
            new PermissionItem<TeamPermission>(TeamPermission.ManagePermissions, "Manage Permissions", "Change permissions for roles except global admin."),
            new PermissionItem<TeamPermission>(TeamPermission.ManageTeam, "Manage Team", "Change team settings."),
            new PermissionItem<TeamPermission>(TeamPermission.ManageTeam, "Manage Resources", "Add or delete resources for the team such as servers/websites/projects."),
        }
    };

    public PermissionGrid<PermissionItem<ServerPermission>> ServerGrid = new PermissionGrid<PermissionItem<ServerPermission>>
    {
        Data = new PermissionItem<ServerPermission>[]
        {
            new PermissionItem<ServerPermission>(ServerPermission.ViewServer, "View Servers", "View all servers the team owns."),
            new PermissionItem<ServerPermission>(ServerPermission.ManageServer, "Manage Servers", "Change server settings."),
            new PermissionItem<ServerPermission>(ServerPermission.ManagePermissions, "Manage Permissions", "Change permissions for all servers the team owns."),
            new PermissionItem<ServerPermission>(ServerPermission.ManageResource, "Manage Resource", "Add or delete servers for the team."),
        }
    };

    public PermissionGrid<PermissionItem<WebsitePermission>> WebsiteGrid = new PermissionGrid<PermissionItem<WebsitePermission>>
        {
            Data = new PermissionItem<WebsitePermission>[]
            {
            new PermissionItem<WebsitePermission>(WebsitePermission.ViewWebsite, "View Websites", "View all websites the team owns."),
            new PermissionItem<WebsitePermission>(WebsitePermission.ManageWebsite, "Manage Websites", "Change website settings."),
            new PermissionItem<WebsitePermission>(WebsitePermission.ManagePermissions, "Manage Permissions", "Change permissions for all websites the team owns."),
            new PermissionItem<WebsitePermission>(WebsitePermission.ManageResource, "Manage Resource", "Add or delete websites for the team."),
            }
        };

    public PermissionGrid<PermissionItem<ProjectPermission>> ProjectGrid = new PermissionGrid<PermissionItem<ProjectPermission>>
        {
            Data = new PermissionItem<ProjectPermission>[]
        {
            new PermissionItem<ProjectPermission>(ProjectPermission.ViewProject, "View Projects", "View all projects the team owns."),
           new PermissionItem<ProjectPermission>(ProjectPermission.ManageProject, "Manage Projects", "Change project settings."),
            new PermissionItem<ProjectPermission>(ProjectPermission.ManagePermissions, "Manage Permissions", "Change permissions for all projects the team owns."),
            new PermissionItem<ProjectPermission>(ProjectPermission.ManageResource, "Manage Resource", "Add or delete projects for the team."),
        }
        };

    public PermissionGrid<PermissionItem<LogPermission>> LogGrid = new PermissionGrid<PermissionItem<LogPermission>>
    {
        Data = new PermissionItem<LogPermission>[]
        {
            new PermissionItem<LogPermission>(LogPermission.ViewLog, "View Logs", "View all logs the team owns."),
            new PermissionItem<LogPermission>(LogPermission.ManageLog, "Manage Logs", "Change log settings."),
            new PermissionItem<LogPermission>(LogPermission.ManagePermissions, "Manage Permissions", "Change permissions for all logs the team owns."),
            new PermissionItem<LogPermission>(LogPermission.ManageResource, "Manage Resource", "Add or delete logs for the team."),
        }
    };

    public PermissionGrid<PermissionItem<DockerPermission>> DockerGrid = new PermissionGrid<PermissionItem<DockerPermission>>
        {
            Data = new PermissionItem<DockerPermission>[]
            {
                new PermissionItem<DockerPermission>(DockerPermission.ViewContainers, "View Containers", "View all docker stacks and containers the team owns."),
                new PermissionItem<DockerPermission>(DockerPermission.ControlContainers, "Control Containers", "Start, stop, restart, pause and kill containers."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageContainers, "Manage Containers", "Create and modify Stacks and containers."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewImages, "View Images", "View current docker images."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageImages, "Manage Images", "Create and modify docker images."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewVolumes, "View Volumes", "View current docker volumes/storage."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageVolumes, "Manage Volumes", "Create and modify docker volumes."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewNetworks, "View Networks", "View current docker networks."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageNetworks, "Manage Networks", "Create and modify docker networks."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewTemplates, "View Templates", "View a list bunch of premade docker templates."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewCustomTemplates, "View Custom Templates", "View a list of custom docker templates made by other members."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageCustomTemplates, "Manage Custom Templates", "Create and modify custom docker templates."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewPlugins, "View Plugins", "View current docker templates installed."),
                new PermissionItem<DockerPermission>(DockerPermission.ManagePlugins, "Manage Plugins", "Install docker plugins on the server."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewEvents, "View Events", "View realtime docker events for all stacks, containers, images, networks, volumes and plugins."),
                new PermissionItem<DockerPermission>(DockerPermission.ViewRegistries, "View Registry", "View current docker registries."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageRegistries, "Manage Registry", "Create and modify docker registries."),
                new PermissionItem<DockerPermission>(DockerPermission.ManageSettings, "Manage Settings", "Modify server-wide docker settings and features."),
            }
        };

    public class PermissionGrid<T>
    {
        public RadzenDropDown<IEnumerable<T>> Grid;
        public T[] Data;

        public IEnumerable<T> Selected;
    }

    public async Task DeleteRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        await _DB.Roles.Collection.DeleteOneAsync(new FilterDefinitionBuilder<TeamRoleData>().Eq(x => x.Id, SelectedRole.Id));
        _DB.Roles.Cache.Remove(SelectedRole.Id, out _);
        Session.Selected.Team.Data.CachedRoles.Remove(SelectedRole.Id);
        Session.Selected.Team.Data.Roles = Session.Selected.Team.Data.Roles.Where(x => x != SelectedRole.Id).ToHashSet();
        await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
        SelectedRole = null;
    }

    public async Task CreateRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), (TeamRoleModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles.";

            if (data.Name.Equals("Default"))
                return "You can't name the role default";
            

            foreach (var r in Session.Selected.Team.Data.CachedRoles.Values)
            {
                if (r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
                {
                    TeamId = Session.Selected.Team.Data.Id,
                    Name = data.Name,
                    Description = data.Description
                };

            var task = Task.Run<bool>(async () =>
            {
                try
                {
                    await _DB.Roles.CreateAsync(role);
                }
                catch
                {
                    return false;
                }
                _DB.Roles.Cache.TryAdd(role.Id, role);
                Session.Selected.Team.Data.Roles.Add(role.Id);
                Session.Selected.Team.Data.CachedRoles.Add(role.Id, role);
                try
                {
                    await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
                }
                catch
                {
                    Session.Selected.Team.Data.Roles.Remove(role.Id);
                    Session.Selected.Team.Data.CachedRoles.Remove(role.Id);
                    FilterDefinition<TeamRoleData> roleFilter = Builders<TeamRoleData>.Filter.Eq(r => r.Id, role.Id);
                    _DB.Roles.Collection.DeleteOne(roleFilter);
                    _DB.Roles.Cache.Remove(role.Id, out _);
                    return false;
                }
                return true;
            });
            task.Wait();
            if (!task.Result)
                return "Failed to create team role due to a database error.";
            
            
            return string.Empty;
        });
    }


}
