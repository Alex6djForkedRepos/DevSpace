@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

@if (!ManageRoles)
{
    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
        You do not have permission for Manage Roles.
    </RadzenAlert>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Add Role" Click="@CreateRole" />
    <br />
    <RadzenRow Gap="0.2rem">
        <RadzenColumn Size="3" class=" rz-py-2 pr-2">
            <RadzenListBox @bind-Value="@SelectedRole" Data="@Roles"
            TextProperty="@nameof(TeamRoleData.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
            Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />
        </RadzenColumn>
        <RadzenColumn class="rz-py-2">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="0.2rem">
                @foreach (var i in Roles)
                {
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">@i.Name Role</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2">
                            @i.Description
                        </RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="TeamGlobalAdministrator" />
                            <RadzenLabel Text="Global Administrator" Component="TeamGlobalAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Access all resources the team owns.</span>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Team Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="TeamAdministrator" />
                            <RadzenLabel Text="Team Administrator" Component="TeamAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all team members, permissions and settings.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="TeamGrid.Grid" TValue="PermissionItem<TeamPermission>" Placeholder="Select permission..." AllowFiltering="true" Chips="true" Data="@TeamGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<TeamPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<TeamPermission>).Description)</span>
                                    
                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<TeamPermission>).Name)
                                </ValueTemplate>
                                
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Server Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="ServerAdmin" />
                            <RadzenLabel Text="Server Administrator" Component="ServerAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all servers the team owns.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="ServerGrid.Grid" TValue="PermissionItem<ServerPermission>" Placeholder="Select permission..."
                                AllowFiltering="true" Chips="true" Data="@ServerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<ServerPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ServerPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<ServerPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box" Style="height: 380px !important;">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Docker Permissions</RadzenText>

                        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Info" ShowIcon="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter">
                            Require permission View Servers to access this feature.
                        </RadzenAlert>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerAdministrator" />
                            <RadzenLabel Text="Docker Administrator" Component="ServerDockerAdministrator" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all docker features and access dangerous actions.</span>
                        </div>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerManager" />
                            <RadzenLabel Text="Docker Manager" Component="ServerDockerManager" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage most docker features such as stacks/containers/networks/volumes.</span>
                        </div>

                        @* <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerController" />
                            <RadzenLabel Text="Docker Controller" Component="ServerDockerController" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Controll all docker containers such a start/stop/restart action.</span>
                        </div> *@

                        <div>
                            <RadzenDropDown @ref="DockerGrid.Grid" TValue="PermissionItem<DockerPermission>" Placeholder="Select permission..."
                                            AllowFiltering="true" Chips="true" Data="@DockerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<DockerPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<DockerPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<DockerPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Website Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="WebsiteAdmin" />
                            <RadzenLabel Text="Website Administrator" Component="WebsiteAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all websites the team owns.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="WebsiteGrid.Grid" TValue="PermissionItem<WebsitePermission>" Placeholder="Select permission..."
                                            AllowFiltering="true" Chips="true" Data="@WebsiteGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<WebsitePermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<WebsitePermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<WebsitePermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Project Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="ProjectAdmin" />
                            <RadzenLabel Text="Project Administrator" Component="ProjectAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all projects the team owns.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="ProjectGrid.Grid" TValue="PermissionItem<ProjectPermission>" Placeholder="Select permission..."
                                            AllowFiltering="true" Chips="true" Data="@ProjectGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<ProjectPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ProjectPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<ProjectPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                    <RadzenStack Gap="0" class="role-box">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Log Permissions</RadzenText>

                        <div class="role-permissions">
                            <RadzenCheckBox Value="@CheckBox" Name="LogAdmin" />
                            <RadzenLabel Text="Log Administrator" Component="LogAdmin" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">Manage all logs the team owns.</span>
                        </div>

                        <div>
                            <RadzenDropDown @ref="LogGrid.Grid" TValue="PermissionItem<LogPermission>" Placeholder="Select permission..."
                                            AllowFiltering="true" Chips="true" Data="@LogGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Multiple="true" AllowSelectAll="false" TextProperty="Name">
                                <Template>
                                    <RadzenLabel Text="@((context as PermissionItem<LogPermission>).Name)" Style="display: block;" />
                                    <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<LogPermission>).Description)</span>

                                </Template>
                                <ValueTemplate>
                                    @((context as PermissionItem<LogPermission>).Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </RadzenStack>
                }

            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}

<style>
    .role-box .rz-dropdown {
        width: 100% !important;
    }
</style>

@code {
    [Parameter]
    public bool ManageRoles { get; set; }

    [Parameter]
    public TeamRoleData[] Roles { get; set; }

    public TeamRoleData SelectedRole { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public bool CheckBox { get; set; }

    public class PermissionItem<T> where T : Enum
    {
        public PermissionItem(T flag, string name, string description)
        {
            Flag = flag;
            Name = name;
            Description = description;
        }

        public T Flag { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }

    public PermissionGrid<PermissionItem<TeamPermission>> TeamGrid = new PermissionGrid<PermissionItem<TeamPermission>>
    {
        Data = new PermissionItem<TeamPermission>[]
        {
            new PermissionItem<TeamPermission>(TeamPermission.ManageMembers, "Manage Members", "Add or remove members to the team except global admins."),
            new PermissionItem<TeamPermission>(TeamPermission.ManageRoles, "Manage Roles", "Give members roles except global admin."),
            new PermissionItem<TeamPermission>(TeamPermission.ManagePermissions, "Manage Permissions", "Change permissions for roles except global admin."),
            new PermissionItem<TeamPermission>(TeamPermission.ManageTeam, "Manage Team", "Change team settings."),
        }
    };

    public PermissionGrid<PermissionItem<ServerPermission>> ServerGrid = new PermissionGrid<PermissionItem<ServerPermission>>
    {
        Data = new PermissionItem<ServerPermission>[]
        {
            new PermissionItem<ServerPermission>(ServerPermission.ViewServer, "View Servers", "View all servers the team owns."),
            new PermissionItem<ServerPermission>(ServerPermission.ManagePermissions, "Manage Permissions", "Change permissions for all servers the team owns."),
        }
    };

    public PermissionGrid<PermissionItem<WebsitePermission>> WebsiteGrid = new PermissionGrid<PermissionItem<WebsitePermission>>
        {
            Data = new PermissionItem<WebsitePermission>[]
            {
            new PermissionItem<WebsitePermission>(WebsitePermission.ViewWebsite, "View Websites", "View all websites the team owns."),
            new PermissionItem<WebsitePermission>(WebsitePermission.ManagePermissions, "Manage Permissions", "Change permissions for all websites the team owns."),
            }
        };

    public PermissionGrid<PermissionItem<ProjectPermission>> ProjectGrid = new PermissionGrid<PermissionItem<ProjectPermission>>
        {
            Data = new PermissionItem<ProjectPermission>[]
        {
            new PermissionItem<ProjectPermission>(ProjectPermission.ViewProject, "View Projects", "View all projects the team owns."),
            new PermissionItem<ProjectPermission>(ProjectPermission.ManagePermissions, "Manage Permissions", "Change permissions for all projects the team owns."),
        }
        };

    public PermissionGrid<PermissionItem<LogPermission>> LogGrid = new PermissionGrid<PermissionItem<LogPermission>>
    {
        Data = new PermissionItem<LogPermission>[]
        {
            new PermissionItem<LogPermission>(LogPermission.ViewLog, "View Logs", "View all logs the team owns."),
            new PermissionItem<LogPermission>(LogPermission.ManagePermissions, "Manage Permissions", "Change permissions for all logs the team owns."),
        }
    };

    public PermissionGrid<PermissionItem<DockerPermission>> DockerGrid = new PermissionGrid<PermissionItem<DockerPermission>>
        {
            Data = new PermissionItem<DockerPermission>[]
            {
            new PermissionItem<DockerPermission>(DockerPermission.ViewStacksAndContainers, "View Stacks & Containers", "View all docker stacks and containers the team owns."),
            }
        };

    public class PermissionGrid<T>
    {
        public RadzenDropDown<T> Grid;
        public T[] Data;
        public IEnumerable<T> Selected;
    }

    

    public async Task CreateRole()
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageRoles))
            return;

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), (TeamRoleModel data) =>
        {
            TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
            if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles.";

            foreach (var r in Session.Selected.Team.Data.CachedRoles.Values)
            {
                if (r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
                {
                    TeamId = Session.Selected.Team.Data.Id,
                    Name = data.Name,
                    Description = data.Description
                };

            var task = Task.Run<bool>(async () =>
        {
            try
            {
                await _DB.Roles.CreateAsync(role);
            }
            catch
            {
                return false;
            }
            return true;
        });
            task.Wait();
            if (!task.Result)
                return "Failed to create team role due to a database error.";
            Session.Selected.Team.Data.Roles.Add(role.Id);
            Session.Selected.Team.Data.CachedRoles.Add(role.Id, role);
            Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
            return string.Empty;
        });
    }
}
