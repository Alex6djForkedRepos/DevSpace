@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Session.Selected.Team.Data.Name Settings</RadzenText>
    </div>
    <br />
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Basic">
                @if (!Member.HasTeamPermission(TeamPermission.ManageTeam))
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Team.
                    </RadzenAlert>
                }
                else
                {
                    <EditForm Model="@TeamForm" OnValidSubmit="@UpdateTeamSettings">
                        <DataAnnotationsValidator />

                        <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="@TeamForm.Name" Style="width: 100%" aria-label="Team Name" autocomplete="false"
                        Placeholder="My Team" MaxLength="32" />
                        <ValidationMessage For="() => TeamForm.Name" style="color: var(--rz-danger);" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="@TeamForm.VanityUrl" Style="width: 100%" aria-label="Vanity Url" autocomplete="false"
                        Placeholder="myteam" MaxLength="100" />
                        <ValidationMessage For="() => TeamForm.VanityUrl" style="color: var(--rz-danger);" />
                        <br />
                        <br />

                        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save" ButtonType="ButtonType.Submit" />

                    </EditForm>

                    <br />
                    <br />
                    <RadzenLabel Text="Team Icon" class="rz-my-0"></RadzenLabel>
                    <RadzenUpload id="ddUpload" @ref="IconUploader" ChooseText="Click here or drop to upload files" Auto="false" Multiple="false" Url="@("/upload/icon?teamId=" + Session.Selected.Team.Id)" Accept="image/png, image/webp, image/jpeg" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                    Style="width: 100%" MaxFileCount="1" Complete="@UploadComplete" />
                    <br />
                    <br />
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save Icon" Click="@ChangeIcon" ButtonType="ButtonType.Submit" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove Icon" Click="@RemoveIcon" />
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Members">
                @if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Members.
                    </RadzenAlert>
                }
                else
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Add Member" Click="@AddMember" />
                    <br />
                    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Users">
                        <Template Context="user">
                            <RadzenCard Style="width:300px;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    @if (_DB.Users.TryGetValue(user, out PartialUserData ud))
                                    {
                                        <RadzenImage Path="@ud.GetAvatarOrDefault()" Style="width: 80px; height: 80px; border-radius: 50%" />
                                        <RadzenStack Gap="0">
                                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Username</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                @ud.UserName
                                            </RadzenText>
                                        </RadzenStack>
                                        @if (user != Session.Selected.Team.Data.OwnerId)
                                        {
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(ud.Id))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Transfer Ownership" Click="@(() => TransferOwnership(ud))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Change Roles" Click="@(() => ChangeMemberRoles(ud))" />
                                        }
                                    }
                                    else
                                    {
                                        <RadzenImage Path="https://cdn.fluxpoint.dev/devspace/user_avatar.webp" Style="width: 80px; height: 80px; border-radius: 50%" />
                                        <RadzenStack Gap="0">
                                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Account Deleted</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body2">
                                                @user.ToString()
                                            </RadzenText>
                                        </RadzenStack>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(user))" />
                                    }


                                </RadzenStack>
                                <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                                <RadzenRow>
                                    <RadzenColumn Size="8" class="rz-text-truncate">
                                        @* <b>@(order.ShipName)</b> *@
                                    </RadzenColumn>
                                    <RadzenColumn Size="4" class="rz-text-align-end">
                                        @* <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)}") /> *@
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Roles">
                <TeamRoleSettings Roles="@Roles" Member="@Member"></TeamRoleSettings>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

<style>
    .rz-tabview-panel .pr-2 {
    max-width: 200px;
    }

    .role-box {
    width: 260px;
    padding: 4px;
    padding-left: 8px;
    padding-right: 8px !important;
    padding-bottom: 16px;
    background-color: #242527 !important;
    margin-right: 4px;
    margin-bottom: 4px;
        box-shadow: var(--rz-card-shadow);
    }

    .role-box .rz-text-subtitle2 {
    text-align: center !important;
    display: inline-block !important;
    margin-bottom: 14px !important;
    }

    .role-permissions span {
    
    display: block;
    }

    .role-permissions {
    margin-top: 6px;
    margin-bottom: 16px;
    }

    .role-permissions .rz-chkbox-box {
    margin-top: 4px !important;
    margin-bottom: -4px !important;
    }

    .role-info {
        background-color: var(--rz-info-darker) !important;
        padding: 6px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 4px;
        margin-bottom: 10px;
        max-width: 796px;
        margin-left: auto;
        margin-right: auto;
    }

    .role-box .iconify {
        width: 22px;
        height: 22px;
        margin-right: 6px;
        margin-top: -2px;
    }

    .role-box .rz-text-body2 {
        color: var(--rz-warning);
    }

    .rz-chkbox-box .rzi {
        color: var(--rz-series-7) !important;
    }

    .rz-chkbox-box.rz-state-active {
        border-color: var(--rz-success-light);
    }

    .role-permissions span:not(.rz-chkbox-box span) {
        margin-top: 4px;
        margin-left: 32px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public TeamMemberData Member { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TeamForm = new TeamBasicModel
            {
                Name = Session.Selected.Team.Data.Name
            };
        TeamForm.VanityUrl = Session.Selected.Team.Data.VanityUrl;
        Users = Session.Selected.Team.Data.Members.Keys;
        Roles = Session.Selected.Team.Data.CachedRoles.Values.ToArray();
    }

    public IEnumerable<ObjectId> Users { get; set; }
    public TeamRoleData[] Roles { get; set; }



    public TeamBasicModel TeamForm { get; set; } = new TeamBasicModel();

    public async Task UpdateTeamSettings()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageTeam))
            return;

        if (!string.IsNullOrEmpty(TeamForm.VanityUrl))
        {
            TeamForm.VanityUrl = TeamForm.VanityUrl.Replace(" ", "-").ToLower();
        }

        Session.Selected.Team.Data.Name = TeamForm.Name;

        await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.VanityUrl, TeamForm.VanityUrl));


        if (Session.Selected.Team.Data.VanityUrl != TeamForm.VanityUrl)
        {
            if (string.IsNullOrEmpty(TeamForm.VanityUrl))
            {
                if (!string.IsNullOrEmpty(Session.Selected.Team.Data.VanityUrl))
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    Session.Selected.Team.Data.VanityUrl = string.Empty;
                }
            }
            else
            {
                if (TeamForm.VanityUrl != Session.Selected.Team.Data.VanityUrl)
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    _DB.TeamsVanityCache.TryAdd(TeamForm.VanityUrl, Session.Selected.Team.Data);
                    Session.Selected.Team.Data.VanityUrl = TeamForm.VanityUrl;
                }
            }
        }

    }

    public async Task AddMember()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
            return;

        await DialogService.ShowDynamicFormAsync<TeamAddUserModel>("Add Team User", new TeamAddUserModel(), (TeamAddUserModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members.";

            PartialUserData? user = _DB.Users.Values.FirstOrDefault(x => x.Email.Equals(data.Email, StringComparison.OrdinalIgnoreCase));
            if (user == null)
                return "Could not find a user account with that email address.";

            if (user.ManagedAccountTeamId.HasValue)
                return "This user account is managed by another team.";

            if (Session.Selected.Team.Data.Members.ContainsKey(user.Id))
                return "This user account has already been added to the team.";

            TeamMemberData memberData = new TeamMemberData
                {
                    TeamId = Session.Selected.Team.Data.Id,
                    UserId = user.Id
                };

            var task = Task.Run<bool>(async () =>
            {
                try
                {
                    await _DB.Members.CreateAsync(memberData);
                }
                catch
                {
                    return false;
                }
                _DB.Members.Cache.TryAdd(memberData.Id, memberData);
                Session.Selected.Team.Data.Members.Add(user.Id, memberData.Id);
                Session.Selected.Team.Data.CachedMembers.Add(memberData.Id, memberData);
                try
                {
                    await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Session.Selected.Team.Data.Members));
                }
                catch
                {
                    _DB.Members.Cache.Remove(memberData.Id, out _);
                    Session.Selected.Team.Data.Members.Remove(user.Id);
                    Session.Selected.Team.Data.CachedMembers.Remove(memberData.Id);
                }
                return true;
            });
            task.Wait();
            if (!task.Result)
                return "Failed to create team member due to a database error.";

            return string.Empty;
        });
    }



    public async Task TransferOwnership(PartialUserData user)
    {
        if (Member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Team Ownership Transfer", $"This will give ownership of team {Session.Selected.Team.Data.Name} to the account {user.UserName}, are you sure you want to continue?", "Yes", ButtonStyle.Success);
        if (!Confirm)
            return;

        var User = await Session.GetCurrentUserAsync();

        var twoFactorConfirm = await Session.TriggerTwoFactorAuthentication(User, true);
        if (!twoFactorConfirm)
            return;

        if (Member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.OwnerId, user.Id));

        Session.Selected.Team.Data.OwnerId = user.Id;

    }

    public async Task RemoveTeamMember(ObjectId user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
            return;

        Session.Selected.Team.Data.Members.TryGetValue(user, out var SelectedMember);

        if (SelectedMember == null)
            return;

        Session.Selected.Team.Data.Members.Remove(user);
        try
        {
            await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Session.Selected.Team.Data.Members));
            _DB.Members.Cache.Remove(user, out _);
        }
        catch
        {
            Session.Selected.Team.Data.Members.TryAdd(user, SelectedMember);
        }

    }

    public async Task RemoveTeamRole(ObjectId role)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        _DB.Roles.Cache.TryGetValue(role, out var Role);
        if (Role == null)
            return;

        Session.Selected.Team.Data.Roles.Remove(role);
        Session.Selected.Team.Data.CachedRoles.Remove(role);
        try
        {
            await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
            _DB.Roles.Cache.Remove(role, out _);
        }
        catch
        {
            Session.Selected.Team.Data.Roles.Add(role);
            Session.Selected.Team.Data.CachedRoles.Add(role, Role);
        }
    }

    public async Task ChangeMemberRoles(PartialUserData user)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageMembers))
            return;

        var Dialog = await DialogService.OpenAsync<ChangeMemberRolesDialog>($"Update Roles for {user.UserName}", new Dictionary<string, object>()
        {
            { "Team", Session.Selected.Team.Data },
            { "Member", Session.Selected.Team.Data.GetMember(user) }
        });
    }

    public RadzenUpload IconUploader { get; set; }

    public async Task ChangeIcon()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageTeam))
            return;

        await IconUploader.Upload();
        
    }

    async Task UploadComplete(UploadCompleteEventArgs args)
    {
        Session.TriggerChange();
    }

    public async Task RemoveIcon()
    {
        if (!Session.Selected.Team.Data.HasIcon)
            return;

        if (!Member.HasTeamPermission(Data.Permissions.TeamPermission.ManageTeam))
            return;

        await Session.Selected.Team.Data.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.IconId, null));
        File.Delete(Session.Selected.Team.Data.Icon.Path("webp"));
        File.Delete(Session.Selected.Team.Data.Icon.Path("png"));
        Session.Selected.Team.Data.IconId = null;
        Session.TriggerChange();
    }
}
