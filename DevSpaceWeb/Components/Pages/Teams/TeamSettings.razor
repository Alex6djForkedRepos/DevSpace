@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Session.Selected.Team.Data.Name Settings</RadzenText>
    </div>
    <br />
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Basic">
                <EditForm Model="@TeamForm" OnValidSubmit="@CheckTeam">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamForm.Name" Style="width: 100%" aria-label="Team Name" autocomplete="off"
                                           Placeholder="My Team" MaxLength="32" />
                            <ValidationMessage For="() => TeamForm.Name" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamForm.VanityUrl" Style="width: 100%" aria-label="Vanity Url" autocomplete="off"
                                           Placeholder="myteam" MaxLength="100" />
                            <ValidationMessage For="() => TeamForm.VanityUrl" style="color: var(--rz-danger);" />
                            <br />
                            <br />

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save" ButtonType="ButtonType.Submit" />
                        </EditForm>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Members">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Add Member"/>
                <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Transfer Ownership" />
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TeamForm = new TeamBasicModel
        {
            Name = Session.Selected.Team.Data.Name
        };
        Console.WriteLine("Vanity: " + Session.Selected.Team.Data.VanityUrl);
        TeamForm.VanityUrl = Session.Selected.Team.Data.VanityUrl;
    }

    public TeamBasicModel TeamForm { get; set; } = new TeamBasicModel();

    public async Task CheckTeam()
    {
        if (!string.IsNullOrEmpty(TeamForm.VanityUrl))
        {
            TeamForm.VanityUrl = TeamForm.VanityUrl.Replace(" ", "-").ToLower();
        }

        Session.Selected.Team.Data.Name = TeamForm.Name;
        if (Session.Selected.Team.Data.VanityUrl != TeamForm.VanityUrl)
        {
            if (string.IsNullOrEmpty(TeamForm.VanityUrl))
            {
                if (!string.IsNullOrEmpty(Session.Selected.Team.Data.VanityUrl))
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    Session.Selected.Team.Data.VanityUrl = string.Empty;
                }
            }
            else
            {
                if (TeamForm.VanityUrl != Session.Selected.Team.Data.VanityUrl)
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    _DB.TeamsVanityCache.TryAdd(TeamForm.VanityUrl, Session.Selected.Team.Data);
                    Session.Selected.Team.Data.VanityUrl = TeamForm.VanityUrl;
                }
            }
        }
        Session.Selected.Team.Data.Update();

    }

    public async Task AddMember()
    {

    }

    public async Task TransferOwnership()
    {
        
    }
}
