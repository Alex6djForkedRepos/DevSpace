@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Session.Selected.Team.Data.Name Settings</RadzenText>
    </div>
    <br />
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Basic">
                @if (!ManageTeam)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Team.
                    </RadzenAlert>
                }
                else
                {
                    <EditForm Model="@TeamForm" OnValidSubmit="@CheckTeam">
                        <DataAnnotationsValidator />

                    <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                    <RadzenTextBox @bind-Value="@TeamForm.Name" Style="width: 100%" aria-label="Team Name" autocomplete="false"
                                   Placeholder="My Team" MaxLength="32" />
                    <ValidationMessage For="() => TeamForm.Name" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                    <RadzenTextBox @bind-Value="@TeamForm.VanityUrl" Style="width: 100%" aria-label="Vanity Url" autocomplete="false"
                                   Placeholder="myteam" MaxLength="100" />
                    <ValidationMessage For="() => TeamForm.VanityUrl" style="color: var(--rz-danger);" />
                    <br />
                    <br />

                    <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save" ButtonType="ButtonType.Submit" />
                
                </EditForm>
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Members">
                @if (!ManageMembers)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Members.
                    </RadzenAlert>
                }
                else
                {
                <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Add Member" Click="@AddMember" />
                <br />
                <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Users">
                    <Template Context="user">
                        <RadzenCard Style="width:300px;">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                @if (_DB.Users.TryGetValue(user, out PartialUserData ud))
                                {
                                    <RadzenImage Path="@ud.GetAvatarOrDefault()" Style="width: 80px; height: 80px; border-radius: 50%" />
                                    <RadzenStack Gap="0">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Username</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @ud.UserName
                                        </RadzenText>
                                    </RadzenStack>
                                    @if (user != Session.Selected.Team.Data.OwnerId)
                                    {
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(ud.Id))" />
                                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Transfer Ownership" Click="@(() => TransferOwnership(ud))" />
                                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" Text="Change Roles" Click="@(() => ChangeMemberRoles(ud))" />
                                    }
                                }
                                else
                                {
                                    <RadzenImage Path="https://cdn.fluxpoint.dev/devspace/user_avatar.webp" Style="width: 80px; height: 80px; border-radius: 50%" />
                                    <RadzenStack Gap="0">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Account Deleted</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @user.ToString()
                                        </RadzenText>
                                    </RadzenStack>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Remove" Click="@(() => RemoveTeamMember(user))" />
                                }


                            </RadzenStack>
                            <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                            <RadzenRow>
                                <RadzenColumn Size="8" class="rz-text-truncate">
                                    @* <b>@(order.ShipName)</b> *@
                                </RadzenColumn>
                                <RadzenColumn Size="4" class="rz-text-align-end">
                                    @* <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)}") /> *@
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Roles">
                @if (!ManageRoles)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Roles.
                    </RadzenAlert>
                }
                else
                {
                <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Add Role" Click="@CreateRole" />
                <br />
                    <RadzenRow Gap="0.2rem">
                        <RadzenColumn Size="3" class=" rz-py-2 pr-2">
                            <RadzenListBox @bind-Value="@SelectedRole" Data="@Roles"
                                           TextProperty="@nameof(TeamRoleData.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                           Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />
                        </RadzenColumn>
                        <RadzenColumn class="rz-py-2">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Gap="0.2rem">
                                @foreach(var i in Roles)
                                {
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">@i.Name Role</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @i.Description
                                        </RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Team Permissions</RadzenText>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamViewMembers" />
                                            <RadzenLabel Text="View Members" Component="TeamViewMembers" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">View all members in the team.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamManageMembers" />
                                            <RadzenLabel Text="Manage Members" Component="TeamManageMembers" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Add or remove members to the team except global admins.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamManageRoles" />
                                            <RadzenLabel Text="Manage Roles" Component="TeamManageRoles" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Give members roles except global admin.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamManagePermissions" />
                                            <RadzenLabel Text="Manage Permissions" Component="TeamManagePermissions" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change permissions for roles except global admin.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamManageTeam" />
                                            <RadzenLabel Text="Manage Team" Component="TeamManageTeam" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change team settings.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamAdministrator" />
                                            <RadzenLabel Text="Team Administrator" Component="TeamAdministrator" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">All team permissions except global administrator.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="TeamGlobalAdministrator" />
                                            <RadzenLabel Text="Global Administrator" Component="TeamGlobalAdministrator" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all team settings, members, resources and permissions.</span>
                                        </div>
                                    </RadzenStack>
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Server Permissions</RadzenText>
                                        
                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerView" />
                                            <RadzenLabel Text="View Servers" Component="ServerView" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">View all servers the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerController" />
                                            <RadzenLabel Text="Docker Controller" Component="ServerDockerController" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Controll all docker containers such a start/stop/restart action.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerManager" />
                                            <RadzenLabel Text="Docker Manager" Component="ServerDockerManager" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Create and edit all docker containers.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerDockerAdministrator" />
                                            <RadzenLabel Text="Docker Administrator" Component="ServerDockerAdministrator" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all docker containers, mounts, networks, etc.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerManagePermissions" />
                                            <RadzenLabel Text="Manage Permissions" Component="ServerManagePermissions" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change permissions for all servers the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ServerAdmin" />
                                            <RadzenLabel Text="Server Administrator" Component="ServerAdmin" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all servers the team owns.</span>
                                        </div>
                                    </RadzenStack>
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Website Permissions</RadzenText>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="WebsiteView" />
                                            <RadzenLabel Text="View Websites" Component="WebsiteView" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">View all websites the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="WebsiteManagePermissions" />
                                            <RadzenLabel Text="Manage Permissions" Component="WebsiteManagePermissions" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change permissions for all websites the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="WebsiteAdmin" />
                                            <RadzenLabel Text="Website Administrator" Component="WebsiteAdmin" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all websites the team owns.</span>
                                        </div>
                                    </RadzenStack>
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Project Permissions</RadzenText>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ProjectView" />
                                            <RadzenLabel Text="View Projects" Component="ProjectView" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">View all projects the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ProjectManagePermissions" />
                                            <RadzenLabel Text="Manage Permissions" Component="ProjectManagePermissions" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change permissions for all projects the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="ProjectAdmin" />
                                            <RadzenLabel Text="Project Administrator" Component="ProjectAdmin" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all projects the team owns.</span>
                                        </div>
                                    </RadzenStack>
                                    <RadzenStack Gap="0" class="role-box">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">Log Permissions</RadzenText>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="LogView" />
                                            <RadzenLabel Text="View Logs" Component="LogView" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">View all logs the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="LogManagePermissions" />
                                            <RadzenLabel Text="Manage Permissions" Component="LogManagePermissions" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Change permissions for all logs the team owns.</span>
                                        </div>

                                        <div class="role-permissions">
                                            <RadzenCheckBox Value="@CheckBox" Name="LogAdmin" />
                                            <RadzenLabel Text="Log Administrator" Component="LogAdmin" class="rz-ms-2" />
                                            <span style="color: var(--rz-text-tertiary-color)">Manage all logs the team owns.</span>
                                        </div>
                                    </RadzenStack>
                                }
                                
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TeamForm = new TeamBasicModel
            {
                Name = Session.Selected.Team.Data.Name
            };
        TeamForm.VanityUrl = Session.Selected.Team.Data.VanityUrl;
        Users = Session.Selected.Team.Data.Members.Keys;
        Roles = Session.Selected.Team.Data.CachedRoles.Values.ToArray();
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member != null)
        {
            ManageTeam = Session.Selected.Team.Data.HasTeamPermission(member, TeamPermission.ManageTeam);
            ManageMembers = Session.Selected.Team.Data.HasTeamPermission(member, TeamPermission.ManageMembers);
            ManageRoles = Session.Selected.Team.Data.HasTeamPermission(member, TeamPermission.ManageRoles);
        }
    }

    public bool ManageTeam { get; set; }
    public bool ManageMembers { get; set; }
    public bool ManageRoles { get; set; }

    public IEnumerable<ObjectId> Users { get; set; }
    public TeamRoleData[] Roles { get; set; }
    public TeamRoleData SelectedRole { get; set; }
    public bool CheckBox { get; set; }

    public TeamBasicModel TeamForm { get; set; } = new TeamBasicModel();

    public async Task CheckTeam()
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageTeam))
            return;

        if (!string.IsNullOrEmpty(TeamForm.VanityUrl))
        {
            TeamForm.VanityUrl = TeamForm.VanityUrl.Replace(" ", "-").ToLower();
        }

        Session.Selected.Team.Data.Name = TeamForm.Name;
        if (Session.Selected.Team.Data.VanityUrl != TeamForm.VanityUrl)
        {
            if (string.IsNullOrEmpty(TeamForm.VanityUrl))
            {
                if (!string.IsNullOrEmpty(Session.Selected.Team.Data.VanityUrl))
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    Session.Selected.Team.Data.VanityUrl = string.Empty;
                }
            }
            else
            {
                if (TeamForm.VanityUrl != Session.Selected.Team.Data.VanityUrl)
                {
                    _DB.TeamsVanityCache.TryRemove(Session.Selected.Team.Data.VanityUrl, out _);
                    _DB.TeamsVanityCache.TryAdd(TeamForm.VanityUrl, Session.Selected.Team.Data);
                    Session.Selected.Team.Data.VanityUrl = TeamForm.VanityUrl;
                }
            }
        }
        Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.VanityUrl, Session.Selected.Team.Data.VanityUrl));

    }

    public async Task AddMember()
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageMembers))
            return;

        await DialogService.ShowDynamicFormAsync<TeamAddUserModel>("Add Team User", new TeamAddUserModel(), (TeamAddUserModel data) =>
        {
            TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
            if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageMembers))
                return "You do not have permission for Manage Members.";

            PartialUserData? user = _DB.Users.Values.FirstOrDefault(x => x.Email.Equals(data.Email, StringComparison.OrdinalIgnoreCase));
            if (user == null)
                return "Could not find a user account with that email address.";

            if (user.ManagedAccountTeamId.HasValue)
                return "This user account is managed by another team.";

            if (Session.Selected.Team.Data.Members.ContainsKey(user.Id))
                return "This user account has already been added to the team.";

            TeamMemberData memberData = new TeamMemberData
                {
                    TeamId = Session.Selected.Team.Data.Id,
                    UserId = user.Id
                };

            var task = Task.Run<bool>(async () =>
            {
                try
                {
                    await _DB.Members.CreateAsync(memberData);
                }
                catch
                {
                    return false;
                }
                return true;
            });
            task.Wait();
            if (!task.Result)
                return "Failed to create team member due to a database error.";
            Session.Selected.Team.Data.Members.Add(user.Id, memberData.Id);
            Session.Selected.Team.Data.CachedMembers.Add(memberData.Id, memberData);
            Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Session.Selected.Team.Data.Members));
            return string.Empty;
        });
    }

    public async Task TransferOwnership(PartialUserData user)
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Team Ownership Transfer", $"This will give ownership of team {Session.Selected.Team.Data.Name} to the account {user.UserName}, are you sure you want to continue?", "Yes", ButtonStyle.Success);
        if (!Confirm)
            return;

        var User = await Session.GetCurrentUserAsync();

        var twoFactorConfirm = await Session.TriggerTwoFactorAuthentication(User, true);
        if (!twoFactorConfirm)
            return;

        member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || member.Team.OwnerId != Session.CurrentUserId.Value)
            return;

        Session.Selected.Team.Data.OwnerId = user.Id;
        Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.OwnerId, user.Id));
    }

    public async Task RemoveTeamMember(ObjectId user)
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageMembers))
            return;

        Session.Selected.Team.Data.Members.Remove(user);
        Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Members, Session.Selected.Team.Data.Members));
    }

    public async Task CreateRole()
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageRoles))
            return;

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), (TeamRoleModel data) =>
        {
            TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
            if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles.";

            foreach (var r in Session.Selected.Team.Data.CachedRoles.Values)
            {
                if (r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
                {
                    TeamId = Session.Selected.Team.Data.Id,
                    Name = data.Name,
                    Description = data.Description
                };

            var task = Task.Run<bool>(async () =>
        {
            try
            {
                await _DB.Roles.CreateAsync(role);
            }
            catch
            {
                return false;
            }
            return true;
        });
            task.Wait();
            if (!task.Result)
                return "Failed to create team role due to a database error.";
            Session.Selected.Team.Data.Roles.Add(role.Id);
            Session.Selected.Team.Data.CachedRoles.Add(role.Id, role);
            Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
            return string.Empty;
        });
    }

    public async Task RemoveTeamRole(ObjectId role)
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageRoles))
            return;

        Session.Selected.Team.Data.Roles.Remove(role);
        Session.Selected.Team.Data.CachedRoles.Remove(role);
        Session.Selected.Team.Data.Update(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Session.Selected.Team.Data.Roles));
    }

    public async Task ChangeMemberRoles(PartialUserData user)
    {
        TeamMemberData? member = Session.Selected.Team.Data.GetMember(Session);
        if (member == null || member.Team == null || !member.Team.HasTeamPermission(member, TeamPermission.ManageMembers))
            return;

        var Dialog = await DialogService.OpenAsync<ChangeMemberRolesDialog>($"Update Roles for {user.UserName}", new Dictionary<string, object>()
        {
            { "Team", Session.Selected.Team.Data },
            { "Member", Session.Selected.Team.Data.GetMember(user) }
        });
    }
}
