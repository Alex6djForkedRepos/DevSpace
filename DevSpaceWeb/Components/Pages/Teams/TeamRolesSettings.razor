@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Components.Dialogs.Members
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService

<PageTitle>Team Roles | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText TextStyle="TextStyle.H6">@Team.Name Roles</RadzenText>
    </div>

    @if (!Member.HasTeamPermission(TeamPermission.ViewRoles))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Roles
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Create Role" Click="@CreateRole" Disabled="(!Member.HasTeamPermission(TeamPermission.ManageRoles))" />
        <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Update Role Positions" Click="@UpdateRolePositions" Disabled="(!Member.HasTeamPermission(TeamPermission.ManageRoles))" />
        <br />
        <br />
        <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
            @foreach(TeamRoleData i in Team.CachedRoles.Values.OrderByDescending(x => x.Position))
            {
                <div>
                    <p>@i.Name (@i.Position)</p>
                    <RadzenButton Text="Delete" Click="@(() => DeleteRole(i))" Disabled="@(!Member.HasTeamPermission(TeamPermission.ManageRoles) || i.Position >= Member.GetRank())"
                    ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Shade="Shade.Dark" />
                </div>

            }
        </RadzenStack>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    public async Task CreateRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), async (TeamRoleModel data) =>
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles";

            if (data.Name.Equals("Default"))
                return "You can't name the role default";


            foreach (TeamRoleData r in Team.CachedRoles.Values)
            {
                if (r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
                {
                    TeamId = Team.Id,
                    Name = data.Name,
                    Description = data.Description,
                    Position = Team.CachedRoles.Any() ? Team.CachedRoles.Values.OrderBy(x => x.Position).Last().Position + 1 : 0
                };

            try
            {
                await _DB.Roles.CreateAsync(role);
            }
            catch
            {
                return "Failed to create role.";
            }

            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Team.Roles), () =>
        {
            _DB.Roles.Cache.TryAdd(role.Id, role);
            Team.Roles.Add(role.Id);
            Team.CachedRoles.Add(role.Id, role);
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Role, AuditLogEventType.RoleCreated)
            .SetTarget(role)
            .AddProperty("Name", role.Name)
            .AddProperty("Description", role.Description)
            .AddProperty("Position", role.Position.ToString()));
        });


            Team.TriggerRoleChange(role, true);

            return string.Empty;
        });
    }

    public async Task DeleteRole(TeamRoleData role)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
            return;

        if (role.Position >= Member.GetRank())
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Delete Role", "Are you sure your want to delete this?.", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
                return;

            if (role.Position >= Member.GetRank())
                return;

            await role.DeleteAsync(Member, () =>
            {
                Session.Selected.Team.Console = null;
            });
        }
    }

    public async Task UpdateRolePositions()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        await DialogService.OpenAsync<ChangeRolesPositionDialog>($"Update Roles Position", new Dictionary<string, object>()
        {
            { "Team", Team }
        });
    }
}
