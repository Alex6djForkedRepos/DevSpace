@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Components.Dialogs.Members
@using DevSpaceWeb.Models.Teams
@inject DialogService DialogService

<PageTitle>Team Roles | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:gear"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Team Roles</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams")" Text="Teams" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl)" Text="@Session.Selected.Team?.Data.Name" />
        <RadzenBreadCrumbItem Text="Roles" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewRoles))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Roles
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Create Role" Click="@CreateRole" Disabled="(Member == null || !Member.HasTeamPermission(Team, TeamPermission.ManageRoles))" />
        <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Update Role Positions" Click="@UpdateRolePositions" Disabled="(Member == null || !Member.HasTeamPermission(Team, TeamPermission.ManageRoles))" />
        <br />
        <br />
        <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
            @if (Team != null)
            {
                foreach (TeamRoleData i in Team.CachedRoles.Values.OrderByDescending(x => x.GetPosition()))
                {
                    <div>
                        <p>@i.Name (@i.GetPosition())</p>
                        <RadzenButton Text="Delete" Click="@(() => DeleteRole(i))" Disabled="@(Member == null || !Member.HasTeamPermission(Team, TeamPermission.ManageRoles) || i.GetPosition() >= Member.GetRank())"
                                      ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Shade="Shade.Dark" />
                    </div>

                }
            }
        </RadzenStack>
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public async Task CreateRole()
    {
        if (Member == null || Team == null || !Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        await DialogService.ShowDynamicFormAsync<TeamRoleModel>("Create Team Role", new TeamRoleModel(), async (TeamRoleModel data) =>
        {
            if (!Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
                return "You do not have permission for Manage Roles";

            if (string.IsNullOrEmpty(data.Name))
                return "Role name can't be empty.";

            if (data.Name.Equals("Default"))
                return "You can't name the role default";


            foreach (TeamRoleData r in Team.CachedRoles.Values)
            {
                if (!string.IsNullOrEmpty(r.Name) && r.Name.Equals(data.Name, StringComparison.OrdinalIgnoreCase))
                    return "A role with this name already exists.";
            }

            TeamRoleData role = new TeamRoleData
            {
                TeamId = Team.Id,
                Name = data.Name,
                Description = data.Description
            };

            try
            {
                await _DB.Roles.CreateAsync(role);
            }
            catch
            {
                return "Failed to create role.";
            }
            Team.AddRole(Member, role);


            return string.Empty;
        });
    }

    public async Task DeleteRole(TeamRoleData role)
    {
        if (Member == null || Team == null)
            return;

        if (!Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
            return;

        if (role.GetPosition() >= Member.GetRank())
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Delete Role", "Are you sure your want to delete this?.", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            if (!Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
                return;

            if (role.GetPosition() >= Member.GetRank())
                return;

            FilterDefinition<TeamRoleData> filter = Builders<TeamRoleData>.Filter.Eq(r => r.Id, role.Id);
            DeleteResult Result = await _DB.Roles.Collection.DeleteOneAsync(filter);
            if (Result.IsAcknowledged)
                Team.DeleteRole(Member, role);
        }
    }

    public async Task UpdateRolePositions()
    {
        if (Member == null || Team == null || !Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        await DialogService.OpenAsync<ChangeRolesPositionDialog>($"Update Roles Position", new Dictionary<string, object>()
        {
            { "Team", Team }
        });
    }
}
