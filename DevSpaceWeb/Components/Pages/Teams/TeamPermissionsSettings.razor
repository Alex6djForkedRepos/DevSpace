@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models


<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Team.Name Permissions</RadzenText>
    </div>
    @if (!Member.HasTeamPermission(TeamPermission.ViewPermissions))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Permissions.
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenRow Gap="0.2rem">
            <RadzenColumn Size="3" class=" rz-py-2 pr-2">
                <RadzenListBox @bind-Value="@SelectedRole" Change="@(() => Permissions = SelectedRole.Permissions.Clone())" Data="@Roles" Disabled="@UnsavedPermissions"
                TextProperty="@nameof(TeamRoleData.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})">
                    <Template>
                        @if (CurrentRank < context.Position)
                        {
                            @context.Name
                        }
                        else
                        {
                            <span class="iconify" data-icon="mdi:lock"></span> @context.Name
                        }
                    </Template>
                </RadzenListBox>
            </RadzenColumn>
            <RadzenColumn class="rz-py-2">
                @if (SelectedRole != null)
                {
                    <div class="role-info">
                        <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="rz-display-flex rz-mt-2 rz-my-0">@SelectedRole.Name Role</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2">
                            @SelectedRole.Description
                        </RadzenText>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Delete Role" Click="@DeleteRole" Disabled="@(SelectedRole.Name == "Default" || CurrentRank >= SelectedRole.Position || !Member.HasTeamPermission(TeamPermission.ManageRoles))" />
                    </div>

                    @if (Member.HasTeamPermission(TeamPermission.ViewPermissions))
                    {
                        @if (Member.GetRank() >= SelectedRole.Position)
                        {
                            <div class="role-info" style="background: none !important;">
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                                    <div>You can't edit these permissions because of your current access.</div>
                                </RadzenAlert>
                            </div>
                        }

                        <PermissionGrid PermissionType="PermissionType.All" Permissions="@Permissions" UnsavedPermissionsChanged="@((arg) => UnsavedPermissions = arg)"
                        OnSave="@SavePermissions" OnLoad="@LoadPermissions" IsDisabled="@(Member.GetRank() >= SelectedRole.Position)"></PermissionGrid>
                    }
                    else
                    {
                        <div class="role-info" style="background: none !important;">
                            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                                <div>You do not have permission for <strong>View Permissions</strong></div>
                            </RadzenAlert>
                        </div>
                    }
                }
            </RadzenColumn>
        </RadzenRow>
    }
</div>

<style>
    .role-box .rz-dropdown {
    width: 100% !important;
    }

</style>

<style>
    .rz-tabview-panel .pr-2 {
    max-width: 200px;
    }

    .role-box {
    width: 260px;
    padding: 4px;
    padding-left: 8px;
    padding-right: 8px !important;
    padding-bottom: 16px;
    background-color: #242527 !important;
    margin-right: 4px;
    margin-bottom: 4px;
    box-shadow: var(--rz-card-shadow);
    }

    .role-box .rz-text-subtitle2 {
    text-align: center !important;
    display: inline-block !important;
    margin-bottom: 14px !important;
    }

    .role-permissions span {
    display: block;
    }

    .role-permissions {
    margin-top: 6px;
    margin-bottom: 16px;
    }

    .role-permissions .rz-chkbox-box {
    margin-top: 4px !important;
    margin-bottom: -4px !important;
    }

    .role-info {
    background-color: var(--rz-info-darker) !important;
    padding: 6px;
    padding-left: 10px;
    padding-right: 10px;
    border-radius: 4px;
    margin-bottom: 10px;
    max-width: 796px;
    margin-left: auto;
    margin-right: auto;
    }

    .role-box .iconify {
    width: 22px;
    height: 22px;
    margin-right: 6px;
    margin-top: -2px;
    }

    .role-box .rz-text-body2 {
    color: var(--rz-warning);
    }

    .rz-chkbox-box .rzi {
    color: var(--rz-series-7) !important;
    }

    .rz-chkbox-box.rz-state-active {
    border-color: var(--rz-success-light);
    }

    .role-permissions span:not(.rz-chkbox-box span) {
    margin-top: 4px;
    margin-left: 32px;
    }
</style>


@code {
    public List<TeamRoleData> Roles { get; set; }

    public TeamRoleData? SelectedRole { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    public int CurrentRank;

    public bool UnsavedPermissions { get; set; }
    public PermissionsSet Permissions { get; set; }

    public void LoadPermissions()
    {
        Permissions = SelectedRole.Permissions.Clone();
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        if (!Member.HasTeamPermission(TeamPermission.ManagePermissions))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManagePermissions);
            return;
        }

        if (SelectedRole.Name == "Default")
        {
            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.DefaultPermissions, perms));
            Team.DefaultPermissions = perms;
            SelectedRole.Permissions = perms;
        }
        else
        {
            CurrentRank = Member.GetRank();
            if (CurrentRank >= SelectedRole.Position)
                return;

            await SelectedRole.UpdateAsync(new UpdateDefinitionBuilder<TeamRoleData>().Set(x => x.Permissions, perms));
            SelectedRole.Permissions = perms;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        CurrentRank = Member.GetRank();
        if (Roles == null)
        {
            Roles = Team.CachedRoles.Values.OrderBy(x => x.Position).ToList();
            Roles = Roles.Append(new TeamRoleData { Name = "Default", Permissions = Team.DefaultPermissions, Position = int.MaxValue }).ToList();
            if (Roles.Any())
            {
                SelectedRole = Roles.First();
                Permissions = SelectedRole.Permissions.Clone();
            }
        }
    }

    public async Task DeleteRole()
    {
        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        CurrentRank = Member.GetRank();
        if (CurrentRank >= SelectedRole.Position)
            return;

        await _DB.Roles.Collection.DeleteOneAsync(new FilterDefinitionBuilder<TeamRoleData>().Eq(x => x.Id, SelectedRole.Id));
        _DB.Roles.Cache.Remove(SelectedRole.Id, out _);
        Team.CachedRoles.Remove(SelectedRole.Id);
        Team.Roles = Team.Roles.Where(x => x != SelectedRole.Id).ToHashSet();
        Team.TriggerRoleChange(SelectedRole, false);
        await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.Roles, Team.Roles));

        SelectedRole = null;
    }

    

}
