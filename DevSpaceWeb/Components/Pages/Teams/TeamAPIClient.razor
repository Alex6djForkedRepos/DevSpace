@using DevSpaceWeb.Data.API
@inject DialogService DialogService

<PageTitle>Team API Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:robot"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">API Client@((!NoAccess && Client != null) ? " - " + Client.Name : "")</RadzenText>
    </div>
    @if (Client == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            Unknown API client.
        </RadzenAlert>
    }
    else if (NoAccess)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have access to this API client.
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Owner</RadzenText>
        <RadzenUserSelector Value="@OwnerUser" Disabled="@(!CanManage)" OnSelected="@ChangeOwner"></RadzenUserSelector>

        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Created</RadzenText>
        <RadzenText Text="@Utils.GetLocalDate(Session, Client.CreatedAt)" TextStyle="TextStyle.Body2"></RadzenText>

        <br />
        <a href="/swagger/index.html" target="_blank"><RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Text="Docs" /></a>
        <RadzenButton Click="@ToggleClientDisable" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="@((Client.IsDisabled ? "Enable" : "Disable") + " Client")" Disabled="@(!CanManage)" />

    }
</div>

@if (Client != null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:form-textbox-password"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Token</RadzenText>
        </div>
        <br />
        @if (string.IsNullOrEmpty(Client.TokenHash))
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                Token has not been generated.
            </RadzenAlert>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Generated</RadzenText>
            <RadzenText Text="@GeneratedUser" TextStyle="TextStyle.Body2"></RadzenText>
            <RadzenText Text="@Utils.GetLocalDate(Session, Client.CreatedAt)" TextStyle="TextStyle.Body2"></RadzenText>
        }
        <br />
        <RadzenButton Click="@GenerateToken" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Generate Token" Disabled="@(!CanManage)" />
    </div>
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:lock"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Permissions</RadzenText>
        </div>
        <br />
        <RadzenText Text="The API client will inherit permissions from the owner user or custom permissions if set." TextStyle="TextStyle.Body1"></RadzenText>
        <br />
        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
            Only global administrators can set custom permissions.
        </RadzenAlert>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-1">Permission Type</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenSwitch Value="@Client.UseCustomPermissions" Disabled="@(!Member.HasTeamPermission(TeamPermission.GlobalAdministrator))" ValueChanged="@ToggleCustomPermissions" Name="UseCustom" />
            <RadzenLabel Text="Use Custom Permissions" Component="UseCustom" />
        </RadzenStack>
        <br />
        <br />
        @if (Client.UseCustomPermissions)
        {
            <PermissionGrid IsDisabled="@(!Member.HasTeamPermission(TeamPermission.GlobalAdministrator))" Permissions="@Permissions" PermissionType="PermissionType.All" OnLoad="@LoadPermissions" OnSave="@SavePermissions"></PermissionGrid>
        }

    </div>
}

<style>
    .rz-tabview-panel .pr-2 {
    max-width: 200px;
    }


</style>


@code {
    [Parameter]
    public string? ClientId { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;



    public APIClient? Client { get; set; }
    public bool NoAccess { get; set; }
    public bool CanManage { get; set; }
    public string OwnerUser { get; set; }
    public string GeneratedUser { get; set; }
    public PermissionsSet Permissions;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ClientId) && ObjectId.TryParse(ClientId, out var id) && _DB.API.Cache.TryGetValue(id, out var client))
            Client = client;
        else
            Client = null;

        if (Client != null)
        {
            if (_DB.Users.TryGetValue(Client.OwnerId, out var user))
                OwnerUser = user.UserName;
            else
                OwnerUser = "Unknown?";

            if (Client.GeneratedBy.HasValue && _DB.Users.TryGetValue(Client.GeneratedBy.Value, out var user2))
                GeneratedUser = user2.UserName;
            else
                GeneratedUser = "Unknown?";


            NoAccess = !Client.HasAccess(Member);
            CanManage = Client.CanManage(Member);
            Permissions = Client.CustomPermissions.Clone();
        }
    }


    public async Task ChangeOwner(PartialUserData user)
    {
        CanManage = Client.CanManage(Member);
        if (!CanManage)
            return;

        bool Confirm = await DialogService.ShowConfirmAsync("Change Ownership", "Change API client owner, this will also reset the token.", "Confirm", ButtonStyle.Success);
        if (Confirm)
        {
            var AuthUser = await Session.GetCurrentUserAsync();
            await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>()
            .Set(x => x.OwnerId, user.Id).Set(x => x.TokenHash, "").Set(x => x.GeneratedBy, AuthUser.Id).Set(x => x.GeneratedAt, DateTime.UtcNow));
            Client.TokenHash = "";
            Client.GeneratedBy = AuthUser.Id;
            Client.GeneratedAt = DateTime.UtcNow;
            Client.OwnerId = user.Id;
            OwnerUser = user.UserName;
            GeneratedUser = AuthUser.UserName;
            StateHasChanged();
        }
    }

    public async Task ToggleCustomPermissions(bool value)
    {
        if (!Member.HasTeamPermission(TeamPermission.GlobalAdministrator))
            return;

        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.UseCustomPermissions, value));
        Client.UseCustomPermissions = value;
    }

    public void LoadPermissions()
    {
        Permissions = Client.CustomPermissions.Clone();
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        if (!Member.HasTeamPermission(TeamPermission.GlobalAdministrator))
            return;

        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.CustomPermissions, perms));
        Client.CustomPermissions = perms;
    }

    public async Task GenerateToken()
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;

        var AuthUser = await Session.GetCurrentUserAsync();
        bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, true);
        if (!TwoFactorValid)
        {
            await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
            return;
        }

        string Token = _Data.GetRandomString(new Random().Next(25, 45));
        string Hash = Utils.Hasher.HashPassword(null, Token);
        AuthUser = await Session.GetCurrentUserAsync();
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>()
        .Set(x => x.TokenHash, Hash).Set(x => x.GeneratedAt, DateTime.UtcNow).Set(x => x.GeneratedBy, AuthUser.Id));
        Client.TokenHash = Hash;
        Client.GeneratedAt = DateTime.UtcNow;
        Client.GeneratedBy = AuthUser.Id;
        GeneratedUser = AuthUser.UserName;
        StateHasChanged();
        await DialogService.ShowInfoAsync("API Token", Client.Id.ToString() + "." + Token);
    }

    public async Task ToggleClientDisable()
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.IsDisabled, !Client.IsDisabled));
        if (Client.IsDisabled)
        {
            Client.IsDisabled = false;
            await DialogService.ShowInfoAsync("API Client", "This client has been enabled.");
        }
        else
        {
            Client.IsDisabled = true;
            await DialogService.ShowInfoAsync("API Client", "This client has been disabled.");
        }
    }
}
