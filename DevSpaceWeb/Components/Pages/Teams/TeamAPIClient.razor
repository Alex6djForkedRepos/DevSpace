@using DevSpaceWeb.Data.API
@inject DialogService DialogService

<PageTitle>Team API Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:robot"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">API Client@((!NoAccess && Client != null) ? " - " + Client.Name : "")</RadzenText>
    </div>
    @if (Client == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            Unknown API client.
        </RadzenAlert>
    }
    else if (NoAccess)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have access to this API client.
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Owner</RadzenText>
        <RadzenTextAction Value="@OwnerUser" ActionText="Change" Disabled="@(!CanManage)" OnAction="@ChangeOwner"></RadzenTextAction>

        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Created</RadzenText>
        <RadzenText Text="@Utils.GetLocalDate(Session, Client.CreatedAt)"></RadzenText>

        <br />
        <a href="/swagger/index.html" target="_blank"><RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Text="Docs" /></a>
        <RadzenButton Click="@ToggleClientDisable" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="@((Client.IsDisabled ? "Enable" : "Disable") + " Client")" Disabled="@(!CanManage)" />
        <RadzenButton Click="@GenerateToken" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Generate Token" Disabled="@(!CanManage)" />
    }
</div>

@if (Client != null)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:lock"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Permissions</RadzenText>
        </div>
        <br />
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Permission Type</RadzenText>
        <RadzenSelectBar Value="@Client.UseCustomPermissions" Change="@SetPermissionType" TValue="bool" Disabled="@(!CanManage)">
            <Items>
                <RadzenSelectBarItem Text="User" Value="false" />
                <RadzenSelectBarItem Text="Custom" Value="true" />
            </Items>
        </RadzenSelectBar>
        <br />
        <br style="margin-bottom: 10px;" />
        @if (Client.UseCustomPermissions)
        {
            <PermissionGrid IsDisabled="@(!CanManage)" Permissions="@Permissions" PermissionType="PermissionType.All" OnLoad="@LoadPermissions" OnSave="@SavePermissions"></PermissionGrid>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Access User</RadzenText>
            <RadzenTextAction Value="@PermissionUser" ActionText="Change" Disabled="@(!CanManage)" OnAction="@ChangePermissionUser"></RadzenTextAction>
        }

    </div>
}

<style>
    .rz-tabview-panel .pr-2 {
    max-width: 200px;
    }

    .role-box {
    width: 260px;
    padding: 4px;
    padding-left: 8px;
    padding-right: 8px !important;
    padding-bottom: 16px;
    background-color: #242527 !important;
    margin-right: 4px;
    margin-bottom: 4px;
    box-shadow: var(--rz-card-shadow);
    }

    .role-box .rz-text-subtitle2 {
    text-align: center !important;
    display: inline-block !important;
    margin-bottom: 14px !important;
    }

    .role-permissions span {
    display: block;
    }

    .role-permissions {
    margin-top: 6px;
    margin-bottom: 16px;
    }

    .role-permissions .rz-chkbox-box {
    margin-top: 4px !important;
    margin-bottom: -4px !important;
    }

    .role-info {
    background-color: var(--rz-info-darker) !important;
    padding: 6px;
    padding-left: 10px;
    padding-right: 10px;
    border-radius: 4px;
    margin-bottom: 10px;
    max-width: 796px;
    margin-left: auto;
    margin-right: auto;
    }

    .role-box .iconify {
    width: 22px;
    height: 22px;
    margin-right: 6px;
    margin-top: -2px;
    }

    .role-box .rz-text-body2 {
    color: var(--rz-warning);
    }

    .rz-chkbox-box .rzi {
    color: var(--rz-series-7) !important;
    }

    .rz-chkbox-box.rz-state-active {
    border-color: var(--rz-success-light);
    }

    .role-permissions span:not(.rz-chkbox-box span) {
    margin-top: 4px;
    margin-left: 32px;
    }
</style>


@code {
    [Parameter]
    public string? ClientId { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    public APIClient? Client { get; set; }
    public bool NoAccess { get; set; }
    public bool CanManage { get; set; }
    public string OwnerUser { get; set; } = "Builderb";
    public string PermissionUser { get; set; } = "Builderb";
    public PermissionsSet Permissions;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ClientId) && ObjectId.TryParse(ClientId, out var id) && _DB.API.Cache.TryGetValue(id, out var client))
            Client = client;
        else
            Client = null;

        if (Client != null)
        {
            NoAccess = !Client.HasAccess(Member);
            CanManage = Client.CanManage(Member);
            Permissions = Client.CustomPermissions.Clone();
        }
    }

    public async Task SetPermissionType(bool val)
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.UseCustomPermissions, val));
        Client.UseCustomPermissions = val;
    }

    public async Task ChangeOwner()
    {

    }

    public async Task ChangePermissionUser()
    {

    }

    public void LoadPermissions()
    {
        Permissions = Client.CustomPermissions.Clone();
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.CustomPermissions, perms));
        Client.CustomPermissions = perms;
    }

    public async Task GenerateToken()
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;

        var AuthUser = await Session.GetCurrentUserAsync();
        bool TwoFactorValid = await Session.TriggerTwoFactorAuthentication(AuthUser, true, true);
        if (!TwoFactorValid)
        {
            await DialogService.ShowInfoAsync("2FA Failed", "Your Two-factor authentication method failed to verify.");
            return;
        }

        string Token = _Data.GetRandomString(new Random().Next(25, 45));
        string Hash = Utils.Hasher.HashPassword(null, Token);
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.TokenHash, Hash));
        Client.TokenHash = Hash;

        await DialogService.ShowInfoAsync("API Token", Token);
    }

    public async Task ToggleClientDisable()
    {
        CanManage = Client!.CanManage(Member);
        if (!CanManage)
            return;
        await Client.UpdateAsync(new UpdateDefinitionBuilder<APIClient>().Set(x => x.IsDisabled, !Client.IsDisabled));
        if (Client.IsDisabled)
        {
            Client.IsDisabled = false;
            await DialogService.ShowInfoAsync("API Client", "This client has been enabled.");
        }
        else
        {
            Client.IsDisabled = true;
            await DialogService.ShowInfoAsync("API Client", "This client has been disabled.");
        }
    }
}
