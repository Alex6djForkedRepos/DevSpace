@using System.Globalization

<div class="dash-box">
    <div class="dash-box-header dash-box-content">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">@Team.Name Audit Logs</RadzenText>
    </div>
    @if (!Member.HasTeamPermission(TeamPermission.ViewAuditLogs))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for View Audit Logs.
        </RadzenAlert>
    }
    else
    {
        <RadzenDataGrid @ref="@grid" Data="@AuditLogs" LoadData="@LoadData" IsLoading="@isLoading"
        PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" PageSize="15"
        GridLines="DataGridGridLines.Horizontal"
        Density="Density.Compact" Count="@Count"
        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        GotoFirstPageOnSort="true"
        LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced">
            <Columns>
                <RadzenDataGridColumn Title="Date" Property="@nameof(AuditLog.CreatedAt)" Width="160px" Filterable="false">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@Utils.GetLocalDate(Session, context.CreatedAt, false)</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Member" Property="@nameof(AuditLog.CreatedAt)" Width="160px" Filterable="false">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">Builderb</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Category" Property="@nameof(AuditLog.CategoryType)" Width="120px"
                FilterValue="@SelectedCategoryTypes">
                    <FilterTemplate>
                        <RadzenListBox @bind-Value="@SelectedCategoryTypes" Style="width:100%;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "filter by Company" }})"
                        Data="@CategoryTypes" AllowClear="true" Multiple="true" Context="CategoryList">
                        <Template>
                                @Utils.FriendlyName(((AuditLogCategoryType)CategoryList).ToString())
                                        </Template>
                        </RadzenListBox>
                    </FilterTemplate>
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@context.CategoryType</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Event" Property="@nameof(AuditLog.EventType)" Width="200px"
                                      FilterValue="@SelectedEventTypes">
                    <FilterTemplate>
                        <RadzenListBox @bind-Value="@SelectedEventTypes" Style="width:100%;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "filter by Company" }})"
                                       Data="@EventTypes" AllowClear="true" Multiple="true" Context="EventList">
                                       <Template>
                                @Utils.FriendlyName(((AuditLogEventType)EventList).ToString())
                                        </Template>
                                       </RadzenListBox>
                    </FilterTemplate>
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@Utils.FriendlyName(context.EventType.ToString())</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                @* <RadzenDataGridColumn Title="Data" Property="@nameof(AuditLog.EventType)" Width="200px"
                FilterMode="FilterMode.CheckBoxList" Type="typeof(IEnumerable<string>)">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">

                        </RadzenText>
                    </Template>
                </RadzenDataGridColumn> *@
                <RadzenDataGridColumn Title="Target" Property="@nameof(AuditLog.TargetType)" Width="140px"
                                      FilterValue="@SelectedTargetTypes">
                    <FilterTemplate>
                        <RadzenListBox @bind-Value="@SelectedTargetTypes" Style="width:100%;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "filter by Company" }})"
                                       Data="@TargetTypes" AllowClear="true" Multiple="true" Context="TargetList">
                            <Template>
                                @Utils.FriendlyName(((AuditLogTargetType)TargetList).ToString())
                            </Template>
                        </RadzenListBox>
                    </FilterTemplate>
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">@Utils.FriendlyName(context.TargetType.ToString())</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Data" Property="@nameof(AuditLog.TargetType)"
                FilterMode="FilterMode.CheckBoxList" Type="typeof(IEnumerable<string>)" Filterable="false">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Body2">
                            @switch (context.TargetType)
                            {
                                case AuditLogTargetType.Server:
                                    if (_DB.Servers.Cache.TryGetValue(context.TargetId.Value, out var server))
                                        @(server.Name)
                                    else
                                        @(context.TargetName)
                                    break;
                                case AuditLogTargetType.Log:
                                    if (_DB.Logs.Cache.TryGetValue(context.TargetId.Value, out var log))
                                        @(log.Name)
                                    else
                                        @(context.TargetName)
                                    break;
                                case AuditLogTargetType.Project:
                                    if (_DB.Projects.Cache.TryGetValue(context.TargetId.Value, out var project))
                                        @(project.Name)
                                    else
                                        @(context.TargetName)
                                    break;
                                case AuditLogTargetType.Role:
                                    if (_DB.Roles.Cache.TryGetValue(context.TargetId.Value, out var role))
                                        @(role.Name + " Role")
                                    else
                                        @(context.TargetName + " Role")
                                    break;
                                case AuditLogTargetType.User:
                                    @context.TargetName
                                    break;
                                case AuditLogTargetType.Website:
                                    if (_DB.Websites.Cache.TryGetValue(context.TargetId.Value, out var website))
                                        @(website.Name)
                                    else
                                        @(context.TargetName)
                                    break;
                            }
                        </RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Properties" Width="160px" Filterable="false">
                    <Template>
                        @* @if (context.Properties.Any())
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Dark" Icon="info" class="rz-m-1" Text="Info" />
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Dark" Icon="info" class="rz-m-1" Text="Permissions" />
                        } *@
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    public List<AuditLog> AuditLogs { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;

    public TeamMemberData Member => Session.Selected.Member;

    public IEnumerable<AuditLogCategoryType> CategoryTypes = Enum.GetValues<AuditLogCategoryType>();
    public IEnumerable<AuditLogCategoryType> SelectedCategoryTypes;

    public IEnumerable<AuditLogEventType> EventTypes = Enum.GetValues<AuditLogEventType>();
    public IEnumerable<AuditLogEventType> SelectedEventTypes;

    public IEnumerable<AuditLogTargetType> TargetTypes = Enum.GetValues<AuditLogTargetType>();
    public IEnumerable<AuditLogTargetType> SelectedTargetTypes;

    RadzenDataGrid<AuditLog> grid;

    public bool isLoading = false;
    public int Count = 0;

    public async Task LoadData(LoadDataArgs args)
    {
        Logger.LogMessage("Loading Data", LogSeverity.Info);

        
            isLoading = true;
            List<FilterDefinition<AuditLog>> filters = new List<FilterDefinition<AuditLog>>
            {
                new FilterDefinitionBuilder<AuditLog>().Eq(x => x.TeamId, Team.Id)
            };
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(args, Newtonsoft.Json.Formatting.Indented));


            foreach (var i in args.Filters)
            {
                switch (i.Property)
                {
                    case "CategoryType":
                        {
                            IEnumerable<AuditLogCategoryType> Selected = (IEnumerable<AuditLogCategoryType>)i.FilterValue;
                            if (Selected.Any())
                                filters.Add(new FilterDefinitionBuilder<AuditLog>()
                                .Or(Selected.Select(x => new FilterDefinitionBuilder<AuditLog>().Eq(x => x.CategoryType, x))));                            
                        }
                        break;
                    case "EventType":
                        {
                            IEnumerable<AuditLogEventType> Selected = (IEnumerable<AuditLogEventType>)i.FilterValue;
                            if (Selected.Any())
                                filters.Add(new FilterDefinitionBuilder<AuditLog>()
                                .Or(Selected.Select(x => new FilterDefinitionBuilder<AuditLog>().Eq(x => x.EventType, x))));
                        }
                        break;
                    case "TargetType":
                        {
                            IEnumerable<AuditLogTargetType> Selected = (IEnumerable<AuditLogTargetType>)i.FilterValue;
                            if (Selected.Any())
                                filters.Add(new FilterDefinitionBuilder<AuditLog>()
                                .Or(Selected.Select(x => new FilterDefinitionBuilder<AuditLog>().Eq(x => x.TargetType, x))));
                        }
                        break;
                }
            }

            var filter = Builders<AuditLog>.Filter.And(filters);

            try
            {
                Count = (int)await _DB.AuditLogs.Collection.CountDocumentsAsync(filter, new CountOptions
                    {
                        Limit = 450
                    });

                AuditLogs = await _DB.AuditLogs.Collection.Find(filter).SortByDescending(x => x.CreatedAt).Skip(args.Skip.GetValueOrDefault()).Limit(args.Top.GetValueOrDefault()).ToListAsync();
            }
            catch (Exception ex)
            {
                Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
            }

            isLoading = false;
        
    }
}
