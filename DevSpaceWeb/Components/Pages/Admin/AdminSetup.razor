@using DevSpaceWeb.Models.Account
@using CliWrap
@using CliWrap.Buffered
@using DevSpaceWeb.Database
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using MailKit.Net.Smtp
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using MimeKit
@using MongoDB.Bson
@using MongoDB.Driver
@using System.Net.Sockets
@using System.Net
@inject UserManager<AuthUser> UserManager
@inject SignInManager<AuthUser> SignInManager
@inject EmailService Email
@inject NavigationManager Nav
@inject HttpContextAccessor Http

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:database"></span></div>
        <RadzenText TextStyle="TextStyle.H6">Dev Space Setup</RadzenText>
    </div>
    <br />
    <RadzenTimeline LinePosition="LinePosition.Left">
        <Items>
            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Smtp)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Smtp/Email</RadzenText>

                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                            You need to setup an email provider (smtp service) for account registration and security.
                        </RadzenAlert>

                        <RadzenLabel Text="Email Type" class="rz-my-0"></RadzenLabel>
                        <RadzenSelectBar TValue="ConfigEmailType" @bind-Value="@EmailType" Style="width: 100%" Disabled="@(SetupStep != SetupStepType.Smtp)">
                            <Items>
                                <RadzenSelectBarItem Value="@ConfigEmailType.FluxpointManaged" Text="Fluxpoint Managed" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.Gmail" Text="Gmail" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.SendGrid" Text="SendGrid" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.Custom" Text="Custom" />
                            </Items>
                        </RadzenSelectBar>

                        <br style="margin-bottom: 20px;" />

                        <EditForm Model="@SmtpForm" OnValidSubmit="@CheckSmtp">
                            <DataAnnotationsValidator />

                            @switch (EmailType)
                            {
                                case ConfigEmailType.Custom:
                                    {
                                        <RadzenLabel Text="Smtp Host" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.Host" Style="width: 100%" aria-label="Smtp Host" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="smtp.domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.Host" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp Port" class="rz-my-0"></RadzenLabel>
                                        <RadzenNumeric @bind-Value="@SmtpForm.Port" Style="width: 100%" aria-label="Smtp Port" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="123" ShowUpDown="false" />
                                        <ValidationMessage For="() => SmtpForm.Port" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp User" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.User" Style="width: 100%" aria-label="Smtp User" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="smtp@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.User" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp Password" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="Smtp Password" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.Gmail:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                                            Your google account will need two-factor authentication setup to use this.
                                        </RadzenAlert>

                                        <a href="https://www.gmass.co/blog/gmail-smtp/">How to Setup</a>

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Gmail Account" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.User" Style="width: 100%" aria-label="Gmail Account" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="account@gmail.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.User" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Gmail App Password" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="Gmail API Key" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.SendGrid:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                                            You will need phone number verification to create a SendGrid account.
                                        </RadzenAlert>

                                        <p>Create an API Key and create a Sender Authentication/Identity to use this.</p>

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="SendGrid API Key" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="SendGrid API Key" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.FluxpointManaged:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            You will not be able to use custom email templates with this option to prevent abuse.
                                        </RadzenAlert>

                                        <RadzenLabel Text="Email API Key" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@ManagedEmailToken" Style="width: 100%" aria-label="Email API Key" AutoCompleteType="AutoCompleteType.Off"
                                        Disabled="@(SetupStep != SetupStepType.Smtp)" MaxLength="100" />
                                    }
                                    break;
                            }

                            @if (!string.IsNullOrEmpty(SmtpErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    @SmtpErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br />
                                <br />
                            }

                            @if (EmailType == ConfigEmailType.FluxpointManaged)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Smtp)" Click="@CheckSmtp" />
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Smtp)" ButtonType="ButtonType.Submit" />
                            }
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Instance)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Instance</RadzenText>

                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                            This will be publicly shown on the url
                        </RadzenAlert>

                        <EditForm Model="@InstanceForm" OnValidSubmit="@CheckInstance">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Instance Name" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.Name" Style="width: 100%" aria-label="Instance Name" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Instance)" Placeholder="My Dev Space" MaxLength="32" />
                            <ValidationMessage For="() => InstanceForm.Name" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Instance Description" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.Description" Style="width: 100%" aria-label="Instance Description" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Instance)" MaxLength="300" />
                            <ValidationMessage For="() => InstanceForm.Description" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Instance Public Domain" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.PublicDomain" Style="width: 100%" aria-label="Instance Public Domain" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Instance)" Placeholder="system.domain.com" MaxLength="32" />
                            <ValidationMessage For="() => InstanceForm.PublicDomain" style="color: var(--rz-danger);" />

                            <br />
                            <br />

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Instance)" ButtonType="ButtonType.Submit" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Team)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Team/Company</RadzenText>

                        <br />

                        <EditForm Model="@TeamForm" OnValidSubmit="@CheckTeam">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamNameInput" Style="width: 100%" aria-label="Team Name" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="My Team" MaxLength="32" />
                            <ValidationMessage For="() => TeamForm.Name" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamForm.VanityUrl" Style="width: 100%" aria-label="Vanity Url" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="myteam" MaxLength="100" />
                            <ValidationMessage For="() => TeamForm.VanityUrl" style="color: var(--rz-danger);" />
                            <br />
                            <br />

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Team)" ButtonType="ButtonType.Submit" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Admin)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Admin Account</RadzenText>

                        <br />

                        <EditForm Model="@AdminAccount" OnValidSubmit="@CheckAdmin">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Admin Username" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@AdminAccount.Username" Style="width: 100%" aria-label="Admin Username" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user" MaxLength="32" />
                            <ValidationMessage For="() => AdminAccount.Username" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Admin Email" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@AdminAccount.Email" Style="width: 100%" aria-label="Admin Email" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user@gmail.com" MaxLength="100" />
                            <ValidationMessage For="() => AdminAccount.Email" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />
                            <br />

                            <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                            <br />

                            <RadzenLabel Text="Admin Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="@AdminAccount.Password" Style="width: 100%" aria-label="Admin Password" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Admin)" maxlength="100" />
                            <ValidationMessage For="() => AdminAccount.Password" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="@AdminAccount.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" AutoCompleteType="AutoCompleteType.Off"
                            Disabled="@(SetupStep != SetupStepType.Admin)" maxlength="100" />
                            <ValidationMessage For="() => AdminAccount.RepeatPassword" style="color: var(--rz-danger);" />

                            @if (!string.IsNullOrEmpty(SentEmailCode))
                            {
                                <br />
                                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                                    An email code has been sent to your email address, enter the code then click Next again.
                                </RadzenAlert>

                                <RadzenLabel Text="Email Code" class="rz-my-0" Style="display: block;"></RadzenLabel>
                                <div>
                                    <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@InputEmailCode" Count="8" aria-label="Email Code" autofocus />
                                </div>

                            }

                            @if (!string.IsNullOrEmpty(AdminErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    @AdminErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br />
                                <br />
                            }

                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Admin)" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Confirm)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">@(SetupStep == SetupStepType.Confirm ? "Setup Done!" : "Waiting for Setup")</RadzenText>

                        @if (SetupStep == SetupStepType.Confirm)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Success" Shade="Shade.Dark" AllowClose="false">
                                Dev Space setup complete, you will need to restart this service/program.
                            </RadzenAlert>
                        }
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>
        </Items>
    </RadzenTimeline>
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }
    public InstanceBasicModel InstanceForm { get; set; }

    private ConfigEmailType _emailType { get; set; }
    public ConfigEmailType EmailType
    {
        get { return _emailType; }
        set
        {
            _emailType = value;
            switch (value)
            {
                case ConfigEmailType.Gmail:
                    SmtpForm.Host = "smtp.gmail.com";
                    SmtpForm.Port = 587;
                    break;
                case ConfigEmailType.SendGrid:
                    SmtpForm.Host = "smtp.sendgrid.net";
                    SmtpForm.Port = 587;
                    SmtpForm.User = "apikey";
                    break;
            }
        }
    }

    public SmtpModel SmtpForm { get; set; }
    public string ManagedEmailToken { get; set; }

    public string TeamNameInput { get { return TeamForm.Name; } set { TeamForm.Name = value; TeamForm.VanityUrl = Utils.FormatVanityUrl(TeamForm.Name); } }
    public TeamBasicModel TeamForm { get; set; } = new TeamBasicModel();

    public AccountRegisterModel AdminAccount = new AccountRegisterModel();
    public string AdminErrorMessage { get; set; }

    public SetupStepType SetupStep = SetupStepType.Smtp;

    protected override async Task OnInitializedAsync()
    {
        InstanceForm = new InstanceBasicModel
            {
                Name = _Data.Config.Instance.Name,
                Description = _Data.Config.Instance.Description,
                PublicDomain = Nav.BaseUri
            };

        SmtpForm = new SmtpModel
            {
                Host = _Data.Config.Email.SmtpHost,
                Port = _Data.Config.Email.SmtpPort,
                User = _Data.Config.Email.SmtpUser,
                Password = _Data.Config.Email.SmtpPassword,
                EmailAddress = _Data.Config.Email.SenderEmailAddress
            };
        EmailType = _Data.Config.Email.Type;
        if (_Data.Config.Email.SmtpPort != 0 || !string.IsNullOrEmpty(_Data.Config.Email.ManagedEmailToken))
            SetupStep = SetupStepType.Instance;

        if (_DB.Teams.Cache.Any())
            SetupStep = SetupStepType.Admin;

        if (_DB.Users.Any())
        {
            SetupStep = SetupStepType.Confirm;
            _Data.Config.IsFullySetup = true;
            _Data.Config.Save();
        }

    }


            @* try
            {
                await db.GetCollection<TestWrite>("TestWrite").InsertOneAsync(new()
                    {
                        Name = "Fluxpoint Development",
                    });
                await db.DropCollectionAsync("TestWrite");
            }
            catch (Exception ex)
            {
                DatabaseErrorMessage = "Database write error, " + ex.Message;
                IsDatabaseSetupRunning = false;
                SetupStep = SetupStepType.Database;
                return;
            } *@


    public string SmtpErrorMessage { get; set; }

    public async Task CheckSmtp()
    {
        SetupStep = SetupStepType.Disabled;
        SmtpErrorMessage = string.Empty;

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
            {
                SmtpErrorMessage = "Managed email token is empty";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            if (!ManagedEmailToken.StartsWith("DSE-"))
            {
                SmtpErrorMessage = "Managed email token is invalid";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            HttpRequestMessage Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/test");
            Message.Headers.Add("Authorization", ManagedEmailToken);

            HttpResponseMessage Res = await Program.Http.SendAsync(Message);
            if (!Res.IsSuccessStatusCode)
            {
                SmtpErrorMessage = "Failed to connect with status " + Res.StatusCode;
                SetupStep = SetupStepType.Smtp;
                return;
            }

            _Data.Config.Email.ManagedEmailToken = ManagedEmailToken;
        }
        else
        {
            if (SmtpForm.Port == 0)
            {
                SmtpErrorMessage = "Smtp port is required";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            using (SmtpClient Client = new SmtpClient())
            {
                try
                {
                    await Client.ConnectAsync(SmtpForm.Host, SmtpForm.Port);
                }
                catch (Exception ex)
                {
                    try
                    {
                        await Client.DisconnectAsync(true);
                    }
                    catch { }
                    SmtpErrorMessage = "Failed to connect with error " + ex.Message;
                    SetupStep = SetupStepType.Smtp;
                    return;
                }

                try
                {
                    await Client.AuthenticateAsync(SmtpForm.User, SmtpForm.Password);
                }
                catch (Exception ex)
                {
                    try
                    {
                        await Client.DisconnectAsync(true);
                    }
                    catch { }
                    SmtpErrorMessage = "Failed to authenticate with error " + ex.Message;
                    SetupStep = SetupStepType.Smtp;
                    return;
                }

                try
                {
                    await Client.DisconnectAsync(true);
                }
                catch { }
            }

            _Data.Config.Email.SmtpHost = SmtpForm.Host;
            _Data.Config.Email.SmtpPort = SmtpForm.Port;
            _Data.Config.Email.SmtpUser = SmtpForm.User;
            _Data.Config.Email.SmtpPassword = SmtpForm.Password;
            _Data.Config.Email.SenderEmailAddress = SmtpForm.EmailAddress;
            _Data.Config.Email.Type = EmailType;

        }
        _Data.Config.Save();

        SetupStep = SetupStepType.Instance;
    }

    public class TestWrite
    {
        public string Name;
    }

    public async Task CheckInstance()
    {
        _Data.Config.Instance.Name = InstanceForm.Name;
        _Data.Config.Instance.Description = InstanceForm.Description;
        _Data.Config.Instance.PublicDomain = InstanceForm.PublicDomain.Replace("https://", "", StringComparison.OrdinalIgnoreCase).Split('/').First();
        _Data.Config.Save();
        SetupStep = SetupStepType.Team;
    }

    public async Task CheckTeam()
    {
        SetupStep = SetupStepType.Disabled;
        TeamData Team = new TeamData
        {
            Name = TeamForm.Name,
            VanityUrl = Utils.FormatVanityUrl(TeamForm.VanityUrl)
        };
        await _DB.Teams.CreateAsync(Team);
        _DB.Teams.Cache.TryAdd(Team.Id, Team);
        VanityUrlData Vanity = new VanityUrlData
        {
            Id = Team.Id
        };
        await _DB.TeamVanityUrls.CreateAsync(Vanity);
        _Data.Config.Save();
        SetupStep = SetupStepType.Admin;
    }

    public string SentEmailAddress { get; set; }
    public string SentEmailCode { get; set; }
    public string InputEmailCode { get; set; }
    public async Task CheckAdmin()
    {
        SetupStep = SetupStepType.Disabled;
        AuthUser User = new AuthUser
            {
                UserName = AdminAccount.Username,
                Email = AdminAccount.Email,
                EmailConfirmed = true,
                IsInstanceAdmin = true
            };

        if (AdminAccount.Email != SentEmailAddress)
        {
            SentEmailAddress = AdminAccount.Email;
            SentEmailCode = Email.RandomCodeGenerator();
            Console.WriteLine(SentEmailCode);
            bool EmailSuccess = await Email.SendAccessCode(User, "Admin setup confirmation", SentEmailCode);
            if (!EmailSuccess)
            {
                SmtpErrorMessage = "Failed to send admin email, please update your smtp settings.";
                SetupStep = SetupStepType.Smtp;
                return;
            }
            SetupStep = SetupStepType.Admin;
            return;
        }

        if (!string.IsNullOrEmpty(InputEmailCode))
            InputEmailCode = InputEmailCode.Trim();

        if (InputEmailCode != SentEmailCode)
        {
            SetupStep = SetupStepType.Admin;
            return;
        }

        IdentityResult result = await UserManager.CreateAsync(User, AdminAccount.Password);

        if (result.Errors.Any())
        {
            AdminErrorMessage = result.Errors.First().Description;
            SetupStep = SetupStepType.Admin;
        }
        else
        {
            _DB.Users.Add(User.Id, new PartialUserData(User));
            _DB.Teams.Cache.First().Value.OwnerId = User.Id;
            TeamMemberData member = new TeamMemberData
                {
                    TeamId = _DB.Teams.Cache.First().Value.Id,
                    UserId = User.Id
                };
            
            await _DB.Members.CreateAsync(member);
            await _DB.Teams.Cache.First().Value.UpdateAsync(new UpdateDefinitionBuilder<TeamData>()
                .Set(x => x.OwnerId, User.Id)
                .Set(x => x.Members, _DB.Teams.Cache.First().Value.Members), () =>
                {
                    
                    _DB.Teams.Cache.First().Value.Members.Add(User.Id, member.Id);
                });

            _Data.Config.IsFullySetup = true;
            _Data.Config.Save();
            SetupStep = SetupStepType.Confirm;
        }
    }

    public PointStyle GetStepColor(SetupStepType compare)
    {
        if (SetupStep == SetupStepType.Disabled)
            return PointStyle.Dark;

        switch (compare)
        {
            case SetupStepType.Smtp:
                {
                    if (SetupStep == SetupStepType.Smtp)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Smtp)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Instance:
                {
                    if (SetupStep == SetupStepType.Instance)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Instance)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Team:
                {
                    if (SetupStep == SetupStepType.Team)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Team)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Admin:
                {
                    if (SetupStep == SetupStepType.Admin)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Admin)
                        return PointStyle.Success;
                }
                break;

            case SetupStepType.Confirm:
                {
                    if (SetupStep == SetupStepType.Confirm)
                        return PointStyle.Success;
                }
                break;
        }
        return PointStyle.Dark;
    }

    public enum SetupStepType
    {
        Disabled, Smtp, Instance, Team, Admin, Confirm
    }
}
