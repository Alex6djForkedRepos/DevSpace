@using CliWrap
@using CliWrap.Buffered
@using DevSpaceWeb.Database
@using DevSpaceWeb.Models
@using MailKit.Net.Smtp
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using MimeKit
@using MongoDB.Bson
@using MongoDB.Driver
@inject UserManager<AuthUser> UserManager
@inject SignInManager<AuthUser> SignInManager
@inject EmailService Email
@inject NavigationManager Nav

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:database"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Dev Space Setup</RadzenText>
    </div>
    <br />
    <RadzenTimeline LinePosition="LinePosition.Left">
        <Items>
            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Database)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Database</RadzenText>

                        <br />

                        <RadzenLabel Text="Database Type" class="rz-my-0"></RadzenLabel>
                        <RadzenSelectBar TValue="bool" @bind-Value="@IsDatabaseAutomatic" Style="width: 100%" Disabled="@(SetupStep != SetupStepType.Database || MongoDBDetected)">
                            <Items>
                                <RadzenSelectBarItem Value="true" Text="Automatic" />
                                <RadzenSelectBarItem Value="false" Text="Manual" />
                            </Items>
                        </RadzenSelectBar>

                        @if (IsDatabaseAutomatic)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                                Click Next to begin the automatic setup, this will install MongoDB on your server and setup the database with authentication.
                            </RadzenAlert>

                            @if (IsDatabaseSetupRunning)
                            {
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                                <br />
                                <br />
                            }

                            @if (!string.IsNullOrEmpty(DatabaseErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    @DatabaseErrorMessage
                                </RadzenAlert>
                            }

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Database)" Click="@CheckDatabase" />
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(DatabaseErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    @DatabaseErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br style="margin-bottom: 20px;" />
                            }

                            <EditForm Model="@DatabaseForm" OnValidSubmit="@CheckDatabase">
                                <DataAnnotationsValidator />

                                <RadzenLabel Text="Database Name" class="rz-my-0"></RadzenLabel>
                                <RadzenTextBox @bind-Value="@DatabaseForm.Name" Style="width: 100%" aria-label="Database Name" autocomplete="off"
                                               Disabled="@(SetupStep != SetupStepType.Database)" MaxLength="100" />
                                <ValidationMessage For="() => DatabaseForm.Name" style="color: var(--rz-danger);" />

                                <br style="margin-bottom: 20px;" />

                                <RadzenLabel Text="Database IP" class="rz-my-0"></RadzenLabel>
                                <RadzenTextBox @bind-Value="@DatabaseForm.IP" Style="width: 100%" aria-label="Database IP" autocomplete="off"
                                               Disabled="@(SetupStep != SetupStepType.Database)" Placeholder="1.1.1.1" MaxLength="100" />
                                <ValidationMessage For="() => DatabaseForm.IP" style="color: var(--rz-danger);" />

                                <br style="margin-bottom: 20px;" />

                                <RadzenLabel Text="Database Port" class="rz-my-0"></RadzenLabel>
                                <RadzenNumeric @bind-Value="@DatabaseForm.Port" Style="width: 100%" aria-label="Database Port" autocomplete="off"
                                               Disabled="@(SetupStep != SetupStepType.Database)" Placeholder="0000" ShowUpDown="false" />
                                <ValidationMessage For="() => DatabaseForm.Port" style="color: var(--rz-danger);" />

                                <br style="margin-bottom: 20px;" />

                                <RadzenLabel Text="Database Username" class="rz-my-0"></RadzenLabel>
                                <RadzenTextBox @bind-Value="@DatabaseForm.Username" Style="width: 100%" aria-label="Database Username" autocomplete="off"
                                               Disabled="@(SetupStep != SetupStepType.Database)" MaxLength="100" />
                                <ValidationMessage For="() => DatabaseForm.Username" style="color: var(--rz-danger);" />

                                <br style="margin-bottom: 20px;" />

                                <RadzenLabel Text="Database Password" class="rz-my-0"></RadzenLabel>
                                <RadzenPassword @bind-Value="@DatabaseForm.Password" Style="width: 100%" aria-label="Database Password" autocomplete="off"
                                                Disabled="@(SetupStep != SetupStepType.Database)" maxlength="100" />
                                <ValidationMessage For="() => DatabaseForm.Password" style="color: var(--rz-danger);" />

                                <br />
                                <br />

                                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Database)" ButtonType="ButtonType.Submit" />
                            </EditForm>
                        }

                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Smtp)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Smtp/Email</RadzenText>

                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            You need to setup an email provider (smtp service) for account registration and security.
                        </RadzenAlert>

                        <RadzenLabel Text="Email Type" class="rz-my-0"></RadzenLabel>
                        <RadzenSelectBar TValue="ConfigEmailType" @bind-Value="@EmailType" Style="width: 100%" Disabled="@(SetupStep != SetupStepType.Smtp)">
                            <Items>
                                <RadzenSelectBarItem Value="@ConfigEmailType.FluxpointManaged" Text="Fluxpoint Managed" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.Gmail" Text="Gmail" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.SendGrid" Text="SendGrid" />
                                <RadzenSelectBarItem Value="@ConfigEmailType.Custom" Text="Custom" />
                            </Items>
                        </RadzenSelectBar>

                        <br style="margin-bottom: 20px;" />

                        <EditForm Model="@SmtpForm" OnValidSubmit="@CheckSmtp">
                            <DataAnnotationsValidator />

                            @switch (EmailType)
                            {
                                case ConfigEmailType.Custom:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                            You will not be able to use custom email templates with this option to prevent abuse.
                                        </RadzenAlert>

                                        <RadzenLabel Text="Smtp Host" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.Host" Style="width: 100%" aria-label="Smtp Host" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="smtp.domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.Host" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp Port" class="rz-my-0"></RadzenLabel>
                                        <RadzenNumeric @bind-Value="@SmtpForm.Port" Style="width: 100%" aria-label="Smtp Port" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="123" ShowUpDown="false" />
                                        <ValidationMessage For="() => SmtpForm.Port" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp User" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.User" Style="width: 100%" aria-label="Smtp User" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="smtp@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.User" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Smtp Password" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="Smtp Password" autocomplete="off"
                                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.Gmail:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                                            Your google account will need two-factor authentication setup to use this.
                                        </RadzenAlert>

                                        <a href="https://www.gmass.co/blog/gmail-smtp/">How to Setup</a>

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Gmail Account" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.User" Style="width: 100%" aria-label="Gmail Account" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="account@gmail.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.User" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Gmail App Password" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="Gmail API Key" autocomplete="off"
                                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" MaxLength="100" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.SendGrid:
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                                            You will need phone number verification to create a SendGrid account.
                                        </RadzenAlert>

                                        <p>Create an API Key and create a Sender Authentication/Identity to use this.</p>

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="SendGrid API Key" class="rz-my-0"></RadzenLabel>
                                        <RadzenPassword @bind-Value="@SmtpForm.Password" Style="width: 100%" aria-label="SendGrid API Key" autocomplete="off"
                                                        Disabled="@(SetupStep != SetupStepType.Smtp)" maxlength="100" />
                                        <ValidationMessage For="() => SmtpForm.Password" style="color: var(--rz-danger);" />

                                        <br style="margin-bottom: 20px;" />

                                        <RadzenLabel Text="Sender Email Address" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@SmtpForm.EmailAddress" Style="width: 100%" aria-label="Email Address" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" Placeholder="devspace@domain.com" />
                                        <ValidationMessage For="() => SmtpForm.EmailAddress" style="color: var(--rz-danger);" />
                                    }
                                    break;
                                case ConfigEmailType.FluxpointManaged:
                                    {
                                        <RadzenLabel Text="Email API Key" class="rz-my-0"></RadzenLabel>
                                        <RadzenTextBox @bind-Value="@ManagedEmailToken" Style="width: 100%" aria-label="Email API Key" autocomplete="off"
                                                       Disabled="@(SetupStep != SetupStepType.Smtp)" MaxLength="100" />
                                    }
                                    break;
                            }

                            @if (!string.IsNullOrEmpty(SmtpErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    @SmtpErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br />
                                <br />
                            }

                            @if (EmailType == ConfigEmailType.FluxpointManaged)
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Smtp)" Click="@CheckSmtp" />
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Smtp)" ButtonType="ButtonType.Submit" />
                            }
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Instance)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Instance</RadzenText>

                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            This will be publicly shown on the url
                        </RadzenAlert>

                        <EditForm Model="@InstanceForm" OnValidSubmit="@CheckInstance">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Instance Name" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.Name" Style="width: 100%" aria-label="Instance Name" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Instance)" Placeholder="My Dev Space" MaxLength="32" />
                            <ValidationMessage For="() => InstanceForm.Name" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Instance Description" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.Description" Style="width: 100%" aria-label="Instance Description" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Instance)" MaxLength="300" />
                            <ValidationMessage For="() => InstanceForm.Description" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Instance Public Domain" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@InstanceForm.PublicDomain" Style="width: 100%" aria-label="Instance Public Domain" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Instance)" Placeholder="system.domain.com" MaxLength="32" />
                            <ValidationMessage For="() => InstanceForm.PublicDomain" style="color: var(--rz-danger);" />

                            <br />
                            <br />

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Instance)" ButtonType="ButtonType.Submit" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Team)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Team/Company</RadzenText>

                        <br />

                        <EditForm Model="@TeamForm" OnValidSubmit="@CheckTeam">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamNameInput" Style="width: 100%" aria-label="Team Name" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="My Team" MaxLength="32" />
                            <ValidationMessage For="() => TeamForm.Name" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@TeamForm.VanityUrl" Style="width: 100%" aria-label="Vanity Url" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="myteam" MaxLength="100" />
                            <ValidationMessage For="() => TeamForm.VanityUrl" style="color: var(--rz-danger);" />
                            <br />
                            <br />

                            <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Team)" ButtonType="ButtonType.Submit" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Admin)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Admin Account</RadzenText>

                        <br />

                        <EditForm Model="@AdminAccount" OnValidSubmit="@CheckAdmin">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Admin Username" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@AdminAccount.Username" Style="width: 100%" aria-label="Admin Username" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user" MaxLength="32" />
                            <ValidationMessage For="() => AdminAccount.Username" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Admin Email" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="@AdminAccount.Email" Style="width: 100%" aria-label="Admin Email" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user@gmail.com" MaxLength="100" />
                            <ValidationMessage For="() => AdminAccount.Email" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />
                            <br />

                            <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                            <br />

                            <RadzenLabel Text="Admin Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="@AdminAccount.Password" Style="width: 100%" aria-label="Admin Password" autocomplete="off"
                                            Disabled="@(SetupStep != SetupStepType.Admin)" maxlength="100" />
                            <ValidationMessage For="() => AdminAccount.Password" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="@AdminAccount.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" autocomplete="off"
                                            Disabled="@(SetupStep != SetupStepType.Admin)" maxlength="100" />
                            <ValidationMessage For="() => AdminAccount.RepeatPassword" style="color: var(--rz-danger);" />

                            @if (!string.IsNullOrEmpty(SentEmailCode))
                            {
                                <br />
                                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                                    An email code has been sent to your email address, enter the code then click Next again.
                                </RadzenAlert>

                                <RadzenLabel Text="Email Code" class="rz-my-0" Style="display: block;"></RadzenLabel>
                                <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@InputEmailCode" Count="6" aria-label="Email Code" autofocus />
                            }

                            @if (!string.IsNullOrEmpty(AdminErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    @AdminErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br />
                            }

                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Admin)" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Confirm)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">@(SetupStep == SetupStepType.Confirm ? "Setup Done!" : "Waiting for Setup")</RadzenText>

                        @if (SetupStep == SetupStepType.Confirm)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Success" Shade="Shade.Dark" AllowClose=false>
                                You can now start using this Instance, use the sidebar to view your created team.
                            </RadzenAlert>
                            @if (IsDatabaseAutomatic)
                            {
                                <br />
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    Your database root password has been saved to /Data
                                </RadzenAlert>
                            }
                        }
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>
        </Items>
    </RadzenTimeline>
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public bool MongoDBDetected { get; set; }

    public InstanceBasicModel InstanceForm { get; set; }
    public DatabaseSetupModel DatabaseForm { get; set; }
    public bool IsDatabaseAutomatic { get; set; } = true;
    public bool IsDatabaseSetupRunning { get; set; }
    public string DatabaseErrorMessage { get; set; }

    private ConfigEmailType _emailType { get; set; }
    public ConfigEmailType EmailType
    {
        get { return _emailType; }
        set
        {
            _emailType = value;
            switch (value)
            {
                case ConfigEmailType.Gmail:
                    SmtpForm.Host = "smtp.gmail.com";
                    SmtpForm.Port = 587;
                    break;
                case ConfigEmailType.SendGrid:
                    SmtpForm.Host = "smtp.sendgrid.net";
                    SmtpForm.Port = 587;
                    SmtpForm.User = "apikey";
                    break;
            }
        }
    }

    public SmtpModel SmtpForm { get; set; }
    public string ManagedEmailToken { get; set; }

    public string TeamNameInput { get { return TeamForm.Name; } set { TeamForm.Name = value; TeamForm.VanityUrl = TeamForm.Name.Replace(" ", "-").ToLower(); } }
    public TeamBasicModel TeamForm { get; set; } = new TeamBasicModel();

    public AccountRegisterModel AdminAccount = new AccountRegisterModel();
    public string AdminErrorMessage { get; set; }

    public SetupStepType SetupStep = SetupStepType.Database;

    protected override async Task OnInitializedAsync()
    {
        InstanceForm = new InstanceBasicModel
            {
                Name = _Data.Config.Instance.Name,
                Description = _Data.Config.Instance.Description,
                PublicDomain = Nav.BaseUri
            };

        DatabaseForm = new DatabaseSetupModel
            {
                Name = _Data.Config.Database.Name,
                IP = _Data.Config.Database.IP,
                Port = _Data.Config.Database.Port,
                Username = _Data.Config.Database.Username,
                Password = _Data.Config.Database.Password
            };

        SmtpForm = new SmtpModel
            {
                Host = _Data.Config.Email.SmtpHost,
                Port = _Data.Config.Email.SmtpPort,
                User = _Data.Config.Email.SmtpUser,
                Password = _Data.Config.Email.SmtpPassword,
                EmailAddress = _Data.Config.Email.SenderEmailAddress
            };

        if (_Data.Config.Database.IsSetup)
            SetupStep = SetupStepType.Smtp;

        if (_Data.Config.Email.SmtpPort != 0 || !string.IsNullOrEmpty(_Data.Config.Email.ManagedEmailToken))
            SetupStep = SetupStepType.Instance;

        // Check if mongodb has already been setup with auth
        if (File.Exists("/etc/mongod.conf"))
        {
            string MongodConfig = File.ReadAllText("/etc/mongod.conf");
            if (!MongodConfig.Contains("#security:"))
            {
                DatabaseErrorMessage = "MongoDB is already installed on this server, manual setup is required!";
                IsDatabaseAutomatic = false;
                MongoDBDetected = true;
            }
        }
    }


    public async Task CheckDatabase()
    {
        SetupStep = SetupStepType.Disabled;
        if (IsDatabaseAutomatic)
        {
            IsDatabaseSetupRunning = true;
            if (!File.Exists("/etc/mongod.conf"))
            {
                var InstallDB = await DatabaseSetupFunction.Run();
                if (InstallDB != DatabaseSetupErrorType.Success)
                {
                    DatabaseErrorMessage = "Database install error, " + InstallDB.ToString();
                    IsDatabaseSetupRunning = false;
                    SetupStep = SetupStepType.Database;
                    return;
                }
            }
            else
            {
                string MongodConfigCheck = File.ReadAllText("/etc/mongod.conf");
                if (!MongodConfigCheck.Contains("#security:"))
                {
                    DatabaseErrorMessage = "MongoDB is already installed on this server, manual setup is required!";
                    IsDatabaseAutomatic = true;
                    MongoDBDetected = true;
                    SetupStep = SetupStepType.Database;
                    return;
                }
            }

            string RootPass = "";

            // Create root user and password if dosen't exist
            if (!File.Exists(Program.Directory.Data.Path + "root.txt"))
            {
                RootPass = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", "");

                string CreateRoot2 = "--eval \"db.getSiblingDB('admin').createUser({ user: 'root', pwd: '" + RootPass + "', roles: [ 'root' ] });\"";
                var cmd2 = Cli.Wrap("mongosh").WithArguments(CreateRoot2);

                var res2 = await cmd2.ExecuteBufferedAsync();
                if (!res2.IsSuccess)
                {
                    DatabaseErrorMessage = "Setup root error, " + res2.StandardError;
                    IsDatabaseSetupRunning = false;
                    SetupStep = SetupStepType.Database;
                    return;
                }

                File.WriteAllText(Program.Directory.Data.Path + "root.txt", RootPass);
            }
            else
                RootPass = File.ReadAllText(Program.Directory.Data.Path + "root.txt");



            // Create devspace user and pass if dosen't exists
            if (string.IsNullOrEmpty(_Data.Config.Database.Password))
            {
                string DevSpacePass = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", "");

                var CreateUser = $"-u 'root' -p '{RootPass}' " + "--eval \"db.getSiblingDB('admin').createUser({ user: '" + _Data.Config.Database.Username + "', pwd: '" + DevSpacePass + "', roles: [ { role: 'dbAdmin', db: '" + _Data.Config.Database.Name + "' }, { role: 'readWrite', db: '" + _Data.Config.Database.Name + "' } ] });\"";
                var UserCmd = Cli.Wrap("mongosh").WithArguments(CreateUser);

                var UserRes = await UserCmd.ExecuteBufferedAsync();
                if (!UserRes.IsSuccess)
                {
                    DatabaseErrorMessage = "Setup user error, " + UserRes.StandardError;
                    IsDatabaseSetupRunning = false;
                    SetupStep = SetupStepType.Database;
                    return;
                }
                _Data.Config.Database.Password = DevSpacePass;
                _Data.Config.Save();
            }

            string MongodConfig = File.ReadAllText("/etc/mongod.conf");
            MongodConfig = MongodConfig.Replace("#security:", "security:\n  authorization: enabled\n  javascriptEnabled: false");
            File.WriteAllText("/etc/mongod.conf", MongodConfig);

            var cmd = Cli.Wrap("sudo").WithArguments("systemctl restart mongod");

            var res = await cmd.ExecuteBufferedAsync();
            if (!res.IsSuccess)
            {
                DatabaseErrorMessage = "Setup config error, " + res.StandardError;
                IsDatabaseSetupRunning = false;
                SetupStep = SetupStepType.Database;
                return;
            }

            string Connect = $"mongodb://{_Data.Config.Database.Username}:{_Data.Config.Database.Password}@{_Data.Config.Database.IP}:{_Data.Config.Database.Port}";

            var client = new MongoClient(Connect);

            try
            {
                var result = client.GetDatabase(_Data.Config.Database.Name).RunCommand<BsonDocument>(new BsonDocument("ping", 1));
                Console.WriteLine("Pinged your deployment. You successfully connected to MongoDB!");
            }
            catch (Exception ex)
            {
                DatabaseErrorMessage = "Connection error, " + ex.Message;
                IsDatabaseSetupRunning = false;
                SetupStep = SetupStepType.Database;
                return;
            }

            var db = client.GetDatabase(_Data.Config.Database.Name);

            try
            {
                await db.GetCollection<TestWrite>("TestWrite").InsertOneAsync(new()
                    {
                        Name = "Fluxpoint Development",
                    });
                await db.DropCollectionAsync("TestWrite");
            }
            catch (Exception ex)
            {
                DatabaseErrorMessage = "Database write error, " + ex.Message;
                IsDatabaseSetupRunning = false;
                SetupStep = SetupStepType.Database;
                return;
            }

            _DB.Client = client;
            _DB.IsConnected = true;

            _Data.Config.Database.IsSetup = true;
            _Data.Config.Save();
        }
        else
        {
            string Connect = $"mongodb://{DatabaseForm.Username}:{DatabaseForm.Password}@{DatabaseForm.IP}:{DatabaseForm.Port}";
            var client = new MongoClient(Connect);

            try
            {
                var result = client.GetDatabase(DatabaseForm.Name).RunCommand<BsonDocument>(new BsonDocument("ping", 1));
                Console.WriteLine("Pinged your deployment. You successfully connected to MongoDB!");
            }
            catch (Exception ex)
            {
                DatabaseErrorMessage = "Database connection error, " + ex.Message;
                SetupStep = SetupStepType.Database;
                return;
            }

            var db = client.GetDatabase(DatabaseForm.Name);

            try
            {
                await db.GetCollection<TestWrite>("TestWrite").InsertOneAsync(new()
                    {
                        Name = "Fluxpoint Development",
                    });
                db.DropCollection("TestWrite");
            }
            catch (Exception ex)
            {
                DatabaseErrorMessage = "Database write error, " + ex.Message;
                SetupStep = SetupStepType.Database;
                return;
            }

            _DB.Client = client;
            _DB.IsConnected = true;

            _Data.Config.Database = new ConfigDatabase
                {
                    IsSetup = true,
                    IP = DatabaseForm.IP,
                    Name = DatabaseForm.Name,
                    Port = DatabaseForm.Port,
                    Password = DatabaseForm.Password,
                    Username = DatabaseForm.Username
                };
            _Data.Config.Save();
        }

        SetupStep = SetupStepType.Instance;
    }

    public string SmtpErrorMessage { get; set; }

    public async Task CheckSmtp()
    {
        SetupStep = SetupStepType.Disabled;
        SmtpErrorMessage = string.Empty;

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
            {
                SmtpErrorMessage = "Managed email token is empty";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            if (!ManagedEmailToken.StartsWith("DSE-"))
            {
                SmtpErrorMessage = "Managed email token is invalid";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            var Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/test");
            Message.Headers.Add("Authorization", ManagedEmailToken);

            var Res = await Program.Http.SendAsync(Message);
            if (!Res.IsSuccessStatusCode)
            {
                SmtpErrorMessage = "Failed to connect with status " + Res.StatusCode;
                SetupStep = SetupStepType.Smtp;
                return;
            }

            _Data.Config.Email.Type = EmailType;
            _Data.Config.Email.ManagedEmailToken = ManagedEmailToken;
        }
        else
        {
            if (SmtpForm.Port == 0)
            {
                SmtpErrorMessage = "Smtp port is required";
                SetupStep = SetupStepType.Smtp;
                return;
            }

            using (var Client = new SmtpClient())
            {
                try
                {
                    await Client.ConnectAsync(SmtpForm.Host, SmtpForm.Port);
                }
                catch (Exception ex)
                {
                    try
                    {
                        await Client.DisconnectAsync(true);
                    }
                    catch { }
                    SmtpErrorMessage = "Failed to connect with error " + ex.Message;
                    SetupStep = SetupStepType.Smtp;
                    return;
                }

                try
                {
                    await Client.AuthenticateAsync(SmtpForm.User, SmtpForm.Password);
                }
                catch (Exception ex)
                {
                    try
                    {
                        await Client.DisconnectAsync(true);
                    }
                    catch { }
                    SmtpErrorMessage = "Failed to authenticate with error " + ex.Message;
                    SetupStep = SetupStepType.Smtp;
                    return;
                }

                try
                {
                    await Client.DisconnectAsync(true);
                }
                catch { }
            }

            _Data.Config.Email.SmtpHost = SmtpForm.Host;
            _Data.Config.Email.SmtpPort = SmtpForm.Port;
            _Data.Config.Email.SmtpUser = SmtpForm.User;
            _Data.Config.Email.SmtpPassword = SmtpForm.Password;
            _Data.Config.Email.SenderEmailAddress = SmtpForm.EmailAddress;

        }
        _Data.Config.Save();

        SetupStep = SetupStepType.Instance;
    }

    public class TestWrite
    {
        public string Name;
    }

    public async Task CheckInstance()
    {
        _Data.Config.Instance.Name = InstanceForm.Name;
        _Data.Config.Instance.Description = InstanceForm.Description;
        _Data.Config.Instance.PublicDomain = InstanceForm.PublicDomain.Replace("https://", "", StringComparison.OrdinalIgnoreCase);
        _Data.Config.Save();
        SetupStep = SetupStepType.Team;
    }

    public async Task CheckTeam()
    {
        if (!string.IsNullOrEmpty(TeamForm.VanityUrl))
        {
            TeamForm.VanityUrl = TeamForm.VanityUrl.Replace(" ", "-").ToLower();
        }

        SetupStep = SetupStepType.Disabled;
        TeamData Team = new TeamData
            {
                Name = TeamForm.Name,
                VanityUrl = TeamForm.VanityUrl
            };
        await _DB.Teams.CreateAsync(Team);
        _DB.Teams.Cache.TryAdd(Team.Id.ToString(), Team);

        _Data.Config.IsFullySetup = true;
        _Data.Config.Save();
        SetupStep = SetupStepType.Admin;
    }

    public string SentEmailAddress { get; set; }
    public string SentEmailCode { get; set; }
    public string InputEmailCode { get; set; }
    public async Task CheckAdmin()
    {
        SetupStep = SetupStepType.Disabled;
        var User = new AuthUser
            {
                UserName = AdminAccount.Username,
                Email = AdminAccount.Email,
                EmailConfirmed = true,
                IsInstanceAdmin = true
            };

        if (AdminAccount.Email != SentEmailAddress)
        {
            SentEmailAddress = AdminAccount.Email;
            SentEmailCode = Email.RandomCodeGenerator(longCode: false);
            var EmailSuccess = await Email.SendAccessCode(User, "Admin setup confirmation", SentEmailCode);
            if (!EmailSuccess)
            {
                SmtpErrorMessage = "Failed to send admin email, please update your smtp settings.";
                SetupStep = SetupStepType.Smtp;
                return;
            }
            SetupStep = SetupStepType.Admin;
            return;
        }

        if (InputEmailCode != SentEmailCode)
        {
            SetupStep = SetupStepType.Admin;
            return;
        }


        User.Auth.Sessions.TryAdd(Utils.GetStringSha256Hash(Session.Ip), new AuthUserSession { });
        var result = await UserManager.CreateAsync(User, AdminAccount.Password);

        if (result.Errors.Any())
        {
            AdminErrorMessage = result.Errors.First().Description;
            SetupStep = SetupStepType.Admin;
        }
        else
        {
            SetupStep = SetupStepType.Confirm;
        }
    }

    public PointStyle GetStepColor(SetupStepType compare)
    {
        if (SetupStep == SetupStepType.Disabled)
            return PointStyle.Dark;

        switch (compare)
        {
            case SetupStepType.Database:
                {
                    if (SetupStep == SetupStepType.Database)
                        return PointStyle.Info;
                    else
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Smtp:
                {
                    if (SetupStep == SetupStepType.Smtp)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Smtp)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Instance:
                {
                    if (SetupStep == SetupStepType.Instance)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Instance)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Team:
                {
                    if (SetupStep == SetupStepType.Team)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Team)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Admin:
                {
                    if (SetupStep == SetupStepType.Admin)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Admin)
                        return PointStyle.Success;
                }
                break;

            case SetupStepType.Confirm:
                {
                    if (SetupStep == SetupStepType.Confirm)
                        return PointStyle.Success;
                }
                break;
        }
        return PointStyle.Dark;
    }

    public enum SetupStepType
    {
        Disabled, Database, Smtp, Instance, Team, Admin, Confirm
    }
}
