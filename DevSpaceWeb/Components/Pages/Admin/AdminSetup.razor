@using CliWrap
@using CliWrap.Buffered
@using DevSpaceWeb.Database
@using DevSpaceWeb.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using MongoDB.Bson
@using MongoDB.Driver
@inject UserManager<AuthUser> UserManager
@inject SignInManager<AuthUser> SignInManager

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:database"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Database</RadzenText>
    </div>
    <br />
    <RadzenTimeline LinePosition="LinePosition.Left">
        <Items>
            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Database)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Database</RadzenText>

                        <br />

                        <RadzenLabel Text="Database Name" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="DatabaseName" Style="width: 100%" aria-label="Database Name" autocomplete="off"
                                       Disabled="@(SetupStep != SetupStepType.Database)" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenLabel Text="Database Type" class="rz-my-0"></RadzenLabel>
                        <RadzenSelectBar TValue="string" @bind-Value="@DatabaseType" Style="width: 100%" Disabled="@(SetupStep != SetupStepType.Database)">
                            <Items>
                                <RadzenSelectBarItem Value="@("Automatic")" Text="Automatic" />
                                <RadzenSelectBarItem Value="@("Manual")" Text="Manual" />
                            </Items>
                        </RadzenSelectBar>

                        @if (MongoDBDetected)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                MongoDB is already installed on this server, manual setup is required!
                            </RadzenAlert>
                        }
                        @if (DatabaseType == "Manual")
                        {
                            <RadzenLabel Text="Database IP" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="DatabaseIP" Style="width: 100%" aria-label="Database IP" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Database)" Placeholder="1.1.1.1" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Database Port" class="rz-my-0"></RadzenLabel>
                            <RadzenNumeric @bind-Value="DatabasePort" Style="width: 100%" aria-label="Database Port" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Database)" Placeholder="0000" ShowUpDown="false" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Database Username" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="DatabaseUsername" Style="width: 100%" aria-label="Database Username" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Database)" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Database Password" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="DatabasePassword" Style="width: 100%" aria-label="Database Password" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Database)" />
                        }
                        <br />
                        <br />

                        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Database)" Click="@CheckDatabase" />
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Instance)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Instance</RadzenText>

                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            This will be publicly shown on the url
                        </RadzenAlert>

                        <RadzenLabel Text="Instance Name" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="InstanceName" Style="width: 100%" aria-label="Instance Name" autocomplete="off"
                                       Disabled="@(SetupStep != SetupStepType.Instance)" Placeholder="My Team Dev Space" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenLabel Text="Instance Description" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="InstanceDesc" Style="width: 100%" aria-label="Instance Description" autocomplete="off"
                                       Disabled="@(SetupStep != SetupStepType.Instance)" />

                        <br />
                        <br />

                        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Instance)" Click="@CheckInstance" />
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Team)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Team/Company</RadzenText>

                        <br />

                        <RadzenLabel Text="Team Name" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="TeamNameInput" Style="width: 100%" aria-label="Team Name" autocomplete="off"
                                       Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="My Team" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenLabel Text="Vanity Url" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="TeamVanityUrl" Style="width: 100%" aria-label="Vanity Url" autocomplete="off"
                                       Disabled="@(SetupStep != SetupStepType.Team)" Placeholder="myteam" />

                        <br />
                        <br />

                        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Team)" Click="@CheckTeam" />
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Admin)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">Admin Account</RadzenText>

                        <br />

                        <EditForm Model="AdminAccount" OnValidSubmit="CheckAdmin">
                            <DataAnnotationsValidator />

                            <RadzenLabel Text="Admin Username" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="AdminAccount.Username" Style="width: 100%" aria-label="Admin Username" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user" />
                            <ValidationMessage For="() => AdminAccount.Username" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Admin Email" class="rz-my-0"></RadzenLabel>
                            <RadzenTextBox @bind-Value="AdminAccount.Email" Style="width: 100%" aria-label="Admin Email" autocomplete="off"
                                           Disabled="@(SetupStep != SetupStepType.Admin)" Placeholder="user@gmail.com" />
                            <ValidationMessage For="() => AdminAccount.Email" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />
                            <br />

                            <RadzenText TextStyle="TextStyle.Body2">Password require 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                            <br />

                            <RadzenLabel Text="Admin Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="AdminAccount.Password" Style="width: 100%" aria-label="Admin Password" autocomplete="off"
                                            Disabled="@(SetupStep != SetupStepType.Admin)" />
                            <ValidationMessage For="() => AdminAccount.Password" style="color: var(--rz-danger);" />

                            <br style="margin-bottom: 20px;" />

                            <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
                            <RadzenPassword @bind-Value="@AdminAccount.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" autocomplete="off"
                                            Disabled="@(SetupStep != SetupStepType.Admin)" />
                            <ValidationMessage For="() => AdminAccount.RepeatPassword" style="color: var(--rz-danger);" />

                            <br />

                            @if (!string.IsNullOrEmpty(AdminErrorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose=false>
                                    @AdminErrorMessage
                                </RadzenAlert>
                            }
                            else
                            {
                                <br />
                            }

                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Next" Disabled="@(SetupStep != SetupStepType.Admin)" />
                        </EditForm>
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>

            <RadzenTimelineItem PointStyle="@GetStepColor(SetupStepType.Confirm)">
                <ChildContent>
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle1">@(SetupStep == SetupStepType.Confirm ? "Setup Done!" : "Waiting for Setup")</RadzenText>

                        @if (SetupStep == SetupStepType.Confirm)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Success" Shade="Shade.Dark" AllowClose=false>
                                You can now start using this Instance, use the sidebar to view your created team.
                            </RadzenAlert>
                            @if (DatabaseType == "Automatic")
                            {
                                <br />
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false>
                                    Your database root password has been saved to /Data
                                </RadzenAlert>
                            }
                        }
                    </RadzenCard>
                </ChildContent>
            </RadzenTimelineItem>
        </Items>
    </RadzenTimeline>
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public bool MongoDBDetected { get; set; }

    public string InstanceName { get; set; }
    public string InstanceDesc { get; set; }

    public string DatabaseType { get; set; } = "Automatic";
    public string DatabaseName { get; set; }
    public string DatabaseIP { get; set; }
    public int DatabasePort { get; set; }
    public string DatabaseUsername { get; set; }
    public string DatabasePassword { get; set; }

    public string TeamName { get; set; }
    public string TeamVanityUrl { get; set; }

    public AccountRegisterModel AdminAccount = new AccountRegisterModel();
    public string AdminErrorMessage { get; set; }

    public SetupStepType SetupStep = SetupStepType.Database;

    public string TeamNameInput { get { return TeamName; } set { TeamName = value; TeamVanityUrl = TeamName.Replace(" ", "-").ToLower(); } }

    protected override async Task OnInitializedAsync()
    {
        InstanceName = _Data.Config.Instance.Name;
        InstanceDesc = _Data.Config.Instance.Description;
        DatabaseName = _Data.Config.Database.Name;
        DatabaseIP = _Data.Config.Database.IP;
        DatabasePort = _Data.Config.Database.Port;
        if (_Data.Config.Database.IsSetup)
            SetupStep = SetupStepType.Admin;

        if (File.Exists("/etc/mongod.conf"))
        {
            DatabaseType = "Manual";
            MongoDBDetected = true;
        }
    }


    public async Task CheckDatabase()
    {
        SetupStep = SetupStepType.Disabled;
        if (DatabaseType == "Automatic")
        {
            string RootUsername = _Data.Config.Database.RootUsername;
            string RootPass = _Data.Config.Database.RootPassword;
            string AutoPassword = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", "");

            if (string.IsNullOrEmpty(RootPass))
            {
                RootPass = _Data.GetRandomString(new Random().Next(26, 34)) + Guid.NewGuid().ToString().Replace("-", "");

                string CreateRoot2 = "--eval \"db.getSiblingDB('admin').createUser({ user: '" + RootUsername + "', pwd: '" + RootPass + "', roles: [ 'root' ] });\"";
                var cmd2 = Cli.Wrap("mongosh").WithArguments(CreateRoot2);

                var res2 = await cmd2.ExecuteBufferedAsync();
                if (!res2.IsSuccess)
                {
                    Console.WriteLine("--- Database Setup Error ---");
                    Console.WriteLine(res2.StandardError);
                    Console.WriteLine("--- --- --- ---- --- --- ---");
                    return;
                }
                _Data.Config.Database.RootPassword = RootPass;
                _Data.Config.Save();
            }

            string MongodConfig = File.ReadAllText("/etc/mongod.conf");

            if (MongodConfig.Contains("#security:"))
            {
                var CreateUser = $"-u '{RootUsername}' -p '{RootPass}' " + "--eval \"db.getSiblingDB('admin').createUser({ user: '" + _Data.Config.Database.Username + "', pwd: '" + AutoPassword + "', roles: [ { role: 'dbAdmin', db: 'devspace' }, { role: 'readWrite', db: 'devspace' } ] });\"";
                var cmd = Cli.Wrap("mongosh").WithArguments(CreateUser);

                var res = await cmd.ExecuteBufferedAsync();
                if (!res.IsSuccess)
                {
                    Console.WriteLine("--- Database Setup Error ---");
                    Console.WriteLine(res.StandardError);
                    Console.WriteLine("--- --- --- ---- --- --- ---");
                    return;
                }

                MongodConfig = MongodConfig.Replace("#security:", "security:\n  authorization: enabled\n  javascriptEnabled: false");
                File.WriteAllText("/etc/mongod.conf", MongodConfig);

                cmd = Cli.Wrap("sudo").WithArguments("systemctl restart mongod");

                res = await cmd.ExecuteBufferedAsync();
                if (!res.IsSuccess)
                {
                    Console.WriteLine("--- Database Setup Error ---");
                    Console.WriteLine(res.StandardError);
                    Console.WriteLine("--- --- --- ---- --- --- ---");
                    return;
                }
            }



            string Connect = $"mongodb://{DatabaseUsername}:{DatabasePassword}@{DatabaseIP}:{DatabasePort}";

            var client = new MongoClient(Connect);

            try
            {
                var result = client.GetDatabase(DatabaseName).RunCommand<BsonDocument>(new BsonDocument("ping", 1));
                Console.WriteLine("Pinged your deployment. You successfully connected to MongoDB!");
            }
            catch (Exception ex) { Console.WriteLine(ex); return; }

            var db = client.GetDatabase("devspace");

            try
            {
                await db.GetCollection<TestWrite>("TestWrite").InsertOneAsync(new()
                    {
                        Name = "Fluxpoint Development",
                    });
                await db.DropCollectionAsync("TestWrite");
            }
            catch (Exception ex)
            {
                Console.WriteLine("--- Database Setup Error ---");
                Console.WriteLine(ex);
                Console.WriteLine("--- --- --- ---- --- --- ---");
                return;
            }

            _DB.Client = client;
            _DB.IsConnected = true;

            _Data.Config.Database = new ConfigDatabase
                {
                    IsSetup = true,
                    IP = "127.0.0.1",
                    Name = "devspace",
                    Port = 27017,
                    Password = AutoPassword
                };
            _Data.Config.Save();
        }
        else
        {
            string Connect = $"mongodb://{DatabaseUsername}:{DatabasePassword}@{DatabaseIP}:{DatabasePort}";
            var client = new MongoClient(Connect);

            try
            {
                var result = client.GetDatabase(DatabaseName).RunCommand<BsonDocument>(new BsonDocument("ping", 1));
                Console.WriteLine("Pinged your deployment. You successfully connected to MongoDB!");
            }
            catch (Exception ex) { Console.WriteLine(ex); return; }

            var db = client.GetDatabase(DatabaseName);

            try
            {
                await db.GetCollection<TestWrite>("TestWrite").InsertOneAsync(new()
                    {
                        Name = "Fluxpoint Development",
                    });
                db.DropCollection("TestWrite");
            }
            catch (Exception ex)
            {
                Console.WriteLine("--- Database Setup Error ---");
                Console.WriteLine(ex);
                Console.WriteLine("--- --- --- ---- --- --- ---");
                return;
            }

            _DB.Client = client;
            _DB.IsConnected = true;

            _Data.Config.Database = new ConfigDatabase
                {
                    IsSetup = true,
                    IP = DatabaseIP,
                    Name = DatabaseName,
                    Port = DatabasePort,
                    Password = DatabasePassword,
                    Username = DatabaseUsername
                };
            _Data.Config.Save();
        }

        SetupStep = SetupStepType.Instance;
    }

    public class TestWrite
    {
        public string Name;
    }

    public async Task CheckInstance()
    {
        if (string.IsNullOrEmpty(InstanceName))
            return;
        SetupStep = SetupStepType.Disabled;
        _Data.Config.Instance.Name = InstanceName;
        _Data.Config.Instance.Description = InstanceDesc;
        _Data.Config.Save();
        SetupStep = SetupStepType.Team;
    }

    public async Task CheckTeam()
    {
        if (string.IsNullOrEmpty(TeamName))
            return;
        if (!string.IsNullOrEmpty(TeamVanityUrl))
            TeamVanityUrl = TeamVanityUrl.Replace(" ", "-").ToLower();

        SetupStep = SetupStepType.Disabled;
        TeamData Team = new TeamData
            {
                Name = TeamName,
                VanityUrl = TeamVanityUrl
            };
        await _DB.Teams.CreateAsync(Team);
        _DB.Teams.Cache.TryAdd(Team.Id.ToString(), Team);

        _Data.Config.isFullySetup = true;
        _Data.Config.Save();
        SetupStep = SetupStepType.Admin;
    }

    public async Task CheckAdmin(EditContext context)
    {
        SetupStep = SetupStepType.Disabled;
        var User = new AuthUser
            {
                UserName = AdminAccount.Username,
                Email = AdminAccount.Email
            };
        User.Auth.Sessions.TryAdd(Utils.GetStringSha256Hash(Session.Ip), new AuthUserSession { });
        var result = await UserManager.CreateAsync(User, AdminAccount.Password);

        if (result.Errors.Any())
        {
            AdminErrorMessage = result.Errors.First().Description;
            SetupStep = SetupStepType.Admin;
        }
        else
        {

            SetupStep = SetupStepType.Confirm;
        }
    }

    public PointStyle GetStepColor(SetupStepType compare)
    {
        if (SetupStep == SetupStepType.Disabled)
            return PointStyle.Dark;

        switch (compare)
        {
            case SetupStepType.Database:
                {
                    if (SetupStep == SetupStepType.Database)
                        return PointStyle.Info;
                    else
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Instance:
                {
                    if (SetupStep == SetupStepType.Instance)
                        return PointStyle.Info;
                    else if (SetupStep > SetupStepType.Instance)
                        return PointStyle.Success;
                }
                break;
            case SetupStepType.Team:
                if (SetupStep == SetupStepType.Team)
                    return PointStyle.Info;
                else if (SetupStep > SetupStepType.Team)
                    return PointStyle.Success;
                break;
            case SetupStepType.Admin:
                if (SetupStep == SetupStepType.Admin)
                    return PointStyle.Info;
                else if (SetupStep > SetupStepType.Admin)
                    return PointStyle.Success;
                break;

            case SetupStepType.Confirm:
                {
                    if (SetupStep == SetupStepType.Confirm)
                        return PointStyle.Success;
                }
                break;
        }
        return PointStyle.Dark;
    }

    public enum SetupStepType
    {
        Disabled, Database, Instance, Team, Admin, Confirm
    }
}
