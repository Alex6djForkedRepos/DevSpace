@using DevSpaceWeb.Components.Markdown
@using DevSpaceWeb.Services;
@using DevSpaceWeb.Services.Identity
@inherits MarkdownBase
@inject EmailService Email

@if (SelectedTemplate == null || !IsSelectedCustom)
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Email Templates</RadzenText>
        </div>
        <br />
        <RadzenRow Gap="0.5rem">
            <RadzenColumn SizeXS="6">
                <RadzenTabs RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="Defaults">
                            <RadzenListBox TValue="EmailTemplateType" Data="@Enum.GetValues(typeof(EmailTemplateType))" Style="width: 100%; height:500px"
                                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select default template" }})" ValueChanged="@((x) => ShowDefaultTemplate(x))">
                                <Template>
                                    <RadzenIcon Icon="@EmailTemplateData.GetTypeIcon(context)" /> @("Default " + EmailTemplateData.GetTypeName(context))
                                </Template>
                            </RadzenListBox>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Custom">
                            <div class="flex">
                                <RadzenButton @ref="@CreateTemplateButton" Text="Create Custom" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@(() => CreateTemplatePopup.ToggleAsync(CreateTemplateButton.Element))" />
                                <RadzenButton Style="margin-left: auto;" Text="Edit Template" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@EditCustomTemplate" />
                            </div>
                            <br />

                            <Popup @ref="@CreateTemplatePopup" Lazy="true" Style="position:absolute; height: 300px; width: 400px; overflow: auto;" class="pd-2">
                                <RadzenListBox TValue="EmailTemplateType" Data="@Enum.GetValues(typeof(EmailTemplateType))" Style="width: 100%; height: 100%;"
                                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                               InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select template" }})" ValueChanged="@((x) => CreateCustomTemplate(x))">
                                    <Template>
                                        <RadzenIcon Icon="@EmailTemplateData.GetTypeIcon(context)" /> @(EmailTemplateData.GetTypeName(context))
                                    </Template>
                                </RadzenListBox>
                            </Popup>

                            <RadzenListBox TValue="EmailTemplateData" Data="@_DB.EmailTemplates.Cache.Values" Style="width: 100%; height:500px"
                                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select custom template" }})" ValueChanged="@((x) => ShowCustomTemplate(x))">
                                <Template>
                                    <RadzenIcon Icon="@context.GetTypeIcon()" /> @context.Name
                                </Template>
                            </RadzenListBox>

                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Settings">
                            @* @foreach (EmailTemplateType t in Enum.GetValues(typeof(EmailTemplateType)))
                        {
                        <MudSelect Dense="true" T="string" Label="@EmailTemplateData.GetTypeName(t)" Value="@_Data.Config.Email.GetActiveEmailTemplateName(t)" Variant="Variant.Filled">
                        <MudSelectItem Value="@($"Default {EmailTemplateData.GetTypeName(t)}")" OnClick="@(() => _Data.Config.Email.RemoveActiveEmailTemplate(t))" />
                        @foreach (var i in _DB.EmailTemplates.Cache.Values.Where(x => x.Type == t))
                        {
                        <MudSelectItem Value="@i.Name" OnClick="@(() => _Data.Config.Email.SetActiveEmailTemplate(t, i))" />
                        }
                        </MudSelect>
                        <br />
                        } *@
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenColumn>
            <RadzenColumn SizeXS="6">
                <RadzenButton Text="Send Test Email" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@SendEmail" Disabled="@(SelectedTemplate == null || string.IsNullOrEmpty(FinalBody))" />
                <br />
                <br />
                <div Class="email-view">
                    <Markdown Content="@FinalBody"></Markdown>
                </div>
            </RadzenColumn>
        </RadzenRow>
    </div>
}
else
{
    <div class="dash-box dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
            <RadzenText class="mt-1" TextStyle="TextStyle.H6">Edit Template</RadzenText>
        </div>
        <br />
        <RadzenRow Gap="0.5rem">
            <RadzenColumn SizeXS="6">
                <RadzenButton Text="Back" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Dark" Click="@(() => IsSelectedCustom = false)" />
                <br />
                <br />
                <RadzenLabel Text="Name" class="rz-my-0"></RadzenLabel>
                <RadzenTextBox @bind-Value="TemplateName" Style="width: 100%" aria-label="Name" autocomplete="false" />
                <br />
                <br />
                <MarkdownEditor OnChange="@BodyTextChanged" Bindvalue="@TemplateBody" />
            </RadzenColumn>
            <RadzenColumn SizeXS="6">

                <div class="flex">
                    <RadzenButton Text="Send Test Email" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@SendEmail" />
                    <RadzenButton Style="margin-left: auto;" Text="Save Template" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@SaveCustom" />
                </div>
                <br />
                <div Class="email-view">
                    <Markdown Content="@FinalBody"></Markdown>
                </div>
            </RadzenColumn>
        </RadzenRow>
    </div>
}


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public EmailTemplateData? SelectedTemplate { get; set; }
    public bool IsSelectedCustom { get; set; }

    public AuthUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await Session.GetCurrentUserAsync();
        TemplateBody = EmailTemplateDefaults.List[EmailTemplateType.AccessCode];
    }

    public RadzenButton CreateTemplateButton { get; set; }
    public Popup CreateTemplatePopup { get; set; }

    public void ShowDefaultTemplate(EmailTemplateType type)
    {
        IsSelectedCustom = false;
        SelectedTemplate = new EmailTemplateData { Body = EmailTemplateDefaults.List[type], Type = type };
        TemplateBody = SelectedTemplate.Body;
        FinalBody = SelectedTemplate.ParseMarkdown(User, "https://test.com", "user@test.com", "123", "Markdown Test");
    }

    public void ShowCustomTemplate(EmailTemplateData data)
    {
        SelectedTemplate = data;
        TemplateBody = data.Body;
        FinalBody = data.ParseMarkdown(User, "https://test.com", "user@test.com", "123", "Markdown Test");
    }

    public void EditCustomTemplate()
    {
        if (SelectedTemplate == null)
            return;


        IsSelectedCustom = true;
        TemplateName = SelectedTemplate.Name;
        FinalBody = SelectedTemplate.ParseMarkdown(User, _Data.Config.Instance.GetPublicUrl(), "user@test.com", "123", "Markdown Test");
    }

    public async Task SendEmail()
    {
        if (SelectedTemplate == null)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        await Email.Send(EmailTemplateType.Test, User, null, body: SelectedTemplate.ParseHtml(User, _Data.Config.Instance.GetPublicUrl(), "user@test.com", "123", "Markdown Test"));

    }

    public async Task CreateCustomTemplate(EmailTemplateType type)
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        EmailTemplateData data = new EmailTemplateData
            {
                Type = type,
                Body = EmailTemplateDefaults.List[type]
            };
        data.Name = "Custom " + data.GetTypeName();
        await _DB.EmailTemplates.CreateAsync(data);
        _DB.EmailTemplates.Cache.TryAdd(data.Id, data);
    }

    public async Task SaveCustom()
    {
        if (SelectedTemplate == null || string.IsNullOrEmpty(TemplateName))
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        await SelectedTemplate.UpdateAsync();
    }

    public string TemplateName { get; set; }
    public string TemplateBody { get; set; }
    public string FinalBody { get; set; }

    protected void BodyTextChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            TemplateBody = e.Value.ToString();
            FinalBody = new EmailTemplateData() { Body = TemplateBody, Type = EmailTemplateType.AccessCode }.ParseMarkdown(User, "https://test.com");
        }
        else
        {
            TemplateBody = "";
            FinalBody = "";
        }


    }
}
