@using DevSpaceShared.Responses
@using DevSpaceShared.WebSocket
@using MongoDB.Driver

<PageTitle>Admin Database | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box">
    <div class="dash-box-content">
        <div class="dash-box-header">
            <div class="dash-box-icon dash-box-back" onclick="history.back()">
                <span class="iconify" data-icon="mdi:database"></span>
                <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
            </div>
            <RadzenText TextStyle="TextStyle.H6">Database</RadzenText>
        </div>
        <RadzenBreadCrumb class="mt-2">
            <RadzenBreadCrumbItem Path="@("/admin")" Text="Admin" />
            <RadzenBreadCrumbItem Text="Database" />
        </RadzenBreadCrumb>
        <br />
        <RadzenSelectBar TValue="DatabaseType" ValueChanged="@((v) => Database = v)">
            <Items>
                <RadzenSelectBarItem Value="DatabaseType.Teams" Text="Teams" />
                <RadzenSelectBarItem Value="DatabaseType.Servers" Text="Servers" />
                <RadzenSelectBarItem Value="DatabaseType.Websites" Text="Websites" />
                <RadzenSelectBarItem Value="DatabaseType.Projects" Text="Projects" />
                <RadzenSelectBarItem Value="DatabaseType.Logs" Text="Logs" />
            </Items>
        </RadzenSelectBar>
        <br />
        <br />
    </div>

    @switch (Database)
    {
        case DatabaseType.Teams:
            {
                <RadzenDataGrid @ref="@TeamsTables.grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                AllowSorting="true" Data="@TeamsTables.employees" Count="@TeamsTables.count" LoadData="@TeamsTables.LoadData"
                IsLoading="@TeamsTables.isLoading" GridLines="DataGridGridLines.Horizontal"
                EmptyText="No teams." PageSizeOptions="@Static.PageSizeOptions" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@TeamsTables.selectedEmployees">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(TeamData.Id)" Title="Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(TeamData.Name)" Title="Name" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(TeamData.OwnerId)" Title="Owner Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(TeamData.VanityUrl)" Title="Vanity Url" />
                    </Columns>
                </RadzenDataGrid>
            }
            break;
        case DatabaseType.Servers:
            {
                <RadzenDataGrid @ref="@ServersTables.grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                AllowSorting="true" Data="@ServersTables.employees" Count="@ServersTables.count" LoadData="@ServersTables.LoadData"
                IsLoading="@ServersTables.isLoading" GridLines="DataGridGridLines.Horizontal"
                                EmptyText="No servers." PageSizeOptions="@Static.PageSizeOptions" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@ServersTables.selectedEmployees">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(ServerData.Id)" Title="Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ServerData.Name)" Title="Name" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ServerData.TeamId)" Title="Team Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ServerData.OwnerId)" Title="Owner Id" MinWidth="120px" />
                    </Columns>
                </RadzenDataGrid>
            }
            break;
        case DatabaseType.Websites:
            {
                <RadzenDataGrid @ref="@WebsitesTables.grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                AllowSorting="true" Data="@WebsitesTables.employees" Count="@WebsitesTables.count" LoadData="@WebsitesTables.LoadData"
                IsLoading="@WebsitesTables.isLoading" GridLines="DataGridGridLines.Horizontal"
                                EmptyText="No websites." PageSizeOptions="@Static.PageSizeOptions" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@WebsitesTables.selectedEmployees">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(WebsiteData.Id)" Title="Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(WebsiteData.Name)" Title="Name" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(WebsiteData.TeamId)" Title="Team Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(WebsiteData.OwnerId)" Title="Owner Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(WebsiteData.Domain)" Title="Domain" MinWidth="120px" />
                    </Columns>
                </RadzenDataGrid>
            }
            break;
        case DatabaseType.Projects:
            {
                <RadzenDataGrid @ref="@ProjectsTables.grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                AllowSorting="true" Data="@ProjectsTables.employees" Count="@ProjectsTables.count" LoadData="@ProjectsTables.LoadData"
                IsLoading="@ProjectsTables.isLoading" GridLines="DataGridGridLines.Horizontal"
                                EmptyText="No projects." PageSizeOptions="@Static.PageSizeOptions" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@ProjectsTables.selectedEmployees">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(ProjectData.Id)" Title="Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ProjectData.Name)" Title="Name" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ProjectData.TeamId)" Title="Team Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(ProjectData.OwnerId)" Title="Owner Id" MinWidth="120px" />
                    </Columns>
                </RadzenDataGrid>
            }
            break;
        case DatabaseType.Logs:
            {
                <RadzenDataGrid @ref="@LogsTables.grid" AllowRowSelectOnRowClick="false" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage"
                AllowSorting="true" Data="@LogsTables.employees" Count="@LogsTables.count" LoadData="@LogsTables.LoadData"
                IsLoading="@LogsTables.isLoading" GridLines="DataGridGridLines.Horizontal"
                                EmptyText="No logs." PageSizeOptions="@Static.PageSizeOptions" ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.Advanced"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@LogsTables.selectedEmployees">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(LogData.Id)" Title="Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(LogData.Name)" Title="Name" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(LogData.TeamId)" Title="Team Id" MinWidth="120px" />
                        <RadzenDataGridColumn Property="@nameof(LogData.OwnerId)" Title="Owner Id" MinWidth="120px" />
                    </Columns>
                </RadzenDataGrid>
            }
            break;
    }
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public DatabaseType Database { get; set; } = DatabaseType.Teams;

    public TableDatabase<TeamData> TeamsTables = new TableDatabase<TeamData>("teams");
    public TableDatabase<ServerData> ServersTables = new TableDatabase<ServerData>("servers");
    public TableDatabase<ProjectData> ProjectsTables = new TableDatabase<ProjectData>("projects");
    public TableDatabase<WebsiteData> WebsitesTables = new TableDatabase<WebsiteData>("websites");
    public TableDatabase<LogData> LogsTables = new TableDatabase<LogData>("logs");
    public enum DatabaseType
    {
        Teams, Servers, Projects, Logs, Websites
    }

    public class TableDatabase<T> where T : IResource
    {
        public TableDatabase(string collectionName)
        {
            CollectionName = collectionName;
        }

        private string CollectionName;

        public IEnumerable<T> employees;
        public int count = 0;
        public IList<T> selectedEmployees;
        public RadzenDataGrid<T> grid;
        public bool isLoading = false;

        public long Count = 0;

        public async Task LoadData(LoadDataArgs args)
        {
            isLoading = true;

            List<FilterDefinition<T>> filters = new List<FilterDefinition<T>>();
            

            foreach (FilterDescriptor i in args.Filters)
            {
                switch (i.Property)
                {
                    case "Id":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue) && ObjectId.TryParse(SelectedValue, out ObjectId id))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq(x => x.Id, id));
                        }
                        break;
                    case "Name":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq(x => x.Name, SelectedValue));
                        }
                        break;
                    case "VanityUrl":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq("VanityUrl", SelectedValue));
                        }
                        break;
                    case "Domain":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq("Domain", SelectedValue));
                        }
                        break;
                    case "OwnerId":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue) && ObjectId.TryParse(SelectedValue, out ObjectId id))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq(x => x.OwnerId, id));
                        }
                        break;
                    case "TeamId":
                        {
                            string? SelectedValue = i.FilterValue as string;
                            if (!string.IsNullOrEmpty(SelectedValue) && ObjectId.TryParse(SelectedValue, out ObjectId id))
                                filters.Add(new FilterDefinitionBuilder<T>().Eq("TeamId", id));
                        }
                        break;
                }
            }
            FilterDefinition<T> filter = Builders<T>.Filter.And(filters);
            try
            {
                employees = await _DB.Client.GetDatabase(_DB.Configure!.Name).GetCollection<T>(CollectionName).Find(x => true).Skip(args.Skip).Limit(args.Top).ToListAsync();
            }
            catch (Exception ex)
            {
                Logger.LogMessage(ex.ToString(), LogSeverity.Error);
            }

            try
            {
                Count = await _DB.Client.GetDatabase(_DB.Configure!.Name).GetCollection<T>(CollectionName).CountDocumentsAsync(filter, new CountOptions());

                employees = await _DB.Client.GetDatabase(_DB.Configure!.Name).GetCollection<T>(CollectionName).Find(filter).Skip(args.Skip.GetValueOrDefault()).Limit(args.Top.GetValueOrDefault()).ToListAsync();
            }
            catch (Exception ex)
            {
                Logger.LogMessage(ex.ToString(), LogSeverity.Warn);
            }

            isLoading = false;
        }
    }
}
