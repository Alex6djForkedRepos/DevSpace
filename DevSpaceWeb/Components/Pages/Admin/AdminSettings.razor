@using DevSpaceWeb.Services
@using MailKit.Net.Smtp
@using MimeKit
@using Swashbuckle.AspNetCore.Swagger
@inject EmailService EmailService
@inject ISwaggerProvider Swagger
@inject DialogService Dialogs
@inject UserManager<AuthUser> UserManager

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:gear"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Admin Settings</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/")" Text="Dashboard" />
        <RadzenBreadCrumbItem Text="Admin" />
    </RadzenBreadCrumb>
    <br />
    <h6>Stats</h6>
    <p>Teams: @_DB.Teams.Cache.Keys.Count()</p>
    <p>Servers: @_DB.Servers.Cache.Keys.Count()</p>
    <p>Websites: @_DB.Websites.Cache.Keys.Count()</p>
    <p>Projects: @_DB.Projects.Cache.Keys.Count()</p>
    <br />

    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1">Email</RadzenText>
    <RadzenTextBox @bind-Value="@EmailInput" Style="width: 100%" aria-label="Email TextBox" AutoCompleteType="AutoCompleteType.Off" inputmode="email"
                   autocapitalize="none" MaxLength="100" />
    <br />
    <br />
    <RadzenButton Text="Verify Email" ButtonStyle="ButtonStyle.Light" Click="@VerifyEmail" />
    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Style="margin-top: 20px;">
        <a href="@("/admin/instance")">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:list-box"></span>
                <RadzenText TextStyle="TextStyle.H6">Instance</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/admin/email")">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:email"></span>
                <RadzenText TextStyle="TextStyle.H6">Email</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/admin/database")">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:database"></span>
                <RadzenText TextStyle="TextStyle.H6">Database</RadzenText>
            </RadzenCard>
        </a>
        <a href="https://github.com/FluxpointDev/DevSpace/releases" target="_blank">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:information-box"></span>
                <RadzenText TextStyle="TextStyle.H6">Version</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @Program.GetVersionText()
                </RadzenText>
            </RadzenCard>
        </a>
    </RadzenStack>

</div>

<style>
    .settings-item {
        width: 120px;
        height: 120px;
    }

        .settings-item .iconify {
            width: 30px;
            height: 30px;
            margin-top: 16px;
            color: var(--rz-info);
        }

        .settings-item .rz-text-h6 {
            margin-top: 14px;
            font-size: 1.1rem;
            color: var(--rz-base-200) !important;
        }

    .rz-stack a {
        text-decoration: none !important;
    }

    .settings-item:hover {
        background-color: var(--rz-base-dark);
        outline: solid 1px var(--rz-secondary-dark) !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public ConfigEmailType EmailType { get; set; }
    public string? SmtpHost { get; set; }
    public int SmtpPort { get; set; }
    public string? SmtpUser { get; set; }
    public string? SmtpPassword { get; set; }
    public string? ManagedEmailToken { get; set; }

    public string? InstanceName { get; set; }
    public string? InstanceDescription { get; set; }
    public string? InstanceIcon { get; set; }

    public int MaxImagesUpload { get; set; }

    public string? Value { get; set; }

    public string? EmailInput { get; set; }

    public async Task VerifyEmail()
    {
        if (string.IsNullOrEmpty(EmailInput))
            return;

        if (!EmailService.CanSendEmail())
        {
            await Dialogs.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }

        bool Confirm = await Dialogs.ShowConfirmAsync("Verify Email", $"Are you sure you want to verify the account for {EmailInput}", "Confirm", ButtonStyle.Success);
        if (!Confirm)
            return;

        AuthUser? user = await UserManager.FindByEmailAsync(EmailInput);
        if (user == null)
        {
            await Dialogs.ShowInfoAsync("Unknown Account", "Could not find account for " + EmailInput);
            return;
        }

        if (user.EmailConfirmed)
        {
            await Dialogs.ShowInfoAsync("Email Verified", $"This account email has already been verified.");
            return;
        }

        user.EmailConfirmed = true;
        await UserManager.UpdateAsync(user);

        await Dialogs.ShowInfoAsync("Email Verified", EmailInput);
    }

    protected override async Task OnInitializedAsync()
    {
        EmailType = _Data.Config.Email.Type;
        if (!Program.IsPreviewMode)
        {
            SmtpHost = _Data.Config.Email.SmtpHost;
            SmtpPort = _Data.Config.Email.SmtpPort;
            SmtpUser = _Data.Config.Email.SmtpUser;
            SmtpPassword = _Data.Config.Email.SmtpPassword;
            ManagedEmailToken = _Data.Config.Email.ManagedEmailToken;
        }
        InstanceName = _Data.Config.Instance.Name;
        InstanceDescription = _Data.Config.Instance.Description;

        MaxImagesUpload = _Data.Config.Instance.Limits.MaxImagesUpload;
    }

    public void UpdateInstance()
    {
        if (string.IsNullOrEmpty(InstanceName))
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        _Data.Config.Instance.Name = InstanceName;
        _Data.Config.Instance.Description = InstanceDescription;
        _Data.Config.Save();
    }

    public async Task SetupEmailAsync()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!EmailService.CanSendEmail())
        {
            await Dialogs.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
                return;

            HttpRequestMessage Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/test");
            Message.Headers.TryAddWithoutValidation("Authorization", ManagedEmailToken);


            HttpResponseMessage Res = await Program.Http.SendAsync(Message);
            if (Res.IsSuccessStatusCode)
            {
                _Data.Config.Email.Type = ConfigEmailType.FluxpointManaged;
                _Data.Config.Email.ManagedEmailToken = ManagedEmailToken;
                _Data.Config.Save();
            }
        }
        else
        {
            try
            {
                using (SmtpClient Client = new SmtpClient())
                {
                    await Client.ConnectAsync(SmtpHost, SmtpPort);
                    await Client.AuthenticateAsync(SmtpUser, SmtpPassword);

                    await Client.DisconnectAsync(true);
                }

                _Data.Config.Email.Type = ConfigEmailType.Custom;
                _Data.Config.Email.SmtpHost = SmtpHost;
                _Data.Config.Email.SmtpPort = SmtpPort;
                _Data.Config.Email.SmtpUser = SmtpUser;
                _Data.Config.Email.SmtpPassword = SmtpPassword;
                _Data.Config.Save();
            }
            catch { }
        }
    }

    public string TestEmail { get; set; }

    public async Task SendTestEmail()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!EmailService.CanSendEmail())
        {
            await Dialogs.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
                return;

            HttpRequestMessage Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/send");
            Message.Headers.TryAddWithoutValidation("Authorization", ManagedEmailToken);
            Message.Content = JsonContent.Create(new EmailService.SendMailJson
                {
                    instance_name = _Data.Config.Instance.Name,
                    instance_icon = _Data.Config.Instance.GetIconOrDefault(true),
                    email = TestEmail,
                    name = "Test User",
                    type = EmailTemplateType.Test,
                    url = _Data.Config.Instance.GetPublicUrl()
                });
            HttpResponseMessage Res = await Program.Http.SendAsync(Message);
        }
        else
        {
            try
            {
                using (SmtpClient Client = new SmtpClient())
                {
                    await Client.ConnectAsync(SmtpHost, SmtpPort);
                    await Client.AuthenticateAsync(SmtpUser, SmtpPassword);

                    MimeMessage message = new MimeMessage();
                    message.From.Add(new MailboxAddress("Dev Space", SmtpUser));
                    message.To.Add(new MailboxAddress("Test User", TestEmail));
                    message.Subject = $"Test Email | {_Data.Config.Instance.Name}";
                    message.Body = new TextPart("plain") { Text = $"This is a test message." };

                    await Client.SendAsync(message);
                    await Client.DisconnectAsync(true);
                }
            }
            catch { }
        }
    }
}

