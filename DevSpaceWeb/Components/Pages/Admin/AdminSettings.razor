@using DevSpaceWeb.Services
@using MailKit.Net.Smtp
@using MimeKit
@using Swashbuckle.AspNetCore.Swagger
@inject EmailService EmailService
@inject ISwaggerProvider Swagger

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:gear"></span></div>
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Admin Settings</RadzenText>
    </div>
    <br />
    <h3>Stats</h3>
    <p>Teams: @_DB.Teams.Cache.Keys.Count()</p>
    <p>Servers: @_DB.Servers.Cache.Keys.Count()</p>
    <p>Websites: @_DB.Websites.Cache.Keys.Count()</p>
    <p>Projects: @_DB.Projects.Cache.Keys.Count()</p>
    <p>Logs: @_DB.Logs.Cache.Keys.Count()</p>
    <br />
    <RadzenStack Gap="10px" JustifyContent="JustifyContent.Center" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
        <a href="@("/admin/instance")">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:list-box"></span>
                <RadzenText TextStyle="TextStyle.H6">Instance</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/admin/database")">
            <RadzenCard class="rz-p-1 rz-text-align-center settings-item">
                <span class="iconify" data-icon="mdi:database"></span>
                <RadzenText TextStyle="TextStyle.H6">Database</RadzenText>
            </RadzenCard>
        </a>
    </RadzenStack>

</div>

<style>
    .settings-item {
        width: 140px;
        height: 140px;
    }

        .settings-item .iconify {
            width: 36px;
            height: 36px;
            margin-top: 26px;
            color: var(--rz-info);
        }

        .settings-item .rz-text-h6 {
            margin-top: 14px;
            font-size: 1.1rem;
            color: var(--rz-base-200) !important;
        }

    .rz-stack a {
        text-decoration: none !important;
    }

    .settings-item:hover {
        background-color: var(--rz-base-dark);
        outline: solid 1px var(--rz-secondary-dark) !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public ConfigEmailType EmailType { get; set; }
    public string SmtpHost { get; set; }
    public int SmtpPort { get; set; }
    public string SmtpUser { get; set; }
    public string SmtpPassword { get; set; }
    public string ManagedEmailToken { get; set; }

    public string InstanceName { get; set; }
    public string InstanceDescription { get; set; }
    public string InstanceIcon { get; set; }

    public int MaxImagesUpload { get; set; }

    public string Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EmailType = _Data.Config.Email.Type;
        if (!Program.IsPreviewMode)
        {
            SmtpHost = _Data.Config.Email.SmtpHost;
            SmtpPort = _Data.Config.Email.SmtpPort;
            SmtpUser = _Data.Config.Email.SmtpUser;
            SmtpPassword = _Data.Config.Email.SmtpPassword;
            ManagedEmailToken = _Data.Config.Email.ManagedEmailToken;
        }
        InstanceName = _Data.Config.Instance.Name;
        InstanceDescription = _Data.Config.Instance.Description;

        MaxImagesUpload = _Data.Config.Instance.Limits.MaxImagesUpload;
    }

    public void UpdateInstance()
    {
        if (string.IsNullOrEmpty(InstanceName))
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        _Data.Config.Instance.Name = InstanceName;
        _Data.Config.Instance.Description = InstanceDescription;
        _Data.Config.Save();
    }

    public async Task SetupEmailAsync()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
                return;

            var Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/test");
            Message.Headers.Add("Authorization", ManagedEmailToken);


            var Res = await Program.Http.SendAsync(Message);
            if (Res.IsSuccessStatusCode)
            {
                _Data.Config.Email.Type = ConfigEmailType.FluxpointManaged;
                _Data.Config.Email.ManagedEmailToken = ManagedEmailToken;
                _Data.Config.Save();
            }
        }
        else
        {
            try
            {
                using (var Client = new SmtpClient())
                {
                    await Client.ConnectAsync(SmtpHost, SmtpPort);
                    await Client.AuthenticateAsync(SmtpUser, SmtpPassword);

                    await Client.DisconnectAsync(true);
                }

                _Data.Config.Email.Type = ConfigEmailType.Custom;
                _Data.Config.Email.SmtpHost = SmtpHost;
                _Data.Config.Email.SmtpPort = SmtpPort;
                _Data.Config.Email.SmtpUser = SmtpUser;
                _Data.Config.Email.SmtpPassword = SmtpPassword;
                _Data.Config.Save();
            }
            catch { }
        }
    }

    public string TestEmail { get; set; }

    public async Task SendTestEmail()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (EmailType == ConfigEmailType.FluxpointManaged)
        {
            if (string.IsNullOrEmpty(ManagedEmailToken))
                return;

            var Message = new HttpRequestMessage(HttpMethod.Get, "https://devspacesmtp.fluxpoint.dev/send");
            Message.Headers.Add("Authorization", ManagedEmailToken);
            Message.Content = JsonContent.Create(new EmailService.SendMailJson
                {
                    instance_name = _Data.Config.Instance.Name,
                    instance_icon = _Data.Config.Instance.GetIconOrDefault(true),
                    email = TestEmail,
                    name = "Test User",
                    type = EmailTemplateType.Test,
                    url = _Data.Config.Instance.GetPublicUrl()
                });
            var Res = await Program.Http.SendAsync(Message);
        }
        else
        {
            try
            {
                using (var Client = new SmtpClient())
                {
                    await Client.ConnectAsync(SmtpHost, SmtpPort);
                    await Client.AuthenticateAsync(SmtpUser, SmtpPassword);

                    MimeMessage message = new MimeMessage();
                    message.From.Add(new MailboxAddress("Dev Space", SmtpUser));
                    message.To.Add(new MailboxAddress("Test User", TestEmail));
                    message.Subject = $"Test Email | {_Data.Config.Instance.Name}";
                    message.Body = new TextPart("plain") { Text = $"This is a test message." };

                    await Client.SendAsync(message);
                    await Client.DisconnectAsync(true);
                }
            }
            catch { }
        }
    }

    // public void SettingChanges()
    // {
    //     Console.WriteLine("Load Snackbar");

    //     var config = (SnackbarOptions options) =>
    //     {
    // options.Icon = @Icons.Material.Filled.Warning;
    // options.IconColor = Color.Warning;
    // options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
    // options.ShowCloseIcon = false;
    // options.RequireInteraction = true;
    // options.SnackbarVariant = Variant.Text;
    //     };
    //     Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
    //     Snackbar.Add(
    // @<div>
    //     <div style="display: inline-block; margin-right: 20px;">
    //         <h3>Unsaved Settings</h3>
    //         <p>Save or Reset the current settings.</p>
    //     </div>

    //     <ul style="display: inline-block">
    //         <MudButton Variant="Variant.Filled" Style="margin-right: 6px;" Color="Color.Success">Save</MudButton>
    //         <MudButton Variant="Variant.Filled" Color="Color.Error">Reset</MudButton>
    //     </ul>
    // </div>, configure: config, key: "settings");
    //     Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
    // }
}

