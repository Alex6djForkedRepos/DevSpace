@using DevSpaceWeb.Apps.Data
@using DevSpaceWeb.Models.Apps

<PageTitle>@(App?.Name ?? "Server") Settings | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <iconify-icon icon="mdi:gear"></iconify-icon>
            <iconify-icon icon="mdi:arrow-left-thick"></iconify-icon>
        </div>
        <RadzenText TextStyle="TextStyle.H6">App Settings</RadzenText>
    </div>
    <RadzenBreadCrumb class="mt-2">
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/apps")" Text="Apps" />
        <RadzenBreadCrumbItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/apps/" + Session.Selected.Team?.Resource?.VanityUrl)" Text="@Session.Selected.Team?.Resource?.Data.Name" />
        <RadzenBreadCrumbItem Text="Settings" />
    </RadzenBreadCrumb>
    @if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageApp))
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for Manage App
        </RadzenAlert>
    }
    else
    {
        <br />
        @if (Data != null)
        {
            <DynamicFormDialog Model="@ModifyAppModel" ModelData="@Data" OnSubmit="@UpdateSettings"></DynamicFormDialog>
        }
    }

</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public AppData? App => Session.Selected.Resource as AppData;

    protected override async Task OnInitializedAsync()
    {
        if (App != null)
            Data = new ModifyAppModel
            {
                Name = App.Name,
                VanityUrl = App.VanityUrl
            };
    }

    public ModifyAppModel? Data { get; set; }

    public async Task<string?> UpdateSettings(ModifyAppModel model)
    {
        if (App == null || Team == null || Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageApp))
            return "You do not have Manage App permissions.";

        VanityUrlData Vanity = Team.GetVanityUrlData();

        string? VanityUrl = Utils.FormatVanityUrl(model.VanityUrl);

        if (Vanity.CheckAlreadyExists(App, VanityUrl))
            return Lang.Errors.vanity_url_already_taken;

        await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
        .Set(x => x.Name, model.Name)
        .Set(x => x.VanityUrl, VanityUrl),
        async () =>
        {
            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Setting, AuditLogEventType.AppSettingsChanged)
                .SetTarget(App)
                .AddPropertyChange("Name", App.Name, model.Name)
                .AddPropertyChange("Vanity URL", App.VanityUrl, VanityUrl));

            App.Name = model.Name;
            App.VanityUrl = model.VanityUrl;
            VanityUrlData Vanity = Team.GetVanityUrlData();
            await Vanity.UpdateAsync(App, VanityUrl);
            App.VanityUrl = App.GetVanityUrlOrId();
            Session.TriggerNavMenuChange();
        });
        return null;
    }
}
