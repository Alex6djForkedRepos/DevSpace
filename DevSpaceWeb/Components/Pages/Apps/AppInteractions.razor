@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceShared.Services
@using DevSpaceShared.WebSocket
@using DevSpaceWeb.Agents
@using DevSpaceWeb.Apps.Data
@using System.Linq.Dynamic.Core
@using DevSpaceWeb.Models.Apps
@inject DialogService Dialogs
@inject NavigationManager Nav
@inject NotificationService Notifications
@inject IJSRuntime JS
@inject ContextMenuService ContextMenuService

<PageTitle>@(App?.Name ?? "App") Interactions | @_Data.Config.Instance.Name</PageTitle>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon dash-box-back" onclick="history.back()">
            <span class="iconify" data-icon="mdi:gesture-touch-hold"></span>
            <span class="iconify" data-icon="mdi:arrow-left-thick"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">App Interactions</RadzenText>
        @if ((IsLoading) && Member != null && Member.HasAppPermission(Team, App, AppPermission.ViewCommands))
        {
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" class="ml-2" />
        }
    </div>

    @if (Permissions.CheckFailedAppPermissions(Member, Team, App, AppPermission.ViewApp, out AppPermission? failedPerm))
    {
        <br />
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
            You do not have permission for @Utils.FriendlyName(failedPerm.ToString()!)
        </RadzenAlert>
    }
    else
    {
        <br />
        <RadzenTabs @bind-SelectedIndex="@TabIndex">
            <Tabs>
                <RadzenTabsItem Text="Buttons" Disabled="@(IsLoading)">
                    <ActionBar>
                        <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Enable" Click="@RunSelectedEnableCommands" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!AnyButtonsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Disable" Click="@RunSelectedDisableCommands" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(!AnyButtonsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@RunSelectedRemoveCommands" Icon="delete" Disabled="@(!AnyButtonsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Filled" Text="Create Button" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateInteraction" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" />
                        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshInteractions" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ViewCommands))" />
                        <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                            <Start>
                                <RadzenIcon Icon="search" />
                            </Start>
                            <ChildContent>
                                <RadzenTextBox @ref="@ButtonsSearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                               autocapitalize="none" MaxLength="100" Placeholder="Search buttons" inputmode="search"
                                               @oninput="@(args => SetNameFilter(args.Value as string))" />
                            </ChildContent>
                            <End>
                                @if (!string.IsNullOrWhiteSpace(SearchText))
                                {
                                    <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                                }
                            </End>
                        </RadzenFormField>
                    </ActionBar>
                    <br />
                    <RadzenDataGrid @ref="@ButtonsGrid" Data="@ButtonsList" LoadData="@LoadButtonsData" Count="@ButtonsCount" IsLoading="@IsLoading"
                                    Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No button interactions."
                                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                                    @bind-Value="@SelectedButtons" SelectionMode="DataGridSelectionMode.Multiple"
                                    PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                                    PagingSummaryFormat="@(ButtonsCount + " button" + (ButtonsCount != 1 ? "s" : "") )"
                                    AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    TItem="IDiscordAppInteraction" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
                        <Columns>
                            <RadzenDataGridColumn Width="36px" Frozen="true" Filterable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                                    Value="@(SelectedButtons == null || SelectedButtons?.Any() != true ? false : !ButtonsList.All(i => SelectedButtons.Contains(i)) ? null : SelectedButtons.Any(i => SelectedButtons.Contains(i)))"
                                                    Change="@(args => SelectedButtons = args == true ? (SelectedButtons != null && SelectedButtons.Any()) ? null : ButtonsList.ToList() : null)" Disabled="@(IsLoading || ButtonsCount == 0)" />
                                </HeaderTemplate>
                                <Template Context="data">
                                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedButtons != null && SelectedButtons.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                                    TValue="bool" Change="@(() => ButtonsGrid.SelectRow(data))" Disabled="@IsLoading" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(IDiscordAppInteraction.Name)">
                                <Template>
                                    <RadzenLink Path="@("/workspaces/" + App.Id.ToString() + "/" + context.WorkspaceId.ToString())" Target="_blank" Text="@context.Name" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Status" Width="100px" Property="@nameof(IDiscordAppInteraction.IsEnabled)" FilterMode="FilterMode.CheckBoxList" FormatString="{0}" FormatProvider="@EnabledFilterProvider.Instance">
                                <Template>
                                    @if (context.IsEnabled)
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Enabled" IsPill="true" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Disabled" IsPill="true" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Actions" Width="80px" Filterable="false">
                                <Template>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="6px">
                                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" />
                                        <a href="@("/workspaces/" + App.Id.ToString() + "/" + context.WorkspaceId.ToString())" target="_blank"><RadzenButton Icon="app_registration" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(!Member.HasAppPermission(Team, App, AppPermission.ViewWorkspaces))" /></a>
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Created" Width="140px" Filterable="false">
                                <Template>
                                    @Utils.GetLocalDate(Session, context.CreatedAt)
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="By" Width="220px" Filterable="false">
                                <Template>
                                    <MemberStrip Team="@Team" UserId="@context.CreatedBy"></MemberStrip>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Update" Width="140px" Filterable="false">
                                <Template>
                                    @if (context.UpdatedAt.HasValue)
                                    {
                                        @Utils.GetLocalDate(Session, context.UpdatedAt)
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Description">
                                <Template>
                                    @context.Description
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Modals" Disabled="@(IsLoading)">
                    <ActionBar>
                        <RadzenButton class="actionbar-first" Variant="Variant.Outlined" Text="Enable" Click="@RunSelectedEnableCommands" Icon="play_arrow" IconColor="@Colors.InfoDark" Disabled="@(!AnyModalsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Disable" Click="@RunSelectedDisableCommands" Icon="pause" IconColor="@Colors.InfoDark" Disabled="@(!AnyModalsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton class="actionbar-last" Variant="Variant.Outlined" Text="Remove" Click="@RunSelectedRemoveCommands" Icon="delete" Disabled="@(!AnyModalsSelected || IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" IconColor="@Colors.DangerDark" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Filled" Text="Create Modal" Icon="add" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@CreateInteraction" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" />
                        <RadzenButton Variant="Variant.Filled" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Size="ButtonSize.Small" Click="@RefreshInteractions" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ViewCommands))" />
                        <RadzenFormField Variant="Variant.Outlined" AllowFloatingLabel="false">
                            <Start>
                                <RadzenIcon Icon="search" />
                            </Start>
                            <ChildContent>
                                <RadzenTextBox @ref="@ModalsSearchBox" id="actionSearch" @bind-Value="@SearchText" aria-label="Search TextBox" AutoCompleteType="AutoCompleteType.Off"
                                               autocapitalize="none" MaxLength="100" Placeholder="Search modals" inputmode="search"
                                               @oninput="@(args => SetNameFilter(args.Value as string))" />
                            </ChildContent>
                            <End>
                                @if (!string.IsNullOrWhiteSpace(SearchText))
                                {
                                    <RadzenButton Icon="close" Click="@(args => SetNameFilter(null))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Size="ButtonSize.Small" />
                                }
                            </End>
                        </RadzenFormField>
                    </ActionBar>
                    <br />
                    <RadzenDataGrid @ref="@ModalsGrid" Data="@ModalsList" LoadData="@LoadModalsData" Count="@ModalsCount" IsLoading="@IsLoading"
                                    Density="Density.Compact" AllowRowSelectOnRowClick="false" EmptyText="No modal interactions."
                                    PagerHorizontalAlign="HorizontalAlign.Center" AllowPaging="true" @bind-PageSize="@Session.ItemsPerPage" GridLines="DataGridGridLines.Horizontal"
                                    @bind-Value="@SelectedModals" SelectionMode="DataGridSelectionMode.Multiple"
                                    PageSizeOptions="@Static.TablePageSizeOptions" ShowPagingSummary="true"
                                    PagingSummaryFormat="@(ModalsCount + " modal" + (ModalsCount != 1 ? "s" : "") )"
                                    AllowSorting="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    TItem="IDiscordAppInteraction" CellContextMenu="@(args => ShowContextMenuWithManageItems(args.Data, args))">
                        <Columns>
                            <RadzenDataGridColumn Width="36px" Frozen="true" Filterable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select all items" } })"
                                                    Value="@(SelectedModals == null || SelectedModals?.Any() != true ? false : !ModalsList.All(i => SelectedModals.Contains(i)) ? null : SelectedModals.Any(i => SelectedModals.Contains(i)))"
                                                    Change="@(args => SelectedModals = args == true ? (SelectedModals != null && SelectedModals.Any()) ? null : ModalsList.ToList() : null)" Disabled="@(IsLoading || ModalsCount == 0)" />
                                </HeaderTemplate>
                                <Template Context="data">
                                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedModals != null && SelectedModals.Contains(data))" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Select item" } })"
                                                    TValue="bool" Change="@(() => ModalsGrid.SelectRow(data))" Disabled="@IsLoading" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Name" Width="200px" Frozen="true" Property="@nameof(IDiscordAppInteraction.Name)">
                                <Template>
                                    <RadzenLink Path="@("/workspaces/" + App.Id.ToString() + "/" + context.WorkspaceId.ToString())" Target="_blank" Text="@context.Name" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Status" Width="100px" Property="@nameof(IDiscordAppInteraction.IsEnabled)" FilterMode="FilterMode.CheckBoxList" FormatString="{0}" FormatProvider="@EnabledFilterProvider.Instance">
                                <Template>
                                    @if (context.IsEnabled)
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Enabled" IsPill="true" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Warning" Text="Disabled" IsPill="true" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Actions" Width="80px" Filterable="false">
                                <Template>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="6px">
                                        <RadzenButton Click="@(args => ShowContextMenuWithManageItems(context, args))" Icon="build" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(IsLoading || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))" />
                                        <a href="@("/workspaces/" + App.Id.ToString() + "/" + context.WorkspaceId.ToString())" target="_blank"><RadzenButton Icon="app_registration" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="@(!Member.HasAppPermission(Team, App, AppPermission.ViewWorkspaces))" /></a>
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Created" Width="140px" Filterable="false">
                                <Template>
                                    @Utils.GetLocalDate(Session, context.CreatedAt)
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="By" Width="220px" Filterable="false">
                                <Template>
                                    <MemberStrip Team="@Team" UserId="@context.CreatedBy"></MemberStrip>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Update" Width="140px" Filterable="false">
                                <Template>
                                    @if (context.UpdatedAt.HasValue)
                                    {
                                        @Utils.GetLocalDate(Session, context.UpdatedAt)
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Description">
                                <Template>
                                    @context.Description
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>


    }
</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public RadzenTextBox ButtonsSearchBox { get; set; } = null!;
    public RadzenTextBox ModalsSearchBox { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CanSelect)
        {
            try
            {
                if (TabIndex == 0)
                    _ = ButtonsSearchBox.FocusAsync();
                else
                    _ = ModalsSearchBox.FocusAsync();
                CanSelect = false;
            }
            catch { }
        }
    }
    private int _tabIndex;
    public int TabIndex { get { return _tabIndex; } set { _tabIndex = value; CanSelect = true; } }
    public bool CanSelect = true;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public AppData? App => Session.Selected.App;

    public int ButtonsCount { get; set; }
    IQueryable<IDiscordAppInteraction>? ButtonsList;
    IList<IDiscordAppInteraction>? SelectedButtons;
    public bool AnyButtonsSelected => SelectedButtons != null ? SelectedButtons.Any() : false;
    RadzenDataGrid<IDiscordAppInteraction> ButtonsGrid;

    public int ModalsCount { get; set; }
    IQueryable<IDiscordAppInteraction>? ModalsList;
    IList<IDiscordAppInteraction>? SelectedModals;
    public bool AnyModalsSelected => SelectedModals != null ? SelectedModals.Any() : false;
    RadzenDataGrid<IDiscordAppInteraction> ModalsGrid;


    public bool IsLoading = true;
    public string? SearchText { get; set; }
    public async Task SetNameFilter(string? text)
    {
        SearchText = text;
        try
        {
            await ButtonsGrid.ColumnsCollection.ElementAt(1).SetFilterValueAsync(text);
        }
        catch { }
        await ButtonsGrid.Reload();
    }

    public async Task LoadButtonsData(LoadDataArgs args)
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ViewCommands))
            return;

        IsLoading = true;

        IQueryable<IDiscordAppInteraction> query = App.ButtonInteractions.Values.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);

        ButtonsCount = query.Count();
        ButtonsList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());

        IsLoading = false;
    }

    public async Task LoadModalsData(LoadDataArgs args)
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ViewCommands))
            return;

        IsLoading = true;

        IQueryable<IDiscordAppInteraction> query = App.ModalInteractions.Values.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
            query = query.Where(args.Filter);

        ModalsCount = query.Count();
        ModalsList = query.OrderBy(x => x.Name).Skip(args.Skip.GetValueOrDefault()).Take(args.Top.GetValueOrDefault());

        IsLoading = false;
    }

    public async Task RefreshInteractions()
    {
        if (ButtonsGrid != null)
            await ButtonsGrid.RefreshDataAsync();

        if (ModalsGrid != null)
            await ModalsGrid.RefreshDataAsync();
    }

    public async Task CreateInteraction()
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
            return;

        switch (TabIndex)
        {
            case 0:
                {
                    await Dialogs.ShowDynamicFormAsync<CommandCreateModal>("Create Button Interaction", new CommandCreateModal(), async (CommandCreateModal data) =>
                    {
                        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
                            return "You do not have team permission for Manage Commands";

                        if (App.ButtonInteractions.Keys.Count() >= 250)
                            return "You can only add up to 250 button interactions.";

                        if (App.ButtonInteractions.ContainsKey(data.Name))
                            return "This button name already exists.";

                        WorkspaceData workspace = new WorkspaceData
                        {
                            AppId = App.Id,
                            TeamId = Team.Id,
                            Type = WorkspaceType.DiscordInteractionButton,
                            CommandFormat = data.Name
                        };

                        await _DB.Workspaces.CreateAsync(workspace);

                        App.ButtonInteractions.Add(data.Name, new IDiscordAppInteraction
                        {
                            Name = data.Name,
                            Description = data.Description,
                            WorkspaceId = workspace.Id,
                            CreatedAt = DateTime.UtcNow,
                            CreatedBy = Member.UserId
                        });

                        var Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>().Set(x => x.ButtonInteractions, App.ButtonInteractions));
                        if (!Result.IsAcknowledged)
                        {
                            App.ButtonInteractions.Remove(data.Name);
                            _ = _DB.Workspaces.DeleteAsync(workspace);
                            return "Failed to add button data to app.";
                        }
                        InvokeAsync(RefreshInteractions);
                        return null;
                    });
                }
                break;
            case 1:
                {
                    await Dialogs.ShowDynamicFormAsync<CommandCreateModal>("Create Modal Interaction", new CommandCreateModal(), async (CommandCreateModal data) =>
                    {
                        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
                            return "You do not have team permission for Manage Commands";

                        if (App.ModalInteractions.Keys.Count() >= 250)
                            return "You can only add up to 250 modal interactions.";

                        if (App.ModalInteractions.ContainsKey(data.Name))
                            return "This modal name already exists.";

                        WorkspaceData workspace = new WorkspaceData
                        {
                            AppId = App.Id,
                            TeamId = Team.Id,
                            Type = WorkspaceType.DiscordInteractionModal,
                            CommandFormat = data.Name
                        };

                        await _DB.Workspaces.CreateAsync(workspace);

                        App.ModalInteractions.Add(data.Name, new IDiscordAppInteraction
                        {
                            Name = data.Name,
                            Description = data.Description,
                            WorkspaceId = workspace.Id,
                            CreatedAt = DateTime.UtcNow,
                            CreatedBy = Member.UserId
                        });

                        var Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>().Set(x => x.ModalInteractions, App.ModalInteractions));
                        if (!Result.IsAcknowledged)
                        {
                            App.ModalInteractions.Remove(data.Name);
                            _ = _DB.Workspaces.DeleteAsync(workspace);
                            return "Failed to add modal data to app.";
                        }
                        InvokeAsync(RefreshInteractions);
                        return null;
                    });
                }
                break;
        }
    }

    public async Task RunSelectedEnableCommands()
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
            return;

        IsLoading = true;
        switch (TabIndex)
        {
            case 0:
                if (SelectedButtons == null)
                    return;

                foreach (var i in SelectedButtons)
                {
                    await MenuItemClick("enable", i, true);
                }
                SelectedButtons = null;
                break;
            case 1:
                if (SelectedModals == null)
                    return;

                foreach (var i in SelectedModals)
                {
                    await MenuItemClick("enable", i, true);
                }
                SelectedModals = null;
                break;
        }
        IsLoading = false;
        await RefreshInteractions();
    }

    public async Task RunSelectedDisableCommands()
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
            return;

        IsLoading = true;
        switch (TabIndex)
        {
            case 0:
                if (SelectedButtons == null)
                    return;

                foreach (var i in SelectedButtons)
                {
                    await MenuItemClick("disable", i, true);
                }
                SelectedButtons = null;
                break;
            case 1:
                if (SelectedModals == null)
                    return;

                foreach (var i in SelectedModals)
                {
                    await MenuItemClick("disable", i, true);
                }
                SelectedModals = null;
                break;
        }
        IsLoading = false;
        await RefreshInteractions();
    }

    public async Task RunSelectedRemoveCommands()
    {
        if (Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
            return;

        IsLoading = true;
        switch (TabIndex)
        {
            case 0:
                if (SelectedButtons == null)
                    return;

                foreach (var i in SelectedButtons)
                {
                    await MenuItemClick("remove", i, true);
                }
                SelectedButtons = null;
                break;
            case 1:
                if (SelectedModals == null)
                    return;

                foreach (var i in SelectedModals)
                {
                    await MenuItemClick("remove", i, true);
                }
                SelectedModals = null;
                break;
        }
        IsLoading = false;
        await RefreshInteractions();
    }

    void ShowContextMenuWithManageItems(IDiscordAppInteraction item, MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem() { Text = "Enable Interaction", Value = "enable", Icon = "play_arrow", Disabled = IsLoading || item.IsEnabled || Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands) },
                new ContextMenuItem() { Text = "Disable Interaction", Value = "disable", Icon = "pause", Disabled = IsLoading || !item.IsEnabled || Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands) },
                new ContextMenuItem() { Text = "Clear Data", Value = "clear", Icon = "delete_history", Disabled = IsLoading || !item.IsEnabled || Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageWorkspaces) },
                new ContextMenuItem() { Text = "Remove Interaction", Value = "remove", Icon = "delete", Disabled = IsLoading || Member == null || !Member.HasAppPermission(Team, App, AppPermission.ManageCommands) },
                new ContextMenuItem() { Text = "Copy Interaction ID", Value = "copy", Icon = "content_copy" }
                                             }, x => MenuItemClick(x.Value.ToString(), item));
    }

    async Task MenuItemClick(string value, IDiscordAppInteraction item, bool isSelected = false)
    {
        if (App == null || Member == null)
            return;

        if (!isSelected)
        {
            ContextMenuService.Close();
            IsLoading = true;
        }

        switch (value)
        {
            case "copy":
                try
                {
                    await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", item.Name);
                }
                catch { }
                break;
            case "enable":
                {
                    if (!Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
                        return;

                    switch (TabIndex)
                    {
                        case 0:
                            {
                                bool CurrentState = bool.Parse(item.IsEnabled.ToString());
                                item.IsEnabled = true;
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ButtonInteractions, App.ButtonInteractions));
                                if (!Result.IsAcknowledged)
                                    item.IsEnabled = CurrentState;
                            }
                            break;
                        case 1:
                            {
                                bool CurrentState = bool.Parse(item.IsEnabled.ToString());
                                item.IsEnabled = true;
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ModalInteractions, App.ModalInteractions));
                                if (!Result.IsAcknowledged)
                                    item.IsEnabled = CurrentState;
                            }
                            break;
                    }
                }
                break;
            case "disable":
                {
                    if (!Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
                        return;

                    switch (TabIndex)
                    {
                        case 0:
                            {
                                bool CurrentState = bool.Parse(item.IsEnabled.ToString());
                                item.IsEnabled = false;
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ButtonInteractions, App.ButtonInteractions));
                                if (!Result.IsAcknowledged)
                                    item.IsEnabled = CurrentState;
                            }
                            break;
                        case 1:
                            {
                                bool CurrentState = bool.Parse(item.IsEnabled.ToString());
                                item.IsEnabled = false;
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ModalInteractions, App.ModalInteractions));
                                if (!Result.IsAcknowledged)
                                    item.IsEnabled = CurrentState;
                            }
                            break;
                    }
                }
                break;
            case "clear":
            if (!Member.HasAppPermission(Team, App, AppPermission.ManageWorkspaces))
                        return;

                WorkspaceData? workspace = _DB.Workspaces.Collection.Find(new FilterDefinitionBuilder<WorkspaceData>().Eq(x => x.Id, item.WorkspaceId)).FirstOrDefault();
                if (workspace != null)
                {
                    await workspace.UpdateAsync(new UpdateDefinitionBuilder<WorkspaceData>().Set(x => x.JsonData, null), () =>
                    {
                        workspace.JsonData = null;
                    });
                }
                break;
            case "remove":
                {
                    if (!Member.HasAppPermission(Team, App, AppPermission.ManageCommands))
                        return;

                    switch (TabIndex)
                    {
                        case 0:
                            {
                                App.ButtonInteractions.Remove(item.Name);
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ButtonInteractions, App.ButtonInteractions));
                                if (!Result.IsAcknowledged)
                                    App.ButtonInteractions.Add(item.Name, item);
                                else
                                {
                                    if (item.WorkspaceId.HasValue)
                                        await _DB.Workspaces.DeleteAsync(item.WorkspaceId.Value);
                                }
                            }
                            break;
                        case 1:
                            {
                                App.ModalInteractions.Remove(item.Name);
                                UpdateResult Result = await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
                                .Set(x => x.ModalInteractions, App.ModalInteractions));
                                if (!Result.IsAcknowledged)
                                    App.ModalInteractions.Add(item.Name, item);
                                else
                                {
                                    if (item.WorkspaceId.HasValue)
                                        await _DB.Workspaces.DeleteAsync(item.WorkspaceId.Value);
                                }
                            }
                            break;
                    }
                }
                break;
        }

        if (!isSelected)
        {
            IsLoading = false;
            await RefreshInteractions();
        }
    }
}
