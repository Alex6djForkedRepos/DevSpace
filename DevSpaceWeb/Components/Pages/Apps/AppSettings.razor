@using DevSpaceWeb.Apps.Data
@using DevSpaceWeb.Components.Dialogs.Servers
@using DevSpaceWeb.Data.Consoles
@inject DialogService Dialogs
@inject NavigationManager Nav

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><iconify-icon icon="mdi:gear"></iconify-icon></div>
        <RadzenText TextStyle="TextStyle.H6">Settings</RadzenText>
    </div>
    <br />
    <RadzenStack Gap="10px" JustifyContent="JustifyContent.Left" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/apps/" + Session.Selected.Team?.Resource?.VanityUrl + "/settings")">
            <RadzenCard class="@("rz-p-1 rz-text-align-center settings-item" + (Member != null && Member.HasAppPermission(Team, App, AppPermission.ManageApp) ? "" : " settings-item-disabled"))">
                <iconify-icon icon="mdi:gear"></iconify-icon>
                <RadzenText TextStyle="TextStyle.H6">Settings</RadzenText>
            </RadzenCard>
        </a>
        <a href="@("/teams/" + Session.Selected.Team?.VanityUrl + "/apps/" + Session.Selected.Team?.Resource?.VanityUrl + "/permissions")">
            <RadzenCard class="@("rz-p-1 rz-text-align-center settings-item" + (Member != null && Member.HasAppPermission(Team, App, AppPermission.ViewPermissions) ? "" : " settings-item-disabled"))">
                <iconify-icon icon="mdi:shield-key"></iconify-icon>
                <RadzenText TextStyle="TextStyle.H6">Permissions</RadzenText>
            </RadzenCard>
        </a>
    </RadzenStack>
</div>

<div class="dash-box dash-box-content">
    <div class="dash-box-header">
        <div class="dash-box-icon"><iconify-icon icon="mdi:gear"></iconify-icon></div>
        <RadzenText TextStyle="TextStyle.H6">Manage</RadzenText>
    </div>
    <br />
    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">ID</RadzenText>
    <RadzenText TextStyle="TextStyle.Body2">
        @App?.Id
        <CopyClipboard Value="@App?.Id.ToString()"></CopyClipboard>
    </RadzenText>

    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Owner</RadzenText>
    <RadzenUserSelector Team="@Team" UserId="@App?.OwnerId" ActionDisabled="@(Member == null || Program.IsPreviewMode || !Member.CanOwn(App))" OnSelected="@ChangeOwner"></RadzenUserSelector>
    <br />
    <RadzenButton Click="@Delete" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Text="Delete App" Disabled="@(Member == null || !Member.HasAppPermission(Team, App, AppPermission.DeleteAppResource))" />
</div>

<style>
    .settings-item {
        width: 120px;
        height: 120px;
        cursor: pointer;
    }

        .settings-item iconify-icon {
            font-size: 30px;
            margin-top: 16px;
            color: var(--rz-info);
        }

        .settings-item .rz-text-h6 {
            margin-top: 14px;
            font-size: 1.1rem;
            color: var(--rz-base-200) !important;
        }

    .rz-stack a {
        text-decoration: none !important;
    }

    .settings-item:hover {
        background-color: var(--rz-base-dark);
        outline: solid 1px var(--rz-secondary-dark) !important;
    }

    .settings-item-disabled {
        opacity: 0.6;
        cursor: not-allowed !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public AppData? App => Session.Selected.Resource as AppData;

    public string? OwnerUser { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        if (App != null)
        {
            if (_DB.Users.TryGetValue(App.OwnerId, out PartialUserData? user))
                OwnerUser = user.UserName;
            else
                OwnerUser = "Unknown?";

        }
    }

    public async Task Delete()
    {
        if (App == null || Member == null || !Member.HasAppPermission(Team, App, AppPermission.DeleteAppResource))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Delete App", "Are you sure your want to delete this?.", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (!Member.HasAppPermission(Team, App, AppPermission.DeleteAppResource))
            return;

        await App.DeleteAsync(Member, () =>
        {
            Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/apps");
        });

    }


    public async Task ChangeOwner(PartialUserData user)
    {
        if (App == null || Member == null || !Member.CanOwn(App))
            return;

        bool Confirm = await Dialogs.ShowConfirmAsync("Change Ownership", "Change app owner.", "Confirm", ButtonStyle.Success);

        if (!Confirm)
            return;

        if (!Member.CanOwn(App))
            return;

        await App.UpdateAsync(new UpdateDefinitionBuilder<AppData>()
        .Set(x => x.OwnerId, user.Id), () =>
        {
            App.OwnerId = user.Id;
            OwnerUser = user.UserName;

            _ = _DB.AuditLogs.CreateAsync(new AuditLog(Member, AuditLogCategoryType.Member, AuditLogEventType.AppOwnershipChanged)
            .SetTarget(App)
            .AddProperty("User", user.UserName)
            .AddProperty("ID", user.Id.ToString()));

            StateHasChanged();
        });
    }
}
