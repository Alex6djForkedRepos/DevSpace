@inject ContextMenuService ContextMenuService
@inject NavigationManager Nav
@inject IJSRuntime JS

<div class="nav-list nav-list-sub nav-team">
    <RadzenLink Path="@("/teams/" + Session.Selected.Team?.VanityUrl)" ContextMenu="@((arg) => ShowContextMenuWithContent(arg))">
        <div class="rz-navigation-item-wrapper selected-team mb-2">
            <img src="@Session.Selected.Team?.Data.GetIconOrDefault()" style="border-radius: 20%;" />
            <h5 style="color: var(--rz-menu-top-item-color) !important; text-decoration: none !important; height: 40px;">@Session.Selected.Team?.Data.Name</h5>
        </div>
    </RadzenLink>
    <RadzenPanelMenu>
        @* @if (Team != null && Team.Proxmox != null && !string.IsNullOrEmpty(Team.Proxmox.Secret))
        {
            <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/proxmox")" class="nav-link-server" Match="NavLinkMatch.All">
                <Template>
                <iconify-icon icon="mdi:network-pos"></span>
                <p>
                    Proxmox
                </p>
                </Template>
            </RadzenPanelMenuItem>
        } *@
        <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/apps")" class="nav-link-server" Match="NavLinkMatch.All">
            <Template>
                <iconify-icon icon="mdi:rocket-launch"></iconify-icon>
                <p>
                    Apps
                </p>
            </Template>
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/servers")" class="nav-link-server" Match="NavLinkMatch.All">
            <Template>
                <iconify-icon icon="mdi:server"></iconify-icon>
                <p>
                    Servers
                </p>
            </Template>
        </RadzenPanelMenuItem>
        @if (!Program.LimitMode)
        {
            <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/consoles")" class="nav-link-server" Match="NavLinkMatch.All">
                <Template>
                    <iconify-icon icon="mdi:console-line"></iconify-icon>
                    <p>
                        Consoles
                    </p>
                </Template>
            </RadzenPanelMenuItem>
            <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/logs")" class="nav-link-server" Match="NavLinkMatch.All">
                <Template>
                    <iconify-icon icon="mdi:warning"></iconify-icon>
                    <p>Logs</p>
                </Template>
            </RadzenPanelMenuItem>

            @if (Program.IsDevMode)
            {
                <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/status")" class="nav-link-server" Match="NavLinkMatch.All">
                    <Template>
                        <iconify-icon icon="mdi:information"></iconify-icon>
                        <p>Status</p>
                    </Template>
                </RadzenPanelMenuItem>
            }
            <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/projects")" class="nav-link-server" Match="NavLinkMatch.All">
                <Template>
                    <iconify-icon icon="mdi:lightbulb"></iconify-icon>
                    <p>Projects</p>
                </Template>
            </RadzenPanelMenuItem>
            @* <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/websites")" class="nav-link-web" Match="NavLinkMatch.All">
        <Template>
            <iconify-icon icon="mdi:web"></span>
            <p>Websites</p>
        </Template>
    </RadzenPanelMenuItem>
    
    <RadzenPanelMenuItem Path="@("/teams/" + Session.Selected.Team?.VanityUrl + "/logs")" class="nav-link-errors" Match="NavLinkMatch.All">
        <Template>
            <iconify-icon icon="mdi:warning"></span>
            <p>Error Logs (Sentry)</p>
        </Template>
    </RadzenPanelMenuItem> *@

        }
    </RadzenPanelMenu>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    [Parameter]
    public bool StateChange { get; set; }

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    void ShowContextMenuWithContent(MouseEventArgs args) => ContextMenuService.Open(args, new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Members", Icon = "group", Disabled = Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewMembers) },
                new ContextMenuItem(){ Text = "Roles", Icon = "sell", Disabled = Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewRoles) },
                new ContextMenuItem(){ Text = "Audit Logs", Icon = "format_list_bulleted", Disabled = Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewAuditLogs) },
                new ContextMenuItem(){ Text = "API", Icon = "smart_toy", Disabled = Member == null || !Member.HasAPIPermission(Team, APIPermission.ViewOwnAPIs) && !Member.HasAPIPermission(Team, APIPermission.ViewAllAPIs) },
                new ContextMenuItem() { Text = "Copy Team ID", Icon = "content_copy" }
         }, OnMenuItemClick);

    void OnMenuItemClick(MenuItemEventArgs arg)
    {
        switch (arg.Text)
        {
            case "Members":
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/settings/members");
                break;
            case "Roles":
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/settings/roles");
                break;
            case "Permissions":
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/settings/permissions");
                break;
            case "Audit Logs":
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/settings/audit");
                break;
            case "API":
                Nav.NavigateTo("/teams/" + Session.Selected.Team?.VanityUrl + "/settings/api");
                break;
            case "Copy Team ID":
                JS.CopyTextAsync(Session.Selected.Team?.Id);
                break;
        }
        ContextMenuService.Close();
    }
}
