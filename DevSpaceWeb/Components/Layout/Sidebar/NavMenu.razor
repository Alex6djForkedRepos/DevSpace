@using DevSpaceWeb.Components.Layout.Nav
@implements IDisposable

<div class="pl-2 pr-2 mt-2 mobile-only">
    <NavSearch IsMobile="true"></NavSearch>
    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="8px" class="mt-2">
        @* <NavInfo></NavInfo>
        <NavTools></NavTools>
        <NavBookmarks></NavBookmarks>
        <NavNotifications></NavNotifications> *@
    </RadzenStack>
</div>

<div class="sidebar-nav">
    <RadzenPanelMenu Match="NavLinkMatch.All">
        <RadzenPanelMenuItem Path="@("/")" Match="NavLinkMatch.All" Style="font-size: var(--rz-text-subtitle1-font-size);">
            <Template>
                <iconify-icon icon="mdi:view-dashboard"></iconify-icon>
                <p>
                    Dashboard
                </p>
            </Template>
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Path="@("/previews")" Match="NavLinkMatch.Prefix" Style="font-size: var(--rz-text-subtitle1-font-size);">
            <Template>
                <iconify-icon icon="mdi:lightbulb"></iconify-icon>
                <p>
                    Previews
                </p>
            </Template>
        </RadzenPanelMenuItem>

        @if (Session.Selected.Team != null)
        {
            <NavTeam StateChange="@StateChange"></NavTeam>

        }
    </RadzenPanelMenu>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public bool StateChange { get; set; } = false;

    protected override void OnInitialized()
    {
        Session.EventNavMenuChange += UpdateState;
    }

    void IDisposable.Dispose()
    {
        Session.EventNavMenuChange -= UpdateState;
    }

    public void UpdateState(object? sender, EventArgs e)
    {
        StateChange = !StateChange;
        StateHasChanged();
    }
}
