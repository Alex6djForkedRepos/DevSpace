@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService

<RadzenButton @ref="@RoleButton" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Role" Click="@(() => RolePopup.ToggleAsync(RoleButton.Element))" />
<RadzenButton @ref="@MemberButton" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Member" Click="@(() => MemberPopup.ToggleAsync(MemberButton.Element))" />

<Popup @ref="@RolePopup" Lazy="true" class="permission-popup">
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-1">
        <RadzenListBox TValue="TeamRoleData" ValueChanged="@((el) => Console.WriteLine("Selected " + el.Name))" AllowVirtualization="true"
        AllowFiltering="true" Data="@Team.CachedRoles.Values" TextProperty="@nameof(TeamRoleData.Name)" Style="width: 100%; height: 100%"
        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />
    </RadzenStack>
</Popup>

<Popup @ref="@MemberPopup" Lazy="true" class="permission-popup">
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-1">
        @* <RadzenListBox TValue="TeamMemberData" ValueChanged="@((el) => Console.WriteLine("Selected " + el.NickName))" AllowVirtualization="true"
                       AllowFiltering="true" Data="@Team.CachedMembers.Values" Style="width: 100%; height: 100%"
                       InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select member" }})" /> *@
    </RadzenStack>
</Popup>

<br />
<RadzenRow Gap="0.2rem">
    <RadzenColumn Size="3" class=" rz-py-2 pr-2">
        <RadzenLabel Text="Role Permissions" class="rz-my-0 mb-2"></RadzenLabel>
        <RadzenListBox @bind-Value="@SelectedPermission" Change="@(() => Permissions = SelectedPermission.Permissions.Clone())" Data="@RoleOverrides" Disabled="@UnsavedPermissions"
        TextProperty="@nameof(ResourcePermissionItem.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
        Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" />

        <br />
        <br />

        <RadzenLabel Text="User Permissions" class="rz-my-0 mb-2"></RadzenLabel>
        <RadzenListBox @bind-Value="@SelectedPermission" Change="@(() => Permissions = SelectedPermission.Permissions.Clone())" Data="@MemberOverrides" Disabled="@UnsavedPermissions"
        TextProperty="@nameof(ResourcePermissionItem.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
        Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select user" }})" />
    </RadzenColumn>

    <RadzenColumn class="rz-py-2">
        @if (SelectedPermission != null)
        {
            <div class="role-info">
                <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">@SelectedPermission.Name</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @SelectedPermission.Description
                </RadzenText>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Delete Permission" Click="@DeleteOverride" />
            </div>

            <PermissionGrid PermissionType="PermissionType.All" Permissions="@Permissions" UnsavedPermissionsChanged="@((arg) => UnsavedPermissions = arg)"
            OnSave="@SavePermissions" OnLoad="@LoadPermissions"></PermissionGrid>
        }
    </RadzenColumn>
</RadzenRow>


<style>
    .role-box .rz-dropdown {
    width: 100% !important;
    }

    .permission-popup {
    display: none;
    position: absolute !important;
    overflow: hidden !important;
    height: 360px;
    width: 200px;
    border: var(--rz-panel-border);
    background-color: var(--rz-base-700);
    box-shadow: var(--rz-panel-shadow);
    border-radius: var(--rz-border-radius);
    }
</style>


@code {
    public System.Collections.Generic.IEnumerable<ResourcePermissionItem> RoleOverrides { get; set; }

    public System.Collections.Generic.IEnumerable<ResourcePermissionItem> MemberOverrides { get; set; }

    public RadzenButton RoleButton { get; set; }
    public RadzenButton MemberButton { get; set; }
    public Popup RolePopup { get; set; }
    public Popup MemberPopup { get; set; }

    public ResourcePermissionItem? SelectedPermission { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public TeamData Team => Session.Selected.Team.Data;
    public ServerData Server => Session.Selected.Server;

    //public bool PermissionsLoaded { get; set; }
    public bool UnsavedPermissions { get; set; }
    public PermissionsSet Permissions { get; set; }

    public void LoadPermissions()
    {
        Permissions = SelectedPermission.Permissions.Clone();
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        if (SelectedPermission.Name == "Default")
        {
            await Team.UpdateAsync(new UpdateDefinitionBuilder<TeamData>().Set(x => x.DefaultPermissions, perms), () =>
            {
                Team.DefaultPermissions = perms;
                SelectedPermission.Permissions = perms;
            });
            
        }
        else
        {
            //await SelectedPermission.UpdateAsync(new UpdateDefinitionBuilder<TeamRoleData>().Set(x => x.Permissions, perms));
            //SelectedPermission.Permissions = perms;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RoleOverrides == null)
        {
            RoleOverrides = Server.RolePermissionOverrides.Select(x => Team.CachedRoles.TryGetValue(x.Key, out TeamRoleData role) ? new ResourcePermissionItem
                {
                    Name = role.Name,
                    Description = role.Description,
                    Permissions = x.Value
                } : new ResourcePermissionItem { Name = "Unknown Role", Permissions = null });

            MemberOverrides = Server.MemberPermissionOverrides.Select(x => Team.CachedMembers.TryGetValue(x.Key, out TeamMemberData member) ? new ResourcePermissionItem
                {
                    Name = _DB.Users[member.UserId].UserName,
                    Permissions = x.Value
                } : new ResourcePermissionItem { Name = "Unknown Member", Permissions = null });
        }
    }

    public async Task AddRoleOverride()
    {

    }

    public async Task AddMemberOverride()
    {

    }

    public async Task DeleteOverride()
    {

    }
}
