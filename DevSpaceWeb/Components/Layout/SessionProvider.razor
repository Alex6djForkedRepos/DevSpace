@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Database
@using DevSpaceWeb.Fido2
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@using System.Text.Json
@using Microsoft.Extensions.Caching.Distributed
@using MongoDB.Bson
@inject NavigationManager NavigationManager
@inject UserManager<AuthUser> UserManager
@inject IJSRuntime JS
@inject IDistributedCache Cache
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpContextAccessor Http
@inject IDialogService DialogService
@inject IDistributedCache Cache
@implements IDisposable

@if (Ready)
{
    @switch (SessionError)
    {
        case SessionErrorType.HttpsRequired:
            {
                <MudThemeProvider IsDarkMode="true" />
                <MudPopoverProvider />
                <div class="dash-box dash-box-content" style="padding: 10px;">
                    <div class="dash-box-header">
                        <MudText Typo="Typo.h6">Http Error</MudText>
                    </div>
                    <br />
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">A secure https connection is required to use this.</MudAlert>
                </div>
            }
            break;
        case SessionErrorType.SessionSecurityError:
            {
                <MudThemeProvider IsDarkMode="true" />
                <MudPopoverProvider />
                <div class="dash-box dash-box-content" style="padding: 10px;">
                    <div class="dash-box-header">
                        <MudText Typo="Typo.h6">Session Security Error</MudText>
                    </div>
                    <br />
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">This instance has been incorrectly configured or is using local host ip for connection.</MudAlert>
                </div>
            }
            break;
        case SessionErrorType.AuthenticationError:
            {
                <MudThemeProvider IsDarkMode="true" />
                <MudPopoverProvider />
                <div class="dash-box dash-box-content" style="padding: 10px;">
                    <div class="dash-box-header">
                        <MudText Typo="Typo.h6">Authentication Error</MudText>
                    </div>
                    <br />
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Authentication error has occured.</MudAlert>
                </div>
            }
            break;
        case SessionErrorType.AuthenticationRequired:
            {
                <MudThemeProvider IsDarkMode="true" />
                <MudPopoverProvider />
                <DevSpaceWeb.Components.Auth.LoginPage></DevSpaceWeb.Components.Auth.LoginPage>
            }
            break;
        default:
            {

                @if (_Data.Config.isFullySetup)
                {
                    @if (!_DB.IsConnected)
                    {
                        <MudThemeProvider IsDarkMode="true" />
                        <MudPopoverProvider />
                        <div class="dash-box dash-box-content" style="padding: 10px;">
                            <div class="dash-box-header">
                                <MudText Typo="Typo.h6">Database Error</MudText>
                            </div>
                            <br />
                            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Can't connect to database.</MudAlert>
                        </div>
                    }
                    else
                    {
                        <CascadingValue Value="@this">
                            @ChildContent
                        </CascadingValue>
                    }
                }
                else
                {
                    <CascadingValue Value="@this">
                        @ChildContent
                    </CascadingValue>
                }

            }
            break;
    }
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public AuthenticationState State { get; set; }

    public SelectedSessionData Selected = new SelectedSessionData();

    public bool Ready = false;

    public int UserDateOffset { get; set; }

    public SessionErrorType SessionError { get; set; }

    public async Task<AuthUser?> GetCurrentUserAsync()
    {
        return await UserManager.GetUserAsync(State.User)!;
    }

    public async Task<bool> TriggerTwoFactorAuthentication(AuthUser user, bool logUsage)
    {
        var parameters = new DialogParameters<TwoFactorVerifyDialog>
        {
            { x => x.LogUsage, logUsage },
            { x => x.User, user }
        };

        var Dialog = await DialogService.ShowAsync<TwoFactorVerifyDialog>("2FA Verification", parameters, new DialogOptions
            {
                MaxWidth = MaxWidth.Medium
            });

        if (Dialog != null)
        {
            var Result = await Dialog.Result;
            if (Result != null && !Result.Canceled)
                return true;
        }

        return false;
    }

    public async Task<bool> TestPasskey(bool logUsage)
    {
        Console.WriteLine("Test Passkey");
        AuthUser? user = await GetCurrentUserAsync();
        if (user == null)
            return false;

        bool IsSuccess = false;
        string PasskeyRequestId = Guid.NewGuid().ToString();
        Console.WriteLine("Req: " + PasskeyRequestId);
        Cache.SetString("passkey-" + PasskeyRequestId, JsonSerializer.Serialize(new Fido2Request(user.Id, logUsage)), new DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(2)));
        try
        {
            IsSuccess = await JS.InvokeAsync<bool>("passkeyStartAuth", PasskeyRequestId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        string? Data = Cache.GetString("passkey-" + PasskeyRequestId);
        if (!string.IsNullOrEmpty(Data))
        {
            Console.WriteLine("Parse Passkey");
            Fido2Request? RequestData = JsonSerializer.Deserialize<Fido2Request?>(Data);
            if (RequestData != null && RequestData.UserId == user.Id)
            {
                Console.WriteLine("Got: " + RequestData.IsSuccess);
                IsSuccess = RequestData.IsSuccess;
            }
        }

        Console.WriteLine("Success: " + IsSuccess);

        return IsSuccess;
    }

    public ObjectId? CurrentUserId { get; set; }

    [CascadingParameter] public HttpContext? HttpContext { get; set; }

    string GetUserIpAddress(HttpContext context)
    {
        // Test ip in development
        if (Program.IsDevMode)
            return "1.2.3.4";

        // Check CF-Connecting-IP header
        if (!string.IsNullOrEmpty(context.Request.Headers["CF-CONNECTING-IP"]))
            return context.Request.Headers["CF-CONNECTING-IP"];

        // Check X-Forwarded-For header
        if (!string.IsNullOrEmpty(context.Request.Headers["X-Forwarded-For"]))
            return context.Request.Headers["X-Forwarded-For"];

        return "";
    }

    public string Ip;

    protected override async Task OnInitializedAsync()
    {
        if (!Http.HttpContext.Request.IsHttps)
        {
            SessionError = SessionErrorType.HttpsRequired;
            return;
        }
        Ip = GetUserIpAddress(Http.HttpContext);
        State = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserDateOffset = await JS.InvokeAsync<int>("GetUserTimezoneOffset");
        string Path = NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length);

        if (!_Data.Config.isFullySetup && Path != "admin/setup")
        {
            NavigationManager.NavigateTo("admin/setup", true);
            return;
        }

        if (Path.StartsWith("admin"))
        {
            Ready = true;
            return;
        }

        if (string.IsNullOrEmpty(Ip) || Ip == "127.0.0.1")
        {
            SessionError = SessionErrorType.SessionSecurityError;
        }

        if (State == null)
        {
            SessionError = SessionErrorType.AuthenticationError;
        }
        else if (!State.User.Identity.IsAuthenticated)
        {
            SessionError = SessionErrorType.AuthenticationRequired;
        }
        else
        {
            _DB.SessionUpdated += SessionChangedEvent;
            var User = await GetCurrentUserAsync();
            CurrentUserId = User.Id;
            if (!User.Auth.Sessions.ContainsKey(Utils.GetStringSha256Hash(Ip)))
                SessionError = SessionErrorType.SessionSecurityNewIp;
        }
        Ready = true;
    }



    public void SessionChangedEvent(object sender, ObjectId user, SessionEventType type)
    {
        if (CurrentUserId == null || CurrentUserId != user || type != SessionEventType.Logout)
            return;

        _ = InvokeAsync(StateHasChanged);

    }

    public void Dispose()
    {
        _DB.SessionUpdated -= SessionChangedEvent;
    }


    public void TriggerChange()
    {
        this.StateHasChanged();
    }

    public enum SessionErrorType
    {
        None, HttpsRequired, SessionSecurityError, SessionSecurityNewIp, AuthenticationError, AuthenticationRequired
    }

}