@using DevSpaceWeb.Components.Auth
@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Data.Users
@using DevSpaceWeb.Database
@using DevSpaceWeb.Fido2
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@using System.Text.Json
@using Microsoft.Extensions.Caching.Distributed
@using MongoDB.Bson
@using System.Globalization
@inject NavigationManager NavigationManager
@inject UserManager<AuthUser> UserManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpContextAccessor Http
@inject DialogService DialogService
@inject NotificationService NotificationService
@implements IDisposable
@inject IMemoryCache Cache

@if (SessionError != SessionErrorType.Loading)
{
    @if (SessionError == SessionErrorType.Success)
    {
        <CascadingValue Value="@this">
            @ChildContent
        </CascadingValue>
    }
    else
    {
        <CascadingValue Value="@this">
            <RadzenComponents />
            <RadzenLayout>
                <RadzenBody>
                    @switch (SessionError)
                    {
                        case SessionErrorType.HttpsRequired:
                            {
                                <div class="dash-box dash-box-content dash-center">
                                    <div class="dash-box-header">
                                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:warning"></span></div>
                                        <RadzenText TextStyle="TextStyle.H6">Http Error</RadzenText>
                                    </div>
                                    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                        A secure https connection is required to use this.
                                    </RadzenAlert>
                                </div>
                            }
                            break;
                        case SessionErrorType.SessionSecurityError:
                            {
                                <div class="dash-box dash-box-content dash-center">
                                    <div class="dash-box-header">
                                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:warning"></span></div>
                                        <RadzenText TextStyle="TextStyle.H6">Session Security Error</RadzenText>
                                    </div>
                                    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                        This instance has been incorrectly configured or is using local host ip for connection, check your nginx config if forwarded headers are set properly.
                                    </RadzenAlert>
                                </div>
                            }
                            break;
                        case SessionErrorType.SessionError:
                            {
                                <div class="dash-box dash-box-content dash-center">
                                    <div class="dash-box-header">
                                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:warning"></span></div>
                                        <RadzenText TextStyle="TextStyle.H6">Session Error</RadzenText>
                                    </div>
                                    @if (WebSocketTest == "no")
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                            Failed to use websockets this could be disabled by cloudflare or nginx config does not have the Upgrade and Connection headers set.
                                        </RadzenAlert>
                                    }
                                    else if (WebSocketTest == "fail")
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                            Failed to make a request to the server this could be caused by nginx configuration issue.
                                        </RadzenAlert>
                                    }
                                    else
                                    {
                                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                            Failed to create a session this could be a server/nginx misconfiguration, cloudflare websocket disable, browser issue or other issues.
                                        </RadzenAlert>
                                    }
                                </div>
                            }
                            break;
                        case SessionErrorType.AuthenticationError:
                            {
                                <div class="dash-box dash-box-content dash-center">
                                    <div class="dash-box-header">
                                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:warning"></span></div>
                                        <RadzenText TextStyle="TextStyle.H6">Authentication Error</RadzenText>
                                    </div>
                                    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                        Authentication error has occured.
                                    </RadzenAlert>
                                </div>
                            }
                            break;
                        case SessionErrorType.DatabaseError:
                            {
                                <div class="dash-box dash-box-content dash-center">
                                    <div class="dash-box-header">
                                        <div class="dash-box-icon"><span class="iconify" data-icon="mdi:warning"></span></div>
                                        <RadzenText TextStyle="TextStyle.H6">Database Error</RadzenText>
                                    </div>
                                    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                                        Failed to connect to the database.
                                    </RadzenAlert>
                                </div>
                            }
                            break;
                        case SessionErrorType.AuthenticationRequired:
                            {
                                <LoginPage></LoginPage>
                            }
                            break;
                        case SessionErrorType.SessionSecurityNew:
                            {
                                <NewSessionPage></NewSessionPage>
                            }
                            break;
                        case SessionErrorType.AccountDisabled:
                            {
                                <AccountDisabled></AccountDisabled>
                                break;
                            }
                    }
                </RadzenBody>
            </RadzenLayout>
        </CascadingValue>
    }

    <style>
        .loading {
        display: none !important;
        }
    </style>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    or get support
    <a href="https://discord.gg/fluxpoint" target="_blank"></a>
</div>

@if (!string.IsNullOrEmpty(BackgroundUrl))
{
    <style>
        html {
        background-image: url("@BackgroundUrl") !important;
        }
    </style>
}


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public event EventHandler EventNavMenuChange;

    public void TriggerNavMenuChange()
    {
        EventNavMenuChange?.Invoke(this, null);
    }

    public NotificationService Notifications => NotificationService;

    public AuthenticationState State { get; set; }

    public SelectedSessionData Selected = new SelectedSessionData();

    public string? BackgroundUrl { get; set; } = "https://cdn.fluxpoint.dev/devspace/background.webp";

    public int UserDateOffset { get; set; }
    public DateFormatLang UserDateFormat { get; set; } = DateFormatLang.MDY_Slash;

    public SessionErrorType SessionError { get; set; }

    public bool IsInstanceAdmin { get; set; }

    public string? WebSocketTest { get; set; }

    public async Task<AuthUser?> GetCurrentUserAsync()
    {
        return await UserManager.GetUserAsync(State.User)!;
    }

    public string? CurrentCountry { get; set; }

    public async Task<string> GetCountryAsync()
    {
        if (string.IsNullOrWhiteSpace(CurrentCountry))
            CurrentCountry = await JS.InvokeAsync<string>("window.Auth.getCountry");

        return CurrentCountry;
    }

    public void ShowPreviewModeNotice()
    {
        _ = DialogService.ShowInfoAsync("Preview Mode", "This feature is not available in preview mode.");
    }

    public DateTime? TwoFactorTimeout = null;

    public async Task<bool> TriggerTwoFactorAuthentication(AuthUser? user, bool logUsage, bool forceVerify)
    {
        if (user == null)
            return false;

        if (!forceVerify && TwoFactorTimeout != null && TwoFactorTimeout > DateTime.UtcNow)
            return true;

        DialogOptions options = new DialogOptions() { };

        dynamic Dialog = await DialogService.OpenAsync<TwoFactorVerifyDialog>("2FA Verification", new Dictionary<string, object>()
        {
            { "LogUsage", logUsage }
        }, options);


        if (Dialog == null)
            return false;

        bool Result = (bool)Dialog;
        if (Result)
        {
            TwoFactorTimeout = DateTime.UtcNow.AddMinutes(15);
        }

        return Result;
    }

    public async Task<bool> TestPasskey(bool logUsage)
    {
        AuthUser? user = await GetCurrentUserAsync();
        if (user == null)
            return false;

        bool IsSuccess = false;
        string PasskeyRequestId = Guid.NewGuid().ToString();
        Cache.Set("passkey-" + PasskeyRequestId, new AuthRequest(user.Id, logUsage), new TimeSpan(0, 5, 0));
        try
        {
            IsSuccess = await JS.InvokeAsync<bool>("window.Passkey.passkeyStartAuth", PasskeyRequestId);
        }
        catch (Exception ex)
        {
            Logger.LogMessage(ex.ToString(), LogSeverity.Error);
        }
        AuthRequest? Data = Cache.Get<AuthRequest>("passkey-" + PasskeyRequestId);
        user = await GetCurrentUserAsync();
        if (user != null && IsSuccess && Data != null && Data.IsSuccess && Data.UserId == user.Id)
            IsSuccess = Data.IsSuccess;
        return IsSuccess;
    }

    public PartialUserData? CurrentUser { get; private set; }
    public string CurrentSessionId { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        HttpContext? HttpContext = Http.HttpContext;
        if (HttpContext == null)
        {
            try
            {
                WebSocketTest = await JS.InvokeAsync<string>("window.Utils.testWebSocket");
            }
            catch { }
            SessionError = SessionErrorType.SessionError;
            return;
        }

        if (!HttpContext.Request.IsHttps)
        {
            SessionError = SessionErrorType.HttpsRequired;
            return;
        }


        string Ip = Utils.GetUserIpAddress(HttpContext);
        if (!_Data.Config.Instance.Features.AllowLocalhost && (string.IsNullOrEmpty(Ip) || Ip == "127.0.0.1"))
        {
            SessionError = SessionErrorType.SessionSecurityError;
            return;
        }

        State = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        try
        {
            UserDateOffset = await JS.InvokeAsync<int>("window.Utils.getUserTimezoneOffset");
        }
        catch { }
        string Path = NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length);

        if (!_Data.Config.IsFullySetup && Path != "admin/setup")
        {
            NavigationManager.NavigateTo("admin/setup", true);
            return;
        }
        try
        {
            UserDateFormat = Utils.GetDateFormat(HttpContext.Request.Headers["Accept-Language"].ToString().Split(',').First().Split(';').First().ToLower());
        }
        catch
        {
            UserDateFormat = DateFormatLang.Automatic;
        }

        if (Path.StartsWith("admin", StringComparison.OrdinalIgnoreCase))
        {
            if (State.User.Identity != null && State.User.Identity.IsAuthenticated)
            {
                AuthUser? User = await GetCurrentUserAsync();
                if (User == null)
                {
                    SessionError = SessionErrorType.AuthenticationError;
                    return;
                }

                CurrentUser = _DB.Users[User.Id];
                if (User.Settings.DateFormat != DateFormatLang.Automatic)
                    UserDateFormat = User.Settings.DateFormat;

                IsInstanceAdmin = User.IsInstanceAdmin;
                string? SessionId = HttpContext.Request.Cookies["DevSpace.SessionId"];
                if (string.IsNullOrEmpty(SessionId))
                {
                    NavigationManager.NavigateTo("/logout", true);
                    return;
                }
                CurrentSessionId = SessionId;

                bool NewLogin = !User.Account.Sessions.TryGetValue(SessionId, out UserSession? session);
                if (!NewLogin && session != null && !session.AuthorizedIps.Contains(Utils.GetStringSha256Hash(Ip)))
                {
                    if (_DB.Users.Keys.Count() == 1 && User.Account.Sessions.Count() == 1 && !session.AuthorizedIps.Any())
                    {
                        session.AuthorizedIps.Add(Utils.GetStringSha256Hash(Ip));
                        await UserManager.UpdateAsync(User);
                    }
                    else
                        NewLogin = true;
                }


                if (NewLogin)
                {
                    SessionError = SessionErrorType.SessionSecurityNew;
                    return;
                }
            }
        }
        else
        {
            if (State == null)
            {
                SessionError = SessionErrorType.AuthenticationError;
                return;
            }
            else if (!_DB.IsConnected || _DB.HasException)
            {
                SessionError = SessionErrorType.DatabaseError;
                return;
            }
            else if (State.User.Identity == null || !State.User.Identity.IsAuthenticated)
            {
                SessionError = SessionErrorType.AuthenticationRequired;
                return;
            }
            else
            {
                _DB.SessionUpdated += SessionChangedEvent;

                AuthUser? User = await GetCurrentUserAsync();
                if (User == null)
                {
                    SessionError = SessionErrorType.AuthenticationError;
                    return;
                }

                CurrentUser = _DB.Users[User.Id];
                if (User.Settings.DateFormat != DateFormatLang.Automatic)
                    UserDateFormat = User.Settings.DateFormat;

                IsInstanceAdmin = User.IsInstanceAdmin;
                if (User.Disabled != null)
                {
                    SessionError = SessionErrorType.AccountDisabled;
                    return;
                }

                if (User.Background.Id.HasValue)
                    BackgroundUrl = User.Background.Url("webp");

                if (!Program.IsPreviewMode)
                {
                    string? SessionId = HttpContext.Request.Cookies["DevSpace.SessionId"];
                    if (string.IsNullOrEmpty(SessionId))
                    {
                        NavigationManager.NavigateTo("/logout", true);
                        return;
                    }
                    CurrentSessionId = SessionId;

                    bool NewLogin = !User.Account.Sessions.TryGetValue(SessionId, out UserSession? session);
                    if (!NewLogin && session != null && !session.AuthorizedIps.Contains(Utils.GetStringSha256Hash(Ip)))
                    {
                        if (_DB.Users.Keys.Count() == 1 && User.Account.Sessions.Count() == 1 && !session.AuthorizedIps.Any())
                        {
                            session.AuthorizedIps.Add(Utils.GetStringSha256Hash(Ip));
                            await UserManager.UpdateAsync(User);
                        }
                        else
                            NewLogin = true;
                    }


                    if (NewLogin)
                    {
                        SessionError = SessionErrorType.SessionSecurityNew;
                        return;
                    }
                }

            }
        }

        SessionError = SessionErrorType.Success;

    }



    public void SessionChangedEvent(ObjectId user, SessionEventType type)
    {
        if (CurrentUser == null || CurrentUser.Id != user || type != SessionEventType.Logout)
            return;

        _ = InvokeAsync(StateHasChanged);

    }

    public void Dispose()
    {
        _DB.SessionUpdated -= SessionChangedEvent;
    }


    public void TriggerChange()
    {
        this.StateHasChanged();
    }

    public enum SessionErrorType
    {
        Loading, SessionSecurityError, SessionError, HttpsRequired, SessionSecurityNew, AuthenticationError, AuthenticationRequired, DatabaseError, Success, AccountDisabled
    }

}