@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Components.Dialogs.Members
@using DevSpaceWeb.Components.Pages.Teams
@inject DialogService Dialogs

@if (Permissions != null)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Wrap="FlexWrap.Wrap" Gap="0.2rem">
        @if (PermissionType == PermissionType.All)
        {
            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:star"></span> Resource Permissions</RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@GlobalAdministrator" Disabled="@CheckDisabled(!CalculatedPermissions.TeamPermissions.HasFlag(TeamPermission.GlobalAdministrator))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="Global Administrator" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">All permissions for the team and resources.</span>
                </div>

                <div>
                    <RadzenDropDown @ref="ResourceGrid.Grid" @bind-Value="@ResourceGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })"
                                    Disabled="@(!PermissionsLoaded || GlobalAdministrator || IsDisabled)" ReadOnly="@CheckReadOnly()" Placeholder="Select permission..." AllowFiltering="true" Chips="true"
                                    Data="@ResourceGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" AllowSelectAll="false" TextProperty="Name"
                                    Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<ResourcePermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ResourcePermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<ResourcePermission>)!.Name)
                        </ValueTemplate>

                    </RadzenDropDown>
                </div>
            </RadzenStack>

            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:people-group"></span> Team Permissions</RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@TeamAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.TeamPermissions.HasFlag(TeamPermission.TeamAdministrator))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="Team Administrator" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">All team permissions.</span>
                </div>

                <div>
                    <RadzenDropDown @ref="TeamGrid.Grid" @bind-Value="@TeamGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })"
                                    Disabled="@(!PermissionsLoaded || GlobalAdministrator || TeamAdministrator || IsDisabled)" ReadOnly="@CheckReadOnly()" Placeholder="Select permission..." AllowFiltering="true" Chips="true"
                                    Data="@TeamGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" AllowSelectAll="false" TextProperty="Name"
                                    ItemRender="@((evnt) => TeamItemRender(evnt))" Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<TeamPermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<TeamPermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<TeamPermission>)!.Name)
                        </ValueTemplate>

                    </RadzenDropDown>
                </div>
            </RadzenStack>

            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:api"></span> API Permissions</RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@APIAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.APIPermissions.HasFlag(APIPermission.APIAdministrator))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="API Administrator" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">All API permissions.</span>
                </div>

                <div>
                    <RadzenDropDown @ref="APIGrid.Grid" @bind-Value="@APIGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })"
                                    Disabled="@(!PermissionsLoaded || GlobalAdministrator || APIAdministrator || IsDisabled)" ReadOnly="@CheckReadOnly()" Placeholder="Select permission..." AllowFiltering="true" Chips="true"
                                    Data="@APIGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" AllowSelectAll="false" TextProperty="Name"
                                    ItemRender="@((evnt) => APIItemRender(evnt))" Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<APIPermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<APIPermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<APIPermission>)!.Name)
                        </ValueTemplate>

                    </RadzenDropDown>
                </div>
            </RadzenStack>
        }

        @if (PermissionType == PermissionType.All || PermissionType == PermissionType.Server)
        {
            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1"><span class="iconify" data-icon="mdi:server"></span> Server Permissions</RadzenText>

                <RadzenText TextStyle="TextStyle.Body2" class="mt-1">
                    <strong>Server Administrator</strong> will grant all Docker Permissions.
                </RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@ServerAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.ServerPermissions.HasFlag(ServerPermission.ServerAdministrator))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="Server Administrator" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">Create and manage all server resources in the team.</span>
                </div>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@ViewServer" Disabled="@CheckDisabled(GlobalAdministrator || ServerAdministrator || !CalculatedPermissions.ServerPermissions.HasFlag(ServerPermission.ViewServer))" ReadOnly="@CheckReadOnly()" />
                    @if (Resource == null)
                    {
                        <RadzenLabel Text="View Servers" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">View all server resources for the team.</span>
                    }
                    else
                    {
                        <RadzenLabel Text="View Server" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">View this server resource.</span>
                    }
                </div>

                <div>
                    <RadzenDropDown @ref="ServerGrid.Grid" @bind-Value="@ServerGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                    AllowFiltering="true" Chips="true" Data="@ServerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => ServerItemRender(evnt))"
                                    Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(ServerAdministrator || !ViewServer)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<ServerPermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ServerPermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<ServerPermission>)!.Name)
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </RadzenStack>
        }

        @if (PermissionType == PermissionType.All || PermissionType == PermissionType.Server || PermissionType == PermissionType.Docker)
        {
            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:docker"></span> Docker Permissions</RadzenText>

                <RadzenText TextStyle="TextStyle.Body2" Style="">
                    Requires permission <strong>View Servers</strong> to use docker features.
                </RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@DockerAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || ServerAdministrator || !CalculatedPermissions.DockerPermissions.HasFlag(DockerPermission.DockerAdministrator))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="Docker Administrator" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">All docker permissions including system access.</span>
                </div>

                <div>
                    <RadzenDropDown @ref="DockerGrid.Grid" @bind-Value="@DockerGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                    AllowFiltering="true" Chips="true" Data="@DockerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => DockerItemRender(evnt))"
                                    Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || (DockerAdministrator) || ServerAdministrator)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<DockerPermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<DockerPermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<DockerPermission>)!.Name)
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </RadzenStack>

            <RadzenStack Gap="0" class="permission-grid-box">
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:docker"></span> Docker Container Permissions</RadzenText>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@ViewStacks" Disabled="@CheckDisabled(GlobalAdministrator || ServerAdministrator || DockerAdministrator || !CalculatedPermissions.DockerContainerPermissions.HasFlag(DockerContainerPermission.ViewStacks))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="View Stacks" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">View all stacks in servers.</span>

                </div>

                <div class="permission-grid-info">
                    <RadzenCheckBox @bind-Value="@ViewContainers" Disabled="@CheckDisabled(GlobalAdministrator || ServerAdministrator || DockerAdministrator || !CalculatedPermissions.DockerContainerPermissions.HasFlag(DockerContainerPermission.ViewContainers))" ReadOnly="@CheckReadOnly()" />
                    <RadzenLabel Text="View Containers" class="rz-ms-2" />
                    <span style="color: var(--rz-text-tertiary-color)">View all containers in servers.</span>

                </div>

                <div>
                    <RadzenDropDown @ref="DockerContainerGrid.Grid" @bind-Value="@DockerContainerGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                    AllowFiltering="true" Chips="true" Data="@DockerContainerGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => DockerContainerItemRender(evnt))"
                                    Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || DockerAdministrator || ServerAdministrator || (!ViewStacks && !ViewContainers))" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                        <Template>
                            <RadzenLabel Text="@((context as PermissionItem<DockerContainerPermission>)!.Name)" Style="display: block;" />
                            <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<DockerContainerPermission>)!.Description)</span>

                        </Template>
                        <ValueTemplate>
                            @((context as PermissionItem<DockerContainerPermission>)!.Name)
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </RadzenStack>
        }

        @if (!Program.LimitMode)
        {
            @if (PermissionType == PermissionType.All || PermissionType == PermissionType.App)
            {
                <RadzenStack Gap="0" class="permission-grid-box">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:rocket-launch"></span> App Permissions</RadzenText>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@AppAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.AppPermissions.HasFlag(AppPermission.AppAdministrator))" ReadOnly="@CheckReadOnly()" />
                        <RadzenLabel Text="App Administrator" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">Create and manage all app resources in the team.</span>
                    </div>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ViewApp" Disabled="@CheckDisabled(GlobalAdministrator || AppAdministrator || !CalculatedPermissions.AppPermissions.HasFlag(AppPermission.ViewApp))" ReadOnly="@CheckReadOnly()" />
                        @if (Resource == null)
                        {
                            <RadzenLabel Text="View Apps" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View all app resources for the team.</span>
                        }
                        else
                        {
                            <RadzenLabel Text="View App" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View this app resource.</span>
                        }
                    </div>

                    <div>
                        <RadzenDropDown @ref="ConsoleGrid.Grid" @bind-Value="@ConsoleGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                        AllowFiltering="true" Chips="true" Data="@ConsoleGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => ConsoleItemRender(evnt))"
                                        Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || ConsoleAdministrator || !ViewConsole)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                            <Template>
                                <RadzenLabel Text="@((context as PermissionItem<ConsolePermission>)!.Name)" Style="display: block;" />
                                <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ConsolePermission>)!.Description)</span>

                            </Template>
                            <ValueTemplate>
                                @((context as PermissionItem<ConsolePermission>)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </div>
                </RadzenStack>
            }

            @if (PermissionType == PermissionType.All || PermissionType == PermissionType.Console)
            {
                <RadzenStack Gap="0" class="permission-grid-box">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:console-line"></span> Console Permissions</RadzenText>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ConsoleAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.ConsolePermissions.HasFlag(ConsolePermission.ConsoleAdministrator))" ReadOnly="@CheckReadOnly()" />
                        <RadzenLabel Text="Console Administrator" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">Create and manage all console resources in the team.</span>
                    </div>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ViewConsole" Disabled="@CheckDisabled(GlobalAdministrator || ConsoleAdministrator || !CalculatedPermissions.ConsolePermissions.HasFlag(ConsolePermission.ViewConsole))" ReadOnly="@CheckReadOnly()" />
                        @if (Resource == null)
                        {
                            <RadzenLabel Text="View Consoles" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View all console resources for the team.</span>
                        }
                        else
                        {
                            <RadzenLabel Text="View Console" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View this console resource.</span>
                        }
                    </div>

                    <div>
                        <RadzenDropDown @ref="ConsoleGrid.Grid" @bind-Value="@ConsoleGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                        AllowFiltering="true" Chips="true" Data="@ConsoleGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => ConsoleItemRender(evnt))"
                                        Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || ConsoleAdministrator || !ViewConsole)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                            <Template>
                                <RadzenLabel Text="@((context as PermissionItem<ConsolePermission>)!.Name)" Style="display: block;" />
                                <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ConsolePermission>)!.Description)</span>

                            </Template>
                            <ValueTemplate>
                                @((context as PermissionItem<ConsolePermission>)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </div>
                </RadzenStack>
            }

            @if (PermissionType == PermissionType.All || PermissionType == PermissionType.Website)
            {
                <RadzenStack Gap="0" class="permission-grid-box">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:web"></span> Website Permissions</RadzenText>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@WebsiteAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.WebsitePermissions.HasFlag(WebsitePermission.WebsiteAdministrator))" ReadOnly="@CheckReadOnly()" />
                        <RadzenLabel Text="Website Administrator" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">All website permissions.</span>
                    </div>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ViewWebsite" Disabled="@CheckDisabled(GlobalAdministrator || WebsiteAdministrator || !CalculatedPermissions.WebsitePermissions.HasFlag(WebsitePermission.ViewWebsite))" ReadOnly="@CheckReadOnly()" />
                        @if (Resource == null)
                        {
                            <RadzenLabel Text="View Websites" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View all website resources for the team.</span>
                        }
                        else
                        {
                            <RadzenLabel Text="View Website" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View this website resource.</span>
                        }
                    </div>

                    <div>
                        <RadzenDropDown @ref="WebsiteGrid.Grid" @bind-Value="@WebsiteGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                        AllowFiltering="true" Chips="true" Data="@WebsiteGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => WebsiteItemRender(evnt))"
                                        Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || WebsiteAdministrator || !ViewWebsite)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                            <Template>
                                <RadzenLabel Text="@((context as PermissionItem<WebsitePermission>)!.Name)" Style="display: block;" />
                                <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<WebsitePermission>)!.Description)</span>

                            </Template>
                            <ValueTemplate>
                                @((context as PermissionItem<WebsitePermission>)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </div>
                </RadzenStack>
            }

            @if (PermissionType == PermissionType.All || PermissionType == PermissionType.Project)
            {
                <RadzenStack Gap="0" class="permission-grid-box">
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05"><span class="iconify" data-icon="mdi:lightbulb"></span> Project Permissions</RadzenText>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ProjectAdministrator" Disabled="@CheckDisabled(GlobalAdministrator || !CalculatedPermissions.ProjectPermissions.HasFlag(ProjectPermission.ProjectAdministrator))" ReadOnly="@CheckReadOnly()" />
                        <RadzenLabel Text="Project Administrator" class="rz-ms-2" />
                        <span style="color: var(--rz-text-tertiary-color)">All project permissions.</span>
                    </div>

                    <div class="permission-grid-info">
                        <RadzenCheckBox @bind-Value="@ViewProject" Disabled="@CheckDisabled(GlobalAdministrator || ProjectAdministrator || !CalculatedPermissions.ProjectPermissions.HasFlag(ProjectPermission.ViewProject))" ReadOnly="@CheckReadOnly()" />
                        @if (Resource == null)
                        {
                            <RadzenLabel Text="View Projects" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View all project resources for the team.</span>
                        }
                        else
                        {
                            <RadzenLabel Text="View Project" class="rz-ms-2" />
                            <span style="color: var(--rz-text-tertiary-color)">View this project resource.</span>
                        }
                    </div>

                    <div>
                        <RadzenDropDown @ref="ProjectGrid.Grid" @bind-Value="@ProjectGrid.Selected" Change="@(() => { if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } })" Placeholder="Select permission..."
                                        AllowFiltering="true" Chips="true" Data="@ProjectGrid.Data" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ItemRender="@((evnt) => ProjectItemRender(evnt))"
                                        Multiple="true" AllowSelectAll="false" TextProperty="Name" Disabled="@CheckDisabled(GlobalAdministrator || ProjectAdministrator || !ViewProject)" ReadOnly="@CheckReadOnly()" Style="width: 100%;">
                            <Template>
                                <RadzenLabel Text="@((context as PermissionItem<ProjectPermission>)!.Name)" Style="display: block;" />
                                <span style="color: var(--rz-text-tertiary-color)">@((context as PermissionItem<ProjectPermission>)!.Description)</span>

                            </Template>
                            <ValueTemplate>
                                @((context as PermissionItem<ProjectPermission>)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </div>
                </RadzenStack>
            }
        }
    </RadzenStack>
}

<style>
    .permission-grid-box {
        width: 260px;
        padding: 4px;
        padding-left: 8px;
        padding-right: 8px !important;
        padding-bottom: 16px;
        background-color: #242527 !important;
        margin-right: 4px;
        margin-bottom: 4px;
        box-shadow: var(--rz-card-shadow);
    }

        .permission-grid-box .rz-text-subtitle2 {
            text-align: center !important;
            display: inline-block !important;
            margin-bottom: 14px !important;
        }

        .permission-grid-box span {
            display: block;
        }

    .permission-grid-info {
        margin-top: 6px;
        margin-bottom: 16px;
    }

        .permission-grid-info .rz-chkbox-box {
            margin-top: 4px !important;
            margin-bottom: -4px !important;
        }

    .role-info {
        background-color: var(--rz-info-darker) !important;
        padding: 6px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 4px;
        margin-bottom: 10px;
        margin-left: auto;
        margin-right: auto;
    }


    .permission-grid-box .iconify {
        width: 22px;
        height: 22px;
        margin-right: 6px;
        margin-top: -2px;
    }

    .permission-grid-box .rz-text-body2 {
        color: var(--rz-warning);
    }

    .permission-grid-box .rz-chkbox-box .rzi {
        color: var(--rz-series-7) !important;
    }

    .permission-grid-box .rz-chkbox-box.rz-state-active {
        border-color: var(--rz-success-light);
    }

    .permission-grid-info span:not(.rz-chkbox-box span) {
        margin-top: 4px;
        margin-left: 32px;
    }

    .dialog-unsaved {
        height: 170px;
        margin-left: 20px;
        width: calc(100% - 40px);
        margin-bottom: 10px;
        background-color: var(--rz-base-700) !important;
    }

        .dialog-unsaved .rz-dialog-side-titlebar {
            background-color: var(--rz-base-700) !important;
        }

    .rz-multiselect-list .rz-multiselect-item {
        margin: 2px;
        background-color: var(--rz-base-dark);
    }
</style>

@if (UnsavedPermissions)
{
    <style>
        .rz-body {
            padding-bottom: 180px;
        }
    </style>
}
@if (IsPreview)
{
    <style>
        .rz-button-sm.rz-button-icon-only {
            display: none;
        }

        .rz-button-sm.rz-button {
            padding-right: 10px;
        }

        .rz-dropdown-chips .rz-chip {
            padding-right: 10px;
            height: 28px;
        }
    </style>
}

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamMemberData? Member => Session.Selected.Member;

    [Parameter, EditorRequired]
    public PermissionsSet? Permissions { get; set; }

    [Parameter]
    public ITeamResource? Resource { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool IsPreview { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (TeamGrid == null)
        {
            TeamGrid = new PermissionGrid<PermissionItem<TeamPermission>>
            {
                Data = PermissionsData.AllTeamData
            };
            APIGrid = new PermissionGrid<PermissionItem<APIPermission>>
            {
                Data = PermissionsData.AllApiData
            };
            ServerGrid = new PermissionGrid<PermissionItem<ServerPermission>>
            {
                Data = Resource == null ? PermissionsData.AllServerData : PermissionsData.ResourceServerData
            };
            WebsiteGrid = new PermissionGrid<PermissionItem<WebsitePermission>>
            {
                Data = Resource == null ? PermissionsData.AllWebsiteData : PermissionsData.ResourceWebsiteData
            };
            ProjectGrid = new PermissionGrid<PermissionItem<ProjectPermission>>
            {
                Data = Resource == null ? PermissionsData.AllProjectData : PermissionsData.ResourceProjectData
            };
            DockerGrid = new PermissionGrid<PermissionItem<DockerPermission>>
            {
                Data = Resource == null ? PermissionsData.AllDockerData : PermissionsData.ResourceDockerData
            };
            DockerContainerGrid = new PermissionGrid<PermissionItem<DockerContainerPermission>>
            {
                Data = Resource == null ? PermissionsData.AllDockerContainerData : PermissionsData.ResourceDockerContainerData
            };
            ConsoleGrid = new PermissionGrid<PermissionItem<ConsolePermission>>
            {
                Data = Resource == null ? PermissionsData.AllConsoleData : PermissionsData.ResourceConsoleData
            };
            AppGrid = new PermissionGrid<PermissionItem<AppPermission>>
                {
                    Data = Resource == null ? PermissionsData.AllAppData : PermissionsData.ResourceAppData
                };
        }

        if (_permissions != Permissions)
        {
            _permissions = Permissions;
            LoadPerms();
        }
    }

    public bool CheckDisabled(bool? value)
    {
        if (!PermissionsLoaded || IsDisabled)
            return true;

        if (value.HasValue && value.Value)
            return true;

        return false;
    }

    public bool CheckReadOnly()
    {
        return IsPreview;
    }

    private PermissionsSet _permissions { get; set; }

    public PermissionsSet CalculatedPermissions { get; set; }

    public void LoadPerms()
    {
        PermissionsLoaded = false;
        if (Permissions == null || Member == null)
            return;

        CalculatedPermissions = Member.CalculatePermissions(Resource);

        GlobalAdministrator = Permissions.TeamPermissions.HasFlag(TeamPermission.GlobalAdministrator);
        TeamAdministrator = Permissions.TeamPermissions.HasFlag(TeamPermission.TeamAdministrator);
        APIAdministrator = Permissions.APIPermissions.HasFlag(APIPermission.APIAdministrator);

        ServerAdministrator = Permissions.ServerPermissions.HasFlag(ServerPermission.ServerAdministrator);
        ViewServer = Permissions.ServerPermissions.HasFlag(ServerPermission.ViewServer);

        DockerAdministrator = Permissions.DockerPermissions.HasFlag(DockerPermission.DockerAdministrator);
        ViewStacks = Permissions.DockerContainerPermissions.HasFlag(DockerContainerPermission.ViewStacks);
        ViewContainers = Permissions.DockerContainerPermissions.HasFlag(DockerContainerPermission.ViewContainers);

        WebsiteAdministrator = Permissions.WebsitePermissions.HasFlag(WebsitePermission.WebsiteAdministrator);
        ViewWebsite = Permissions.WebsitePermissions.HasFlag(WebsitePermission.ViewWebsite);

        ProjectAdministrator = Permissions.ProjectPermissions.HasFlag(ProjectPermission.ProjectAdministrator);
        ViewProject = Permissions.ProjectPermissions.HasFlag(ProjectPermission.ViewProject);

        ConsoleAdministrator = Permissions.ConsolePermissions.HasFlag(ConsolePermission.ConsoleAdministrator);
        ViewConsole = Permissions.ConsolePermissions.HasFlag(ConsolePermission.ViewConsole);

        AppAdministrator = Permissions.AppPermissions.HasFlag(AppPermission.AppAdministrator);
        ViewApp = Permissions.AppPermissions.HasFlag(AppPermission.ViewApp);

        ResourceGrid.Selected = ResourceGrid.Data.Where(x =>
        {
            switch (x.Flag)
            {
                case ResourcePermission.CreateAPIs:
                    return Permissions.APIPermissions.HasFlag(APIPermission.CreateOwnAPIs);
                case ResourcePermission.CreateServers:
                    return Permissions.ServerPermissions.HasFlag(ServerPermission.CreateServerResource);
                case ResourcePermission.CreateConsoles:
                    return Permissions.ConsolePermissions.HasFlag(ConsolePermission.CreateConsoleResource);
                case ResourcePermission.CreateWebsites:
                    return Permissions.WebsitePermissions.HasFlag(WebsitePermission.CreateWebsiteResource);
                case ResourcePermission.CreateProjects:
                    return Permissions.ProjectPermissions.HasFlag(ProjectPermission.CreateProjectResource);
                case ResourcePermission.CreateApps:
                    return Permissions.AppPermissions.HasFlag(AppPermission.CreateAppResource);
            }

            return false;
        });

        TeamGrid.Selected = TeamGrid.Data.Where(x => Permissions.TeamPermissions.HasFlag(x.Flag));
        APIGrid.Selected = APIGrid.Data.Where(x => Permissions.APIPermissions.HasFlag(x.Flag));
        ServerGrid.Selected = ServerGrid.Data.Where(x => Permissions.ServerPermissions.HasFlag(x.Flag));
        DockerGrid.Selected = DockerGrid.Data.Where(x => Permissions.DockerPermissions.HasFlag(x.Flag));
        DockerContainerGrid.Selected = DockerContainerGrid.Data.Where(x => Permissions.DockerContainerPermissions.HasFlag(x.Flag));
        WebsiteGrid.Selected = WebsiteGrid.Data.Where(x => Permissions.WebsitePermissions.HasFlag(x.Flag));
        ProjectGrid.Selected = ProjectGrid.Data.Where(x => Permissions.ProjectPermissions.HasFlag(x.Flag));
        ConsoleGrid.Selected = ConsoleGrid.Data.Where(x => Permissions.ConsolePermissions.HasFlag(x.Flag));
        AppGrid.Selected = AppGrid.Data.Where(x => Permissions.AppPermissions.HasFlag(x.Flag));
        PermissionsLoaded = true;
    }

    public bool PermissionsLoaded { get; set; }

    private bool _UnsavedPermissions;

    public bool UnsavedPermissions
    {
        get { return _UnsavedPermissions; }
        set
        {
            _UnsavedPermissions = value;
            UnsavedPermissionsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> UnsavedPermissionsChanged { get; set; }

    [Parameter]
    public PermissionType PermissionType { get; set; }

    [Parameter]
    public EventCallback<PermissionsSet> OnSave { get; set; }

    [Parameter]
    public EventCallback OnLoad { get; set; }

    private bool _globalAdministrator;
    public bool GlobalAdministrator { get { return _globalAdministrator; } set { _globalAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _teamAdministrator;
    public bool TeamAdministrator { get { return _teamAdministrator; } set { _teamAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _apiAdministrator;
    public bool APIAdministrator { get { return _apiAdministrator; } set { _apiAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _appAdministrator;
    public bool AppAdministrator { get { return _appAdministrator; } set { _appAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewApp;
    public bool ViewApp { get { return _viewApp; } set { _viewApp = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _serverAdministrator;
    public bool ServerAdministrator { get { return _serverAdministrator; } set { _serverAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewServer;
    public bool ViewServer { get { return _viewServer; } set { _viewServer = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _dockerAdministrator;
    public bool DockerAdministrator { get { return _dockerAdministrator; } set { _dockerAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewStacks;
    public bool ViewStacks { get { return _viewStacks; } set { _viewStacks = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewContainers;
    public bool ViewContainers { get { return _viewContainers; } set { _viewContainers = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }


    private bool _websiteAdministrator;
    public bool WebsiteAdministrator { get { return _websiteAdministrator; } set { _websiteAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewWebsite;
    public bool ViewWebsite { get { return _viewWebsite; } set { _viewWebsite = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _projectAdministrator;
    public bool ProjectAdministrator { get { return _projectAdministrator; } set { _projectAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewProject;
    public bool ViewProject { get { return _viewProject; } set { _viewProject = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _logAdministrator;
    public bool LogAdministrator { get { return _logAdministrator; } set { _logAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewLog;
    public bool ViewLog { get { return _viewLog; } set { _viewLog = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _consoleAdministrator;
    public bool ConsoleAdministrator { get { return _consoleAdministrator; } set { _consoleAdministrator = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    private bool _viewConsole;
    public bool ViewConsole { get { return _viewConsole; } set { _viewConsole = value; if (PermissionsLoaded) { _ = TriggerUnsavedDialog(); } } }

    public PermissionGrid<PermissionItem<ResourcePermission>> ResourceGrid = new PermissionGrid<PermissionItem<ResourcePermission>>
    {
        Data = PermissionsData.AllResourceData
    };
    public PermissionGrid<PermissionItem<TeamPermission>> TeamGrid;
    public PermissionGrid<PermissionItem<APIPermission>> APIGrid;
    public PermissionGrid<PermissionItem<ServerPermission>> ServerGrid;
    public PermissionGrid<PermissionItem<WebsitePermission>> WebsiteGrid;
    public PermissionGrid<PermissionItem<ProjectPermission>> ProjectGrid;
    public PermissionGrid<PermissionItem<DockerPermission>> DockerGrid;
    public PermissionGrid<PermissionItem<DockerContainerPermission>> DockerContainerGrid;
    public PermissionGrid<PermissionItem<ConsolePermission>> ConsoleGrid;
    public PermissionGrid<PermissionItem<AppPermission>> AppGrid;

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<TeamPermission>>> TeamItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<TeamPermission>>?> data)
    {
        PermissionItem<TeamPermission> item = (PermissionItem<TeamPermission>)data.Item;
        if (!CalculatedPermissions.TeamPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        switch (item.Flag)
        {
            case TeamPermission.ManageMembers:
                {
                    if (!TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewMembers))
                        data.Disabled = true;
                }
                break;
            case TeamPermission.AssignRoles:
            case TeamPermission.ManageRoles:
                {
                    if (!TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewRoles))
                        data.Disabled = true;
                }
                break;
            case TeamPermission.ManagePermissions:
                {
                    if (!TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewPermissions))
                        data.Disabled = true;
                }
                break;
                // case TeamPermission.ManageOwnAPIs:
                //     {
                //         if (!TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewOwnAPIs) && !TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewAllAPIs))
                //             data.Disabled = true;
                //     }
                //     break;
                // case TeamPermission.ManageAllAPIs:
                //     {
                //         if (!TeamGrid.Selected.Any(x => x.Flag == TeamPermission.ViewAllAPIs))
                //             data.Disabled = true;
                //     }
                //     break;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<APIPermission>>> APIItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<APIPermission>>?> data)
    {
        PermissionItem<APIPermission> item = (PermissionItem<APIPermission>)data.Item;
        if (!CalculatedPermissions.APIPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        switch (item.Flag)
        {
            case APIPermission.ManageOwnAPIs:
                {
                    if (!APIGrid.Selected.Any(x => x.Flag == APIPermission.ViewOwnAPIs) && !APIGrid.Selected.Any(x => x.Flag == APIPermission.ViewAllAPIs))
                        data.Disabled = true;
                }
                break;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<AppPermission>>> ServerItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<AppPermission>>?> data)
    {
        PermissionItem<AppPermission> item = (PermissionItem<AppPermission>)data.Item;
        if (!CalculatedPermissions.AppPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        if (item.Flag == AppPermission.ManagePermissions)
        {
            if (!AppGrid.Selected.Any(x => x.Flag == AppPermission.ViewPermissions))
                data.Disabled = true;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ServerPermission>>> ServerItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ServerPermission>>?> data)
    {
        PermissionItem<ServerPermission> item = (PermissionItem<ServerPermission>)data.Item;
        if (!CalculatedPermissions.ServerPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        if (item.Flag == ServerPermission.ManagePermissions)
        {
            if (!ServerGrid.Selected.Any(x => x.Flag == ServerPermission.ViewPermissions))
                data.Disabled = true;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<WebsitePermission>>> WebsiteItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<WebsitePermission>>?> data)
    {
        PermissionItem<WebsitePermission> item = (PermissionItem<WebsitePermission>)data.Item;
        if (!CalculatedPermissions.WebsitePermissions.HasFlag(item.Flag))
            data.Disabled = true;

        if (item.Flag == WebsitePermission.ManagePermissions)
        {
            if (!WebsiteGrid.Selected.Any(x => x.Flag == WebsitePermission.ViewPermissions))
                data.Disabled = true;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ProjectPermission>>> ProjectItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ProjectPermission>>?> data)
    {
        PermissionItem<ProjectPermission> item = (PermissionItem<ProjectPermission>)data.Item;
        if (!CalculatedPermissions.ProjectPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        if (item.Flag == ProjectPermission.ManagePermissions)
        {
            if (!ProjectGrid.Selected.Any(x => x.Flag == ProjectPermission.ViewPermissions))
                data.Disabled = true;
        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<DockerPermission>>> DockerItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<DockerPermission>>?> data)
    {
        PermissionItem<DockerPermission> item = (PermissionItem<DockerPermission>)data.Item;
        if (!CalculatedPermissions.DockerPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        switch (item.Flag)
        {
            // case DockerPermission.ManagePermissions:
            //     {
            //         if (!DockerGrid.Selected.Any(x => x.Flag == DockerPermission.ViewPermissions))
            //             data.Disabled = true;
            //     }
            //     break;
            case DockerPermission.ManageCustomTemplates:
                {
                    if (!DockerGrid.Selected.Any(x => x.Flag == DockerPermission.UseCustomTemplates))
                        data.Disabled = true;
                }
                break;

        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<DockerContainerPermission>>> DockerContainerItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<DockerContainerPermission>>?> data)
    {
        PermissionItem<DockerContainerPermission> item = (PermissionItem<DockerContainerPermission>)data.Item;
        if (!CalculatedPermissions.DockerContainerPermissions.HasFlag(item.Flag))
            data.Disabled = true;

        switch (item.Flag)
        {
            case DockerContainerPermission.ControlContainers:
            case DockerContainerPermission.ManageContainerFiles:
            case DockerContainerPermission.ManageContainers:
            case DockerContainerPermission.UseContainerConsole:
            case DockerContainerPermission.ViewContainerChanges:
            case DockerContainerPermission.ViewContainerDetails:
            case DockerContainerPermission.ViewContainerEnvironment:
            case DockerContainerPermission.ViewContainerFiles:
            case DockerContainerPermission.ViewContainerHealthLogs:
            case DockerContainerPermission.ViewContainerLogs:
            case DockerContainerPermission.ViewContainerNetworks:
            case DockerContainerPermission.ViewContainerStats:
            case DockerContainerPermission.ViewContainerVolumes:
                {
                    if (!ViewContainers)
                        data.Disabled = true;

                    if (item.Flag == DockerContainerPermission.ManageContainerFiles && !DockerContainerGrid.Selected.Any(x => x.Flag == DockerContainerPermission.ViewContainerFiles))
                        data.Disabled = true;

                }
                break;
            case DockerContainerPermission.ControlStacks:
            case DockerContainerPermission.CreateStacks:
            case DockerContainerPermission.ManageStacks:
                {
                    if (!ViewStacks)
                        data.Disabled = true;
                }
                break;

        }
        return data;
    }

    public DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ConsolePermission>>> ConsoleItemRender(DropDownItemRenderEventArgs<IEnumerable<PermissionItem<ConsolePermission>>?> data)
    {
        PermissionItem<ConsolePermission> item = (PermissionItem<ConsolePermission>)data.Item;
        if (!CalculatedPermissions.ConsolePermissions.HasFlag(item.Flag))
            data.Disabled = true;

        if (item.Flag == ConsolePermission.ManagePermissions)
        {
            if (!ConsoleGrid.Selected.Any(x => x.Flag == ConsolePermission.ViewPermissions))
                data.Disabled = true;
        }
        return data;
    }



    public PermissionsSet GetPermissions()
    {
        PermissionsSet Set = new PermissionsSet();
        if (GlobalAdministrator)
            Set.TeamPermissions |= TeamPermission.GlobalAdministrator;

        if (TeamAdministrator)
            Set.TeamPermissions |= TeamPermission.TeamAdministrator;
        else
        {
            if (TeamGrid.Selected != null)
            {
                foreach (PermissionItem<TeamPermission> i in TeamGrid.Selected)
                {
                    Set.TeamPermissions |= i.Flag;
                }
            }
        }

        if (APIAdministrator)
            Set.APIPermissions |= APIPermission.APIAdministrator;
        else
        {
            if (APIGrid.Selected != null)
            {
                foreach (PermissionItem<APIPermission> i in APIGrid.Selected)
                {
                    Set.APIPermissions |= i.Flag;
                }
            }
        }

        if (ServerAdministrator)
            Set.ServerPermissions |= ServerPermission.ServerAdministrator;
        else
        {
            if (ViewServer)
                Set.ServerPermissions |= ServerPermission.ViewServer;

            if (ServerGrid.Selected != null)
            {
                foreach (PermissionItem<ServerPermission> i in ServerGrid.Selected)
                {
                    Set.ServerPermissions |= i.Flag;
                }
            }
        }

        if (DockerAdministrator)
            Set.DockerPermissions |= DockerPermission.DockerAdministrator;
        else
        {
            if (DockerGrid.Selected != null)
            {
                foreach (PermissionItem<DockerPermission> i in DockerGrid.Selected)
                {
                    Set.DockerPermissions |= i.Flag;
                }
            }
        }

        if (ViewStacks)
            Set.DockerContainerPermissions |= DockerContainerPermission.ViewStacks;

        if (ViewContainers)
            Set.DockerContainerPermissions |= DockerContainerPermission.ViewContainers;

        if (DockerContainerGrid.Selected != null)
        {
            foreach (PermissionItem<DockerContainerPermission> i in DockerContainerGrid.Selected)
            {
                Set.DockerContainerPermissions |= i.Flag;
            }
        }
        if (WebsiteAdministrator)
            Set.WebsitePermissions |= WebsitePermission.WebsiteAdministrator;
        else
        {
            if (ViewWebsite)
                Set.WebsitePermissions |= WebsitePermission.ViewWebsite;

            if (WebsiteGrid.Selected != null)
            {
                foreach (PermissionItem<WebsitePermission> i in WebsiteGrid.Selected)
                {
                    Set.WebsitePermissions |= i.Flag;
                }
            }
        }

        if (ProjectAdministrator)
            Set.ProjectPermissions |= ProjectPermission.ProjectAdministrator;
        else
        {
            if (ViewProject)
                Set.ProjectPermissions |= ProjectPermission.ViewProject;

            if (ProjectGrid.Selected != null)
            {
                foreach (PermissionItem<ProjectPermission> i in ProjectGrid.Selected)
                {
                    Set.ProjectPermissions |= i.Flag;
                }
            }
        }

        if (ConsoleAdministrator)
            Set.ConsolePermissions |= ConsolePermission.ConsoleAdministrator;
        else
        {
            if (ViewConsole)
                Set.ConsolePermissions |= ConsolePermission.ViewConsole;

            if (ConsoleGrid.Selected != null)
            {
                foreach (PermissionItem<ConsolePermission> i in ConsoleGrid.Selected)
                {
                    Set.ConsolePermissions |= i.Flag;
                }
            }
        }

        if (AppAdministrator)
            Set.AppPermissions |= AppPermission.AppAdministrator;
        else
        {
            if (ViewApp)
                Set.AppPermissions |= AppPermission.ViewApp;

            if (AppGrid.Selected != null)
            {
                foreach (PermissionItem<AppPermission> i in AppGrid.Selected)
                {
                    Set.AppPermissions |= i.Flag;
                }
            }
        }

        if (ResourceGrid.Selected != null)
        {
            foreach (PermissionItem<ResourcePermission> i in ResourceGrid.Selected)
            {
                switch (i.Flag)
                {
                    case ResourcePermission.CreateAPIs:
                        Set.APIPermissions |= APIPermission.CreateOwnAPIs;
                        break;
                    case ResourcePermission.CreateServers:
                        Set.ServerPermissions |= ServerPermission.CreateServerResource;
                        break;
                    case ResourcePermission.CreateConsoles:
                        Set.ConsolePermissions |= ConsolePermission.CreateConsoleResource;
                        break;
                    case ResourcePermission.CreateWebsites:
                        Set.WebsitePermissions |= WebsitePermission.CreateWebsiteResource;
                        break;
                    case ResourcePermission.CreateProjects:
                        Set.ProjectPermissions |= ProjectPermission.CreateProjectResource;
                        break;
                    case ResourcePermission.CreateApps:
                        Set.AppPermissions |= AppPermission.CreateAppResource;
                        break;
                }
            }
        }
        return Set;
    }

    public async Task TriggerUnsavedDialog()
    {
        if (!UnsavedPermissions)
        {
            UnsavedPermissions = true;
            dynamic Result = await Dialogs.OpenSideAsync<PermissionChangesDialog>("Unsaved Changes", options: new SideDialogOptions
            {
                CloseDialogOnOverlayClick = false,
                Position = DialogPosition.Bottom,
                ShowMask = false,
                ShowClose = false,
                CssClass = "dialog-unsaved"
            });

            if (Result != null)
            {
                if (Result is true)
                {
                    await OnSave.InvokeAsync(GetPermissions());
                    UnsavedPermissions = false;
                }
                else if (Result is false)
                {
                    await OnLoad.InvokeAsync();
                    UnsavedPermissions = false;
                }
            }

        }
    }
}
