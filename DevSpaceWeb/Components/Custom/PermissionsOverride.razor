@using DevSpaceWeb.Apps.Data
@using DevSpaceWeb.Components.Dialogs
@using DevSpaceWeb.Data.API
@using DevSpaceWeb.Data.Consoles
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Teams
@using Microsoft.AspNetCore.Components.Forms

<RadzenRow Gap="0.2rem">
    <RadzenColumn Size="3" class=" rz-py-2 pr-2">
        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Permission Type</RadzenText>
        <RadzenDropDown TValue="@OverrideType" @bind-Value="@Override" Data="@GetList()" Change="@((arg) => { SelectedPermission = null; LoadPermissions(); })" Style="width: 100%;" Disabled="@(UnsavedPermissions || IsDisabled)">
            <Template>
                @Utils.FriendlyName(((OverrideType)context).ToString())
            </Template>
        </RadzenDropDown>

        <br />
        <br />

        @switch (Override)
        {
            case OverrideType.Roles:
                {
                    <RadzenButton @ref="@RoleButton" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Role Permission" Click="@(() => RolePopup.ToggleAsync(RoleButton.Element))" Disabled="@(Member == null || UnsavedPermissions || IsDisabled || !HasManagePermissions() || !Member.HasTeamPermission(Team, TeamPermission.ViewRoles))" />

                    <Popup @ref="@RolePopup" Lazy="true" class="permission-popup">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-1">
                            <RadzenListBox TValue="TeamRoleData" ValueChanged="@((el) => { _ = AddOverride(el); })" AllowVirtualization="true"
                            AllowFiltering="true" Data="@Team.CachedRoles.Values.Where(x => !RoleOverrides.Any(y => y.ObjectId.GetValueOrDefault() == x.Id) && _DB.Roles.Cache.ContainsKey(x.Id) && CurrentRank > x.GetPosition())" TextProperty="@nameof(TeamRoleData.Name)" Style="width: 100%; height: 100%"
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select role" }})" Disabled="@(UnsavedPermissions || IsDisabled)" />
                        </RadzenStack>
                    </Popup>

                    <br />
                    <br />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Roles</RadzenText>
                    <RadzenListBox TValue="@ResourcePermissionItem" @bind-Value="@SelectedPermission" Data="@RoleOverrides" Disabled="@(UnsavedPermissions || IsDisabled)"
                    Change="@(() => { LoadPermissions(); })"
                    TextProperty="@nameof(ResourcePermissionItem.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                   Style="width: 100%; height: calc(100vh - 370px); min-height:400px;" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select role" } })" />
                }
                break;
            case OverrideType.Members:
                {
                    <RadzenButton @ref="@MemberButton" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add Member Permission" Click="@(() => MemberPopup.ToggleAsync(MemberButton.Element))" Disabled="@(Member == null || UnsavedPermissions || IsDisabled || !HasManagePermissions() || !Member.HasTeamPermission(Team, TeamPermission.ViewMembers))" />

                    <Popup @ref="@MemberPopup" Lazy="true" class="permission-popup">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-1">
                            <RadzenListBox TValue="TeamMemberData" ValueChanged="@((el) => { _ = AddOverride(el); })" AllowVirtualization="true"
                            AllowFiltering="true" Data="@Team.CachedMembers.Values.Where(x => !MemberOverrides.Any(y => y.ObjectId.GetValueOrDefault() == x.UserId) && _DB.Users.ContainsKey(x.UserId) && CurrentRank > x.GetRank())" Style="width: 100%; height: 100%"
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select member" }})" Disabled="@(UnsavedPermissions || IsDisabled)">
                                <Template>
                                    @((context as TeamMemberData)!.GetUsername())
                                </Template>
                            </RadzenListBox>
                        </RadzenStack>
                    </Popup>

                    <br />
                    <br />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Members</RadzenText>
                    <RadzenListBox @bind-Value="@SelectedPermission" Change="@(() => { LoadPermissions(); })" Data="@MemberOverrides" Disabled="@(UnsavedPermissions || IsDisabled)"
                    TextProperty="@nameof(ResourcePermissionItem.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                   Style="width: 100%; height: calc(100vh - 370px); min-height:400px;" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select member" } })" />
                }
                break;
            case OverrideType.APIs:
                {
                    <RadzenButton @ref="@ApiButton" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Add API Client Permission" Click="@(() => ApiPopup.ToggleAsync(ApiButton.Element))" Disabled="@(Member == null || UnsavedPermissions || IsDisabled || !HasManagePermissions() || (!Member.HasAPIPermission(Team, APIPermission.ViewOwnAPIs) && !Member.HasAPIPermission(Team, APIPermission.ViewAllAPIs)))" />

                    <Popup @ref="@ApiPopup" Lazy="true" class="permission-popup">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-h-100 rz-p-1">
                            <RadzenListBox TValue="APIClient" ValueChanged="@((el) => { _ = AddOverride(el); })" AllowVirtualization="true"
                            AllowFiltering="true" Data="@_DB.API.Cache.Values.Where(x => x.HasAccess(Member, false) && !ApiOverrides.Any(y => y.ObjectId.GetValueOrDefault() == x.Id))" Style="width: 100%; height: 100%"
                            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select api client" }})" Disabled="@(UnsavedPermissions || IsDisabled)">
                                <Template>
                                    @((context as APIClient)!.Name)
                                </Template>
                            </RadzenListBox>
                        </RadzenStack>
                    </Popup>

                    <br />
                    <br />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">API Clients</RadzenText>
                    <RadzenListBox @bind-Value="@SelectedPermission" Change="@(() => { LoadPermissions(); })" Data="@ApiOverrides" Disabled="@(UnsavedPermissions || IsDisabled)"
                    TextProperty="@nameof(ResourcePermissionItem.Name)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                   Style="width: 100%; height: calc(100vh - 370px); min-height:400px;" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select api client" } })" />
                }
                break;
        }



    </RadzenColumn>

    <RadzenColumn class="rz-py-2">
        @if (SelectedPermission != null)
        {
            @if (!CanManageOverride())
            {
                if (!HasManagePermissions())
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You do not have permission for Manage Permissions.
                    </RadzenAlert>
                }
                else
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        You can't manage this permission override with your current access.
                    </RadzenAlert>
                }
            }
            <div class="role-info">
                <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-mt-2 rz-my-0">@SelectedPermission.Name</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @SelectedPermission.Description
                </RadzenText>
                @if (SelectedPermission.ObjectId.HasValue)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Text="Delete Permission" Click="@DeleteOverride" Disabled="@(UnsavedPermissions || IsDisabled || !CanManageOverride())" />
                }
            </div>

            <PermissionGrid PermissionType="@PermissionType" Resource="@Resource" Permissions="@SelectedPermission.Permissions" UnsavedPermissionsChanged="@((arg) => UnsavedPermissions = arg)"
            OnSave="@SavePermissions" OnLoad="@LoadPermissions" IsDisabled="@(IsDisabled || !CanManageOverride())"></PermissionGrid>
        }
        else
        {
            if (!HasManagePermissions())
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    You do not have permission for Manage Permissions.
                </RadzenAlert>
            }
            else
            {
                switch (Override)
                {
                    case OverrideType.Roles:
                        {
                            if (Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewRoles))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    You do not have View Roles permission and can't add role permissions.
                                </RadzenAlert>
                            }
                        }
                        break;
                    case OverrideType.Members:
                        {
                            if (Member == null || !Member.HasTeamPermission(Team, TeamPermission.ViewMembers))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    You do not have View Members permission and can't add member permissions.
                                </RadzenAlert>
                            }
                        }
                        break;
                    case OverrideType.APIs:
                        {
                            if (Member == null || !Member.HasAPIPermission(Team, APIPermission.ViewOwnAPIs) && !Member.HasAPIPermission(Team, APIPermission.ViewAllAPIs))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    You do not have View APIs permission and can't add api permissions.
                                </RadzenAlert>
                            }
                        }
                        break;
                }
            }
        }
    </RadzenColumn>
</RadzenRow>


<style>
    .role-box .rz-dropdown {
    width: 100% !important;
    }

    .permission-popup {
    display: none;
    position: absolute !important;
    overflow: hidden !important;
    height: 360px;
    width: 200px;
    border: var(--rz-panel-border);
    background-color: var(--rz-base-700);
    box-shadow: var(--rz-panel-shadow);
    border-radius: var(--rz-border-radius);
    }
</style>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;

    public bool IsDisabled { get; set; }

    [Parameter, EditorRequired]
    public ITeamResource Resource { get; set; }

    [Parameter]
    public PermissionType PermissionType { get; set; }

    public OverrideType Override { get; set; } = OverrideType.DefaultMembers;

    public IEnumerable<OverrideType> GetList()
    {
        return Enum.GetValues<OverrideType>();
    }

    public IEnumerable<ResourcePermissionItem> RoleOverrides { get; set; }
    public IEnumerable<ResourcePermissionItem> MemberOverrides { get; set; }
    public IEnumerable<ResourcePermissionItem> ApiOverrides { get; set; }

    public RadzenButton RoleButton { get; set; }
    public RadzenButton MemberButton { get; set; }
    public RadzenButton ApiButton { get; set; }
    public Popup RolePopup { get; set; }
    public Popup MemberPopup { get; set; }
    public Popup ApiPopup { get; set; }

    public ResourcePermissionItem? SelectedPermission { get; set; }

    public bool UnsavedPermissions { get; set; }

    public int CurrentRank = 0;

    public void LoadPermissions()
    {
        if (Member == null || Team == null)
            CurrentRank = 0;
        else
            CurrentRank = Member.GetRank();

        @switch (Override)
        {
            case OverrideType.DefaultMembers:
                SelectedPermission = new ResourcePermissionItem
                    {
                        Name = "Default Members Permission",
                        Description = $"Default permissions for this resource that all members in the team should have.",
                        Permissions = Resource.DefaultPermissions.Clone()
                    };
                break;
            case OverrideType.Roles:
                {
                    RoleOverrides = Resource.RolePermissionOverrides.Select(x => Team.CachedRoles.TryGetValue(x.Key, out TeamRoleData? role) ? new ResourcePermissionItem
                        {
                            Name = role.Name,
                            ObjectId = x.Key,
                        } : new ResourcePermissionItem { Name = "Unknown Role", Permissions = null });

                    if (SelectedPermission == null || !SelectedPermission.ObjectId.HasValue)
                        return;

                    if (Resource.RolePermissionOverrides.TryGetValue(SelectedPermission.ObjectId.Value, out PermissionsSet? permission) && Team.CachedRoles.TryGetValue(SelectedPermission.ObjectId.Value, out TeamRoleData? role))
                    {
                        SelectedPermission.Name = $"{role.Name} Role Permission";
                        SelectedPermission.Description = role.Description;
                        SelectedPermission.Permissions = permission.Clone();
                    }
                    else
                    {
                        SelectedPermission = new ResourcePermissionItem { Name = "Unknown Role", Permissions = null };
                    }
                }
                break;
            case OverrideType.Members:
                {
                    MemberOverrides = Resource.MemberPermissionOverrides.Select(x => Team.Members.TryGetValue(x.Key, out ObjectId memberId) && Team.CachedMembers.TryGetValue(memberId, out TeamMemberData? member) ? new ResourcePermissionItem
                        {
                            Name = member.GetUsername(),
                            ObjectId = x.Key
                        } : new ResourcePermissionItem { Name = "Unknown Member", Permissions = null });

                    if (SelectedPermission == null || !SelectedPermission.ObjectId.HasValue)
                        return;

                    if (Resource.MemberPermissionOverrides.TryGetValue(SelectedPermission.ObjectId.Value, out PermissionsSet? permission) && _DB.Users.TryGetValue(SelectedPermission.ObjectId.Value, out PartialUserData? user))
                    {
                        SelectedPermission.Name = $"{user.UserName} Member Permission";
                        SelectedPermission.Description = "";
                        SelectedPermission.Permissions = permission.Clone();
                    }
                    else
                    {
                        SelectedPermission = new ResourcePermissionItem { Name = "Unknown Member", Permissions = null };
                    }
                }
                break;
            case OverrideType.APIs:
                {
                    ApiOverrides = Resource.ApiPermissionOverrides.Select(x => _DB.API.Cache.TryGetValue(x.Key, out APIClient? api) ? new ResourcePermissionItem
                        {
                            Name = api.Name,
                            ObjectId = x.Key
                        } : new ResourcePermissionItem { Name = "Unknown API", Permissions = null });

                    if (SelectedPermission == null || !SelectedPermission.ObjectId.HasValue)
                        return;

                    if (Resource.ApiPermissionOverrides.TryGetValue(SelectedPermission.ObjectId.Value, out PermissionsSet? permission) && _DB.API.Cache.TryGetValue(SelectedPermission.ObjectId.Value, out APIClient? client))
                    {
                        SelectedPermission.Name = $"{client.Name} API Permission";
                        SelectedPermission.Description = "";
                        SelectedPermission.Permissions = permission.Clone();
                    }
                    else
                    {
                        SelectedPermission = new ResourcePermissionItem { Name = "Unknown API Client", Permissions = null };
                    }
                }
                break;
        }
    }

    public async Task SavePermissions(PermissionsSet perms)
    {
        if (Member == null || Team == null)
            CurrentRank = 0;
        else
            CurrentRank = Member.GetRank();

        if (CanManageOverride())
        {
            switch (Override)
            {
                case OverrideType.DefaultMembers:
                    {
                        if (Resource is ConsoleData console)
                        {
                            if (Member.HasConsolePermission(Team, console, ConsolePermission.ManagePermissions))
                            {
                                await console.UpdateAsync(new UpdateDefinitionBuilder<ConsoleData>().Set(x => x.DefaultPermissions, perms), () =>
                                {
                                    console.DefaultPermissions = perms;
                                });
                            }
                            else
                            {
                                LoadPermissions();
                            }
                        }
                        else if (Resource is ServerData server)
                        {
                            if (Member.HasServerPermission(Team, server, ServerPermission.ManagePermissions))
                            {
                                await server.UpdateAsync(new UpdateDefinitionBuilder<ServerData>().Set(x => x.DefaultPermissions, perms), () =>
                            {
                                server.DefaultPermissions = perms;
                            });
                            }
                            else
                            {
                                LoadPermissions();
                            }

                        }
                        else if (Resource is AppData app)
                        {
                            if (Member.HasAppPermission(Team, app, AppPermission.ManagePermissions))
                            {
                                await app.UpdateAsync(new UpdateDefinitionBuilder<AppData>().Set(x => x.DefaultPermissions, perms), () =>
                            {
                                app.DefaultPermissions = perms;
                            });
                            }
                            else
                            {
                                LoadPermissions();
                            }

                        }
                    }
                    break;
                case OverrideType.Roles:
                    {
                        if (SelectedPermission != null && _DB.Roles.Cache.TryGetValue(SelectedPermission.ObjectId.GetValueOrDefault(), out TeamRoleData? role) && CurrentRank > role.GetPosition())
                            Resource.AddRolePermissionAsync(SelectedPermission.ObjectId.GetValueOrDefault(), perms);
                    }

                    break;
                case OverrideType.Members:
                    {
                        if (SelectedPermission != null && _DB.Members.Cache.TryGetValue(Team.Members[SelectedPermission.ObjectId.GetValueOrDefault()], out TeamMemberData? member) && CurrentRank >= member.GetRank())
                            Resource.AddMemberPermissionAsync(SelectedPermission.ObjectId.GetValueOrDefault(), perms);
                    }
                    break;
                case OverrideType.APIs:
                    {
                        if (SelectedPermission != null && _DB.API.Cache.TryGetValue(SelectedPermission.ObjectId.GetValueOrDefault(), out APIClient? client) && client.CanManage(Member, false))
                            Resource.AddApiPermissionAsync(SelectedPermission.ObjectId.GetValueOrDefault(), perms);
                    }
                    break;
            }
        }
        else
        {
            LoadPermissions();
            UnsavedPermissions = false;
        }

    }

    public async Task AddOverride(object data)
    {
        if (Member == null || Team == null)
            CurrentRank = 0;
        else
            CurrentRank = Member.GetRank();

        IsDisabled = true;
        switch (Override)
        {
            case OverrideType.Roles:
                {
                    if (data is not TeamRoleData role)
                        return;

                    if (role.CanManage(Member))
                        Resource.AddRolePermissionAsync(role.Id, new PermissionsSet());

                    await RolePopup.CloseAsync();
                }
                break;
            case OverrideType.Members:
                {
                    if (data is not TeamMemberData member)
                        return;

                    if (member.CanManage(Member))
                        Resource.AddMemberPermissionAsync(member.UserId, new PermissionsSet());

                    await MemberPopup.CloseAsync();
                }
                break;
            case OverrideType.APIs:
                {
                    if (data is not APIClient client)
                        return;

                    if (client.CanManage(Member, false))
                        Resource.AddApiPermissionAsync(client.Id, new PermissionsSet());

                    await ApiPopup.CloseAsync();
                }
                break;
        }
        IsDisabled = false;
        StateHasChanged();
    }

    public bool HasManagePermissions()
    {
        if (Member == null)
            return false;

        if (Resource is ServerData sd)
        {
            if (Member.HasServerPermission(Team, sd, ServerPermission.ManagePermissions))
                return true;
        }
        else if (Resource is AppData ad)
        {
            if (Member.HasAppPermission(Team, ad, AppPermission.ManagePermissions))
                return true;
        }
        else if (Resource is ConsoleData cd)
        {
            if (Member.HasConsolePermission(Team, cd, ConsolePermission.ManagePermissions))
                return true;
        }
        else if (Resource is ProjectData pd)
        {
            if (Member.HasProjectPermission(Team, pd, ProjectPermission.ManagePermissions))
                return true;
        }
        else if (Resource is WebsiteData wd)
        {
            if (Member.HasWebsitePermission(Team, wd, WebsitePermission.ManagePermissions))
                return true;
        }
        else if (Resource is LogData ld)
        {
            if (Member.HasLogPermission(Team, ld, LogPermission.ManagePermissions))
                return true;
        }
        return false;
    }

    public bool CanManageOverride()
    {
        if (!HasManagePermissions())
            return false;

        if (Member == null || Team == null)
            return false;

        switch (Override)
        {
            case OverrideType.DefaultMembers:
                return true;
            case OverrideType.Roles:
                {
                    if (SelectedPermission != null && SelectedPermission.ObjectId.HasValue && Member.HasTeamPermission(Team, TeamPermission.ViewRoles))
                    {
                        if (!_DB.Roles.Cache.TryGetValue(SelectedPermission.ObjectId.Value, out TeamRoleData? role))
                            return true;

                        if (role.CanManage(Member))
                            return true;
                    }

                }
                break;
            case OverrideType.Members:
                {
                    if (SelectedPermission != null && SelectedPermission.ObjectId.HasValue && Member.HasTeamPermission(Team, TeamPermission.ViewMembers))
                    {
                        if (!_DB.Users.TryGetValue(SelectedPermission.ObjectId.Value, out PartialUserData? user))
                            return true;

                        TeamMemberData? SelectedMember = Team.GetMember(user);
                        if (SelectedMember != null)
                        {
                            if (SelectedMember.CanManage(Member))
                                return true;
                        }
                        else
                            return true;
                    }

                }
                break;
            case OverrideType.APIs:
                {
                    if (SelectedPermission == null || !SelectedPermission.ObjectId.HasValue)
                        return false;

                    if (_DB.API.Cache.TryGetValue(SelectedPermission.ObjectId.Value, out APIClient? api))
                    {
                        if (api.HasAccess(Member, false))
                            return true;
                    }
                    else
                        return true;

                }
                break;
        }

        return false;
    }

    public async Task DeleteOverride()
    {
        if (Member == null || Team == null)
            CurrentRank = 0;
        else
            CurrentRank = Member.GetRank();

        IsDisabled = true;
        switch (Override)
        {
            case OverrideType.Roles:
                {
                    if (CanManageOverride())
                    {
                        Resource.DeleteRolePermissionAsync(SelectedPermission.ObjectId.Value);
                        SelectedPermission = null;
                    }

                }
                break;
            case OverrideType.Members:
                {
                    if (CanManageOverride())
                    {
                        Resource.DeleteMemberPermissionAsync(SelectedPermission.ObjectId.Value);
                        SelectedPermission = null;
                        
                    }

                }
                break;
            case OverrideType.APIs:
                {
                    if (CanManageOverride())
                    {
                        Resource.DeleteApiPermissionAsync(SelectedPermission.ObjectId.Value);
                        SelectedPermission = null;
                    }
                    
                }
                break;
        }
        
        IsDisabled = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RoleOverrides == null)
            LoadPermissions();
    }



    public enum OverrideType
    {
        DefaultMembers, Roles, Members, APIs
    }
}
