@using Markdig
@using Markdig.Extensions.AutoLinks
@using Markdig.Helpers
@using Markdig.Parsers
@using Markdig.Renderers.Html
@using Markdig.Syntax.Inlines

@if (Content == null)
{
    <span></span>
}
else
{
    @((MarkupString)BuildHtmlFromMarkdown(Content))
}

<style>
    .email-view {
        padding: 10px;
        padding-bottom: 30px;
        background-color: #ffffff !important;
        border-radius: 12px;
        max-width: 700px !important;
        color: #222;
        !important;
        height: calc(100% - 70px);
    }

        .email-view .format-center {
            text-align: center;
        }

        .email-view a {
            color: #2a5db0;
            text-decoration: underline;
        }

        .email-view p {
            line-height: 19.5px;
            font: small/1.5 Arial,Helvetica,sans-serif;
        }

        .email-view hr {
            height: 16px;
        }

        .email-view img {
            max-width: 100% !important;
        }
</style>

@functions {

    [Parameter]
    public string Content { get; set; } = "";

    public static string BuildHtmlFromMarkdown(string value)
    {
        if (string.IsNullOrEmpty(value))
            return "";
        else
        {
            MarkdownPipelineBuilder pipeline = new MarkdownPipelineBuilder()
    //.UsePipeTables()
    //.UseGridTables()
    .UseSoftlineBreakAsHardlineBreak()
    .UseEmphasisExtras()
    .UseGenericAttributes()
    .UseMediaLinks()
    .UseEmojiAndSmiley()
    .DisableHtml()
    .UseAutoLinks()
    //.UseCustomContainers()
    .ConfigureNewLine(Environment.NewLine)
    .Use(new Markdig.Extensions.TargetLinkExtensions.TargetLinkExtension());
            pipeline.InlineParsers.Add(new CustomAutoLinkParser());
            return Markdig.Markdown.ToHtml(markdown: value, pipeline: pipeline.Build());
        }
    }

    /// <summary>
    /// The inline parser used to for autolinks.
    /// </summary>
    /// <seealso cref="InlineParser" />
    public class CustomAutoLinkParser : InlineParser
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoLinkParser"/> class.
        /// </summary>
        public CustomAutoLinkParser()
        {
            OpeningCharacters = new char[]
            {
                'h', // for http:// and https://
                'm', // for mailto:
                'w', // for www.
            };

            _listOfCharCache = new ListOfCharCache();
        }

        private readonly ListOfCharCache _listOfCharCache;

        public override bool Match(InlineProcessor processor, ref StringSlice slice)
        {
            // Previous char must be a whitespace or a punctuation
            char previousChar = slice.PeekCharExtra(-1);
            if (!previousChar.IsWhiteSpaceOrZero() && "*_~(".IndexOf(previousChar) == -1)
            {
                return false;
            }

            List<char> pendingEmphasis = _listOfCharCache.Get();
            try
            {
                // Check that an autolink is possible in the current context
                if (!IsAutoLinkValidInCurrentContext(processor, pendingEmphasis))
                {
                    return false;
                }

                int startPosition = slice.Start;
                int domainOffset = 0;

                char c = slice.CurrentChar;
                // Precheck URL
                switch (c)
                {
                    case 'h':
                        if (slice.MatchLowercase("ttp://", 1))
                        {
                            domainOffset = 7; // http://
                        }
                        else if (slice.MatchLowercase("ttps://", 1))
                        {
                            domainOffset = 8; // https://
                        }
                        else return false;
                        break;
                    case 'w':
                        if (!slice.MatchLowercase("ww.", 1)) // We won't match http:/www. or /www.xxx
                        {
                            return false;
                        }
                        domainOffset = 4; // www.
                        break;
                    case 'm':
                        if (!slice.MatchLowercase("ailto:", 1))
                        {
                            return false;
                        }
                        break;
                }

                if (!IsAutoLinkValidInCurrentContext(processor, pendingEmphasis))
                {
                    return false;
                }

                if (!LinkHelper.TryParseUrl(ref slice, out string link, out _))
                {
                    return false;
                }


                // If we have any pending emphasis, remove any pending emphasis characters from the end of the link
                if (pendingEmphasis.Count > 0)
                {
                    for (int i = link.Length - 1; i >= 0; i--)
                    {
                        if (pendingEmphasis.Contains(link[i]))
                        {
                            slice.Start--;
                        }
                        else
                        {
                            if (i < link.Length - 1)
                            {
                                link = link.Substring(0, i + 1);
                            }
                            break;
                        }
                    }
                }

                // Post-check URL
                switch (c)
                {
                    case 'h':
                        if (string.Equals(link, "http://", StringComparison.OrdinalIgnoreCase) ||
                            string.Equals(link, "https://", StringComparison.OrdinalIgnoreCase))
                        {
                            return false;
                        }
                        break;
                    case 'm':
                        int atIndex = link.IndexOf('@');
                        if (atIndex == -1 ||
                            atIndex == 7) // mailto:@ - no email part
                        {
                            return false;
                        }
                        domainOffset = atIndex + 1;
                        break;
                }

                // Do not need to check if a telephone number is a valid domain
                if (!LinkHelper.IsValidDomain(link, domainOffset))
                {
                    return false;
                }

                LinkInline inline = new LinkInline()
                    {
                        Span =
                    {
                        Start = processor.GetSourcePosition(startPosition, out int line, out int column),
                    },
                        Line = line,
                        Column = column,
                        Url = c == 'w' ? "https://" + link : link,
                        IsClosed = true,
                        IsAutoLink = true,
                    };

                int skipFromBeginning = c == 'm' ? 7 : 0; // For mailto: skip "mailto:" for content
                skipFromBeginning = c == 't' ? 4 : skipFromBeginning; // See above but for tel:

                inline.Span.End = inline.Span.Start + link.Length - 1;
                inline.UrlSpan = inline.Span;
                inline.AppendChild(new LiteralInline()
                    {
                        Span = inline.Span,
                        Line = line,
                        Column = column,
                        Content = new StringSlice(slice.Text, startPosition + skipFromBeginning, startPosition + link.Length - 1),
                        IsClosed = true
                    });
                processor.Inline = inline;

                inline.GetAttributes().AddPropertyIfNotExist("target", "_blank");


                return true;
            }
            finally
            {
                _listOfCharCache.Release(pendingEmphasis);
            }
        }

        private bool IsAutoLinkValidInCurrentContext(InlineProcessor processor, List<char> pendingEmphasis)
        {
            // Case where there is a pending HtmlInline <a>
            Inline? currentInline = processor.Inline;
            while (currentInline != null)
            {
                if (currentInline is HtmlInline htmlInline)
                {
                    // If we have a </a> we don't expect nested <a>
                    if (htmlInline.Tag.StartsWith("</a", StringComparison.OrdinalIgnoreCase))
                    {

                        break;
                    }

                    // If there is a pending <a>, we can't allow a link
                    if (htmlInline.Tag.StartsWith("<a", StringComparison.OrdinalIgnoreCase))
                    {
                        return false;
                    }
                }

                // Check previous sibling and parents in the tree
                currentInline = currentInline.PreviousSibling ?? currentInline.Parent;
            }

            // Check that we don't have any pending brackets opened (where we could have a possible markdown link)
            // NOTE: This assume that [ and ] are used for links, otherwise autolink will not work properly
            currentInline = processor.Inline;
            int countBrackets = 0;
            while (currentInline != null)
            {
                if (currentInline is LinkDelimiterInline linkDelimiterInline && linkDelimiterInline.IsActive)
                {
                    if (linkDelimiterInline.Type == DelimiterType.Open)
                    {
                        countBrackets++;
                    }
                    else if (linkDelimiterInline.Type == DelimiterType.Close)
                    {
                        countBrackets--;
                    }
                }
                else
                {
                    // Record all pending characters for emphasis
                    if (currentInline is EmphasisDelimiterInline emphasisDelimiter)
                    {
                        if (!pendingEmphasis.Contains(emphasisDelimiter.DelimiterChar))
                        {
                            pendingEmphasis.Add(emphasisDelimiter.DelimiterChar);
                        }
                    }
                }
                currentInline = currentInline.Parent;
            }

            return countBrackets <= 0;
        }

        private sealed class ListOfCharCache : DefaultObjectCache<List<char>>
        {
            protected override void Reset(List<char> instance)
            {
                instance.Clear();
            }
        }
    }
}