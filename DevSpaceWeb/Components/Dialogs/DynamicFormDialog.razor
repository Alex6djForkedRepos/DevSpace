@using DevSpaceWeb.Components.DynamicForm
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService
@typeparam Model

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <EditForm @ref="@Form" Model="@CloneData"
              OnSubmit="@(context => Submit())">
        <DataAnnotationsValidator />

        <RadzenStack JustifyContent="JustifyContent.Start">
            @if (!string.IsNullOrEmpty(Description))
            {
                <p>@Description</p>
            }
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    @ErrorMessage
                </RadzenAlert>
            }

            @foreach (DynamicFormItem field in FormItems)
            {
                <RadzenLabel Text="@field.Label" class="rz-my-0"></RadzenLabel>
                @RenderFormElement(CloneData, field, field.Property)
                @if (!string.IsNullOrEmpty(field.ErrorMessage))
                {
                    <div class="validation-message" style="color: var(--rz-danger);">@field.ErrorMessage</div>
                }
                <br style="margin-bottom: 6px;" />
            }

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="@(IsDialog ? JustifyContent.End : JustifyContent.Start)" Gap="0.5rem">
            @if (IsDialog)
            {
                <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" Disabled="@LoadingSubmit" />
                <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" Disabled="@LoadingSubmit" />
            }
            else
            {
                <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Text="Save" Click="@Submit" />
                @if (OnTest != null)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Text="Test" Click="@Test" />
                }
            }
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public Model ModelData { get; set; }

    public Model CloneData { get; set; }

    public EditForm Form { get; internal set; }

    public List<DynamicFormItem> FormItems { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public bool IsDialog { get; set; }

    [Parameter]
    public Func<Model, Task<string?>> OnSubmit { get; set; }

    [Parameter]
    public Func<Model, Task>? OnTest { get; set; }

    public string? ErrorMessage { get; set; }

    public bool IsLoaded = false;

    public bool LoadingSubmit = false;

    public RenderFragment RenderFormElement(object model, DynamicFormItem item, PropertyInfo propInfoValue) => builder =>
    {
        bool IsNumber = false;

        if (propInfoValue.PropertyType == typeof(string))
        {
            builder.OpenComponent(0, typeof(RadzenTextBox));
            builder.AddAttribute(1, "value", propInfoValue.GetValue(model));
            builder.AddAttribute(2, "valuechanged", EventCallback.Factory.Create<string>(this, (value) =>
        {
            propInfoValue.SetValue(model, value);
        }));
        }
        else if (propInfoValue.PropertyType == typeof(int))
        {
            builder.OpenComponent(0, typeof(RadzenNumeric<int>));
            builder.AddAttribute(1, "value", propInfoValue.GetValue(model));
            builder.AddAttribute(2, "valuechanged", EventCallback.Factory.Create<int>(this, (value) =>
        {
            propInfoValue.SetValue(model, value);
        }));
            IsNumber = true;
        }
        else if (propInfoValue.PropertyType == typeof(long))
        {
            builder.OpenComponent(0, typeof(RadzenNumeric<long>));
            builder.AddAttribute(1, "value", propInfoValue.GetValue(model));
            builder.AddAttribute(2, "valuechanged", EventCallback.Factory.Create<long>(this, (value) =>
        {
            propInfoValue.SetValue(model, value);
        }));
            IsNumber = true;
        }
        else if (propInfoValue.PropertyType == typeof(short))
        {
            builder.OpenComponent(0, typeof(RadzenNumeric<short>));
            builder.AddAttribute(1, "value", propInfoValue.GetValue(model));
            builder.AddAttribute(2, "valuechanged", EventCallback.Factory.Create<short>(this, (value) =>
        {
            propInfoValue.SetValue(model, value);
        }));
            IsNumber = true;
        }
        else
        {
            throw new Exception("Failed to get dynmaic from type");
        }

        builder.AddAttribute(3, "style", "width: 100%");
        builder.AddAttribute(4, "aria-label", $"{item.Label} Text");

        MaxLengthAttribute? MaxLength = propInfoValue.GetCustomAttribute<MaxLengthAttribute>();
        if (MaxLength != null)
            builder.AddAttribute(5, "maxlength", (Int64)MaxLength.Length);

        AutoCompleteAttribute? AutoComplete = propInfoValue.GetCustomAttribute<AutoCompleteAttribute>();
        if (AutoComplete != null)
            builder.AddAttribute(6, "autocomplete", AutoComplete.Type.GetType().GetMember(AutoComplete.Type.ToString()).First().GetCustomAttribute<DisplayAttribute>().Name);
        else
            builder.AddAttribute(6, "autocomplete", "off");

        if (IsNumber)
        {
            builder.AddAttribute(7, "ShowUpDown", false);
        }

        builder.CloseComponent();
    };

    protected override void OnParametersSet()
    {
        if (IsLoaded)
            return;
        IsLoaded = true;
        CloneData = JsonConvert.DeserializeObject<Model>(JsonConvert.SerializeObject(ModelData));
        FormItems = CloneData.GetType().GetProperties().Select(x => new DynamicFormItem(CloneData, x)).ToList();

    }

    public async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        LoadingSubmit = true;

        foreach (DynamicFormItem i in FormItems)
        {
            if (!i.Validate(CloneData))
            {
                LoadingSubmit = false;
                return;
            }
            i.ErrorMessage = string.Empty;
        }

        ErrorMessage = await OnSubmit.Invoke(CloneData);
        if (string.IsNullOrEmpty(ErrorMessage))
        {
            dialogService.Close(true);
        }
        LoadingSubmit = false;
    }

    public async Task Test()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        LoadingSubmit = true;

        await OnTest.Invoke(CloneData);
        LoadingSubmit = false;
    }
}
