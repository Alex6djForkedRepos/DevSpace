@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceShared.Responses
@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json.Linq
@using global::Docker.DotNet.Models

@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService
@inject NotificationService Notifications

<PageTitle>Import Portainer Stack | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        <RadzenText TextStyle="TextStyle.Body2">
            This will stop the current portainer stack and containers.
        </RadzenText>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                Failed to import stack, @ErrorMessage
            </RadzenAlert>
        }

        @if (Stacks != null)
        {
            @if (!Stacks.IsSuccess)
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                    Failed to list portainer stacks.
                </RadzenAlert>
            }
            else
            {
                <RadzenDropDown @bind-Value="@SelectedStack" Data="@Stacks.Data" Placeholder="Select a stack" TextProperty="@nameof(DockerStackInfo.Name)" Style="width: 100%; max-width: 400px;" />
            }

            @if (IsSuccess)
            {
                <RadzenAlert AlertStyle="AlertStyle.Success" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                    Stack has been imported, you can view the new stack now and delete the old one from portainer.
                </RadzenAlert>
            }
        }
        else
        {
            <RadzenSkeleton Width="400" Height="36"></RadzenSkeleton>
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(IsSuccess))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" Disabled="@IsLoading" />
        <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Import" Style="width: 120px" Disabled="@(IsLoading || IsSuccess || SelectedStack == null)" IsBusy="@IsLoading" />
    </RadzenStack>
</RadzenStack>



@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public ServerData? Server => Session.Selected.Resource as ServerData;
    public TeamMemberData? Member => Session.Selected.Member;

    protected override async Task OnInitializedAsync()
    {
        if (Team == null || Server == null || Member == null)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
        {
            await dialogService.ShowPermissionErrorAsync(DockerContainerPermission.ViewStacks);
            return;
        }

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))
        {
            await dialogService.ShowPermissionErrorAsync(DockerContainerPermission.CreateStacks);
            return;
        }

        Stacks = await Server.RunJsonAsync<List<DockerStackInfo>, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ListPortainerStacks));
    }

    public SocketResponse<List<DockerStackInfo>?>? Stacks = null;
    public DockerStackInfo? SelectedStack = null;

    public string? ErrorMessage;
    public bool IsSuccess;
    public bool IsLoading = false;


    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Team == null || Server == null || Member == null || SelectedStack == null)
            return;

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.ViewStacks))
        {
            await dialogService.ShowPermissionErrorAsync(DockerContainerPermission.ViewStacks);
            return;
        }

        if (!Member.HasDockerContainerPermission(Team, Server, DockerContainerPermission.CreateStacks))
        {
            await dialogService.ShowPermissionErrorAsync(DockerContainerPermission.CreateStacks);
            return;
        }

        IsLoading = true;

        SocketResponse<DockerStackCreate?> Response = await Server.RunJsonAsync<DockerStackCreate, DockerEvent>(Notifications, new DockerEvent(DockerEventType.ControlStack, SelectedStack.Id, stackType: ControlStackType.ImportPortainer)
        {
            Data = AgentJsonOptions.FromObject(new DockerStackInfo
            {
                Id = SelectedStack.Id,
                Name = SelectedStack.Name
            })
        });

        if (Response.IsSuccess)
        {
            IsSuccess = true;
            IsLoading = false;
        }
        else
        {
            ErrorMessage = Response.Message;
        }
    }
}
