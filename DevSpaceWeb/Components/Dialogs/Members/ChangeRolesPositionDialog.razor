@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService
@implements IDisposable

<PageTitle>Change Role Positions | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        <RadzenStack class="rz-picklist-wrapper" Orientation="Orientation.Horizontal" Style="height:500px; width:100%;">
            <RadzenStack class="rz-picklist-source-wrapper">

                <RadzenListBox @bind-Value="@SelectedRole" Data="@RolesList" ItemRender="@((x) => RenderItem(x))"
                LoadData="@LoadData" TextProperty="@nameof(TeamRoleData.Name)" Disabled="@IsUpdating">
                    <Template>
                        <span style="@($"background-color: {RoleBadge.GetColor((context as TeamRoleData)!)};")"></span>
                        @if (Program.IsPreviewMode || Team.OwnerId == Member?.UserId || (context as TeamRoleData)!.GetPosition() < CurrentRank)
                        {
                            @((context as TeamRoleData)!.Name)
                        }
                        else
                        {
                            <span class="iconify" data-icon="mdi:lock"></span> @((context as TeamRoleData)!.Name)
                        }
                    </Template>
                </RadzenListBox>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="12px" class="rz-picklist-buttons">
                <RadzenButton Icon="keyboard_arrow_up" Click="@MoveRoleUp" Disabled="@(SelectedRole == null || IsUpdating)"
                ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Variant="Variant.Filled" Shade="Shade.Default" />
                <RadzenButton Icon="keyboard_arrow_down" Click="@MoveRoleDown" Disabled="@(SelectedRole == null || IsUpdating)"
                ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Variant="Variant.Filled" Shade="Shade.Default" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Close" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>

<style>
    .rz-dialog .rz-multiselect-item-content span {
        display: inline-block;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        margin-bottom: -2px;
        margin-right: 4px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    [Parameter, EditorRequired]
    public TeamData Team { get; set; }

    public TeamMemberData? Member => Session.Selected.Member;

    public IList<TeamRoleData> RolesList { get; set; }
    public TeamRoleData? SelectedRole { get; set; }
    public bool IsUpdating { get; set; }

    protected override void OnInitialized()
    {
        Team.RoleChangeEvent += RoleChanged;
    }

    public ListBoxItemRenderEventArgs<TeamRoleData> RenderItem(ListBoxItemRenderEventArgs<TeamRoleData?> data)
    {
        if (!Program.IsPreviewMode && Team.OwnerId != Member.UserId)
            data.Disabled = (data.Item as TeamRoleData)!.GetPosition() >= CurrentRank;
        return data;
    }

    public void Dispose()
    {
        Team.RoleChangeEvent -= RoleChanged;
    }

    public void RoleChanged(object? sender, Tuple<TeamRoleData?, bool> role)
    {
        if (role.Item1 == null)
            RolesList = Team.CachedRoles.Values.OrderByDescending(x => x.GetPosition()).ToList();
        else if (role.Item2)
            RolesList = RolesList.Append(role.Item1).ToList();
        else
        {
            try
            {
                RolesList.RemoveAt(RolesList.IndexOf(role.Item1));
            }
            catch {}
        }
        CurrentRank = Member.GetRank();
        InvokeAsync(StateHasChanged);
    }

    public int CurrentRank;

    void LoadData(LoadDataArgs args)
    {
        if (RolesList == null)
        {
            CurrentRank = Member.GetRank();
            RolesList = Team.CachedRoles.Values.OrderByDescending(x => x.GetPosition()).ToList();
        }
    }

    public async Task MoveRoleUp()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        if (IsUpdating)
            return;

        IsUpdating = true;
        int CurrentIndex = RolesList.IndexOf(SelectedRole);
        TeamRoleData? TopRole = RolesList.ElementAtOrDefault(CurrentIndex - 1);
        if (TopRole != null)
            Team.UpdateRolesPosition(Member, SelectedRole, true);

        IsUpdating = false;
    }

    public async Task MoveRoleDown()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasTeamPermission(Team, TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        if (IsUpdating)
            return;

        IsUpdating = true;
        int CurrentIndex = RolesList.IndexOf(SelectedRole);

        TeamRoleData? BottomRole = RolesList.ElementAtOrDefault(CurrentIndex + 1);
        if (BottomRole != null)
            Team.UpdateRolesPosition(Member, SelectedRole, false);

        IsUpdating = false;
    }

}
