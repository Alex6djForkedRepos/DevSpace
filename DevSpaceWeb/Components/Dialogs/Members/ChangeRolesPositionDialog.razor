@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService
@implements IDisposable

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        <RadzenStack class="rz-picklist-wrapper" Orientation="Orientation.Horizontal" Style="height:500px; width:100%;">
            <RadzenStack class="rz-picklist-source-wrapper">

                <RadzenListBox @bind-Value="@SelectedRole" Data="@RolesList" ItemRender="@((x) => RenderItem(x))"
                LoadData="@LoadData" TextProperty="@nameof(TeamRoleData.Name)" Disabled="@IsUpdating">
                    <Template>
                        @if (Program.IsPreviewMode || Team.OwnerId == Member.UserId || (context as TeamRoleData).Position < CurrentRank)
                        {
                            @((context as TeamRoleData).Name)
                        }
                        else
                        {
                            <span class="iconify" data-icon="mdi:lock"></span> @((context as TeamRoleData).Name)
                        }

                    </Template>
                </RadzenListBox>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="12px" class="rz-picklist-buttons">
                <RadzenButton Icon="keyboard_arrow_up" Click="@MoveRoleUp" Disabled="@(SelectedRole == null || IsUpdating)"
                ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Variant="Variant.Filled" Shade="Shade.Default" />
                <RadzenButton Icon="keyboard_arrow_down" Click="@MoveRoleDown" Disabled="@(SelectedRole == null || IsUpdating)"
                ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Variant="Variant.Filled" Shade="Shade.Default" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
        <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public TeamData Team { get; set; }

    public TeamMemberData Member => Session.Selected.Member;

    public IList<TeamRoleData> RolesList { get; set; }
    public TeamRoleData? SelectedRole { get; set; }
    public bool IsUpdating { get; set; }

    protected override void OnInitialized()
    {
        Team.RoleChangeEvent += RoleChanged;
    }

    public ListBoxItemRenderEventArgs<TeamRoleData> RenderItem(ListBoxItemRenderEventArgs<TeamRoleData> data)
    {
        if (!Program.IsPreviewMode && Team.OwnerId != Member.UserId)
            data.Disabled = (data.Item as TeamRoleData).Position >= CurrentRank;
        return data;
    }

    public void Dispose()
    {
        Team.RoleChangeEvent -= RoleChanged;
    }

    public void RoleChanged(object sender, Tuple<TeamRoleData?, bool> role)
    {
        if (role.Item1 == null)
            RolesList = Team.CachedRoles.Values.OrderByDescending(x => x.Position).ToList();
        else if (role.Item2)
            RolesList = RolesList.Prepend(role.Item1).ToList();
        else
        {
            try
            {
                RolesList.RemoveAt(RolesList.IndexOf(role.Item1));
            }
            catch {}
        }
        CurrentRank = Member.GetRank();
        InvokeAsync(StateHasChanged);
    }

    public int CurrentRank;

    void LoadData(LoadDataArgs args)
    {
        if (RolesList == null)
        {
            CurrentRank = Member.GetRank();
            RolesList = Team.CachedRoles.Values.OrderByDescending(x => x.Position).ToList();
        }
    }

    public async Task MoveRoleUp()
    {
        CurrentRank = Member.GetRank();
        int Index = RolesList.IndexOf(SelectedRole);
        if (!Program.IsPreviewMode)
        {
            if (Index == 0 || IsUpdating || (Team.OwnerId != Member.UserId && CurrentRank >= (Index - 1)))
                return;
        }
        RolesList.RemoveAt(Index);
        RolesList.Insert(Index - 1, SelectedRole);
    }

    public async Task MoveRoleDown()
    {
        CurrentRank = Member.GetRank();
        int Index = RolesList.IndexOf(SelectedRole);

        if (!Program.IsPreviewMode)
        {
            if (Index == (RolesList.Count - 1) || IsUpdating || (Team.OwnerId != Member.UserId && CurrentRank >= Index))
                return;
        }
        RolesList.RemoveAt(Index);
        RolesList.Insert(Index + 1, SelectedRole);
    }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Member.HasTeamPermission(TeamPermission.ManageRoles))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageRoles);
            return;
        }

        if (IsUpdating)
            return;

        IsUpdating = true;

        List<WriteModel<TeamRoleData>> list = new List<WriteModel<TeamRoleData>>();
        bool Stop = false;
        int Index = 0;
        Dictionary<TeamRoleData, int> Positions = new Dictionary<TeamRoleData, int>();
        CurrentRank = Member.GetRank();
        foreach (TeamRoleData r in RolesList.Reverse())
        {
            if (r.Position != Index && Team.OwnerId != Member.UserId && Index >= CurrentRank)
            {
                Stop = true;
                break;
            }

            FilterDefinition<TeamRoleData> filter = new FilterDefinitionBuilder<TeamRoleData>().Eq(x => x.Id, r.Id);
            UpdateDefinition<TeamRoleData> upd = new UpdateDefinitionBuilder<TeamRoleData>().Set(x => x.Position, Index);
            list.Add(new UpdateOneModel<TeamRoleData>(filter, upd));
            Positions.Add(r, Index);
            Index += 1;
        }
        if (Stop)
            return;

        BulkWriteResult<TeamRoleData> result = await _DB.Roles.Collection.BulkWriteAsync(list);

        if (result.IsAcknowledged)
        {
            foreach (var r in Positions)
            {
                r.Key.Position = r.Value;
            }
            Team.TriggerRoleChange(null, true);
        }

        dialogService.Close(true);
        
    }
}
