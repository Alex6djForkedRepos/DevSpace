@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<PageTitle>Edit Account | @_Data.Config.Instance.Name</PageTitle>
<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <EditForm Model="@AccountForm" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack JustifyContent="JustifyContent.Start">
            <RadzenText TextStyle="TextStyle.Body2">
                Username must be unique and is visible to everyone in your teams.
            </RadzenText>
            <br />

            <RadzenLabel Text="Username" class="rz-my-0"></RadzenLabel>
            <RadzenTextBox @bind-Value="@AccountForm.Username" Style="width: 100%" aria-label="Username TextBox" AutoCompleteType="AutoCompleteType.Off"
            autocapitalize="none" MaxLength="32" />
            <ValidationMessage For="() => AccountForm.Username" style="color: var(--rz-danger);" />

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public AccountEditModel AccountForm = new AccountEditModel();

    protected override void OnInitialized()
    {
        AccountForm.Username = Session.CurrentUser.UserName;
    }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        if (!string.IsNullOrEmpty(AccountForm.Username) && !user.UserName.Equals(AccountForm.Username, StringComparison.OrdinalIgnoreCase))
        {
            IdentityResult Result = await UserManager.SetUserNameAsync(user, AccountForm.Username);
            if (Result.Succeeded)
            {
                Session.CurrentUser.UserName = AccountForm.Username;
                user.UserName = AccountForm.Username;
            }
        }
        Session.TriggerChange();
        _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
        
        dialogService.Close(true);
    }
}
