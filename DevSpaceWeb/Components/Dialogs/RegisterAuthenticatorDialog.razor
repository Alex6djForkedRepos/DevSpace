@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject AuthenticatorTokenProvider<AuthUser> Authenticator
@inject UserManager<AuthUser> UserManager
@inject IJSRuntime JS
@inject Radzen.DialogService dialogService

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <EditForm Model="@RegisterModel" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack>
            <p>Scan this QR code or copy the setup key into any Authenticator app.</p>
            <br />
            <div id="qrcode" style="max-height: 228px !important; max-width: 228px !important;">

            </div>
            <br />
            <br />
            <RadzenLabel Text="Code" class="rz-my-0"></RadzenLabel>
            <div>
                <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@RegisterModel.Code" Count="6" aria-label="Auth Code" autofocus />
            </div>
            <ValidationMessage For="() => RegisterModel.Code" style="color: var(--rz-danger);" />

            <br style="margin-bottom: 20px;" />

            <RadzenLabel Text="Device Name" class="rz-my-0"></RadzenLabel>
            <RadzenTextBox @bind-Value="@RegisterModel.DeviceName" Style="width: 100%" aria-label="Device Name TextBox" autocomplete="false" MaxLength="100" />
            <ValidationMessage For="() => RegisterModel.DeviceName" style="color: var(--rz-danger);" />

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

<style>
    #qrcode {
    background-color: white;
    padding: 6px;
    width: 142px;
    }

    #qrcode img {
    max-width: 128px;
    max-height: 128px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            JS.InvokeVoidAsync("window.Utils.loadQR", SetupUrl);

    }

    [Parameter]
    public string SetupKey { get; set; }

    [Parameter]
    public string SetupUrl { get; set; }

    public AccountRegisterAuthenticatorModel RegisterModel = new AccountRegisterAuthenticatorModel();

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        bool Test = await Authenticator.ValidateAsync("", RegisterModel.Code, UserManager, user);
        if (Test)
        {
            user.Mfa.AuthenticatorLastRegisteredAt = DateTime.UtcNow;
            if (user.Mfa.AuthenticatorDevices.TryAdd(RegisterModel.DeviceName, true))
            {
                user.Mfa.IsTwoFactorEnabled = true;
                await UserManager.UpdateAsync(user);
                _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
                dialogService.Close(true);
            }
        }


    }
}