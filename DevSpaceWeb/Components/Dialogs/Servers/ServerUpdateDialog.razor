@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json.Linq
@using global::Docker.DotNet.Models
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService
@inject NotificationService Notifications
@implements IDisposable

<PageTitle>Account Change Avatar | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        @switch (UpdateStatus)
        {
            case UpdateStatusType.Checking:
                {
                    <h6>Checking for Update</h6>
                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" />
                }
                break;
            case UpdateStatusType.CheckFailed:
                {
                    <h6>Update Check Failed</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Failed to check for an update.
                    </RadzenText>
                }
                break;
            case UpdateStatusType.UpdateAvailable:
                {
                    <h6>Update Available!</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        An update for the Dev Space Agent service on this server is available, press Update to start the process.
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Current: @Server?.GetAgentVersion()
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Latest: @("v" + Version!.AgentVersion)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1 mt-2">Select Version</RadzenText>
                    <RadzenDropDown @bind-Value="@SelectedVersionType" Data="@VersionTypes" Style="width: 100%; max-width: 400px;" />
                }
                break;
            case UpdateStatusType.AlreadyUpdated:
                {
                    <h6>Already Updated</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        This server already has the latest version @("v" + Version!.AgentVersion) for the Dev Space Agent.
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-1 mt-2">Select Version</RadzenText>
                    <RadzenDropDown @bind-Value="@SelectedVersionType" Data="@VersionTypes" Style="width: 100%; max-width: 400px;" />
                }
                break;
            case UpdateStatusType.UpdatingNow:
                {
                    <h6>Updating...</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Please wait this will take a minute.
                    </RadzenText>
                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall" />
                }
                break;
            case UpdateStatusType.UpdateSuccess:
                {
                    <h6>Update Complete!</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        You can now close this dialog to refresh the server page.
                    </RadzenText>
                }
                break;
            case UpdateStatusType.UpdateFailed:
                {
                    <h6>Update Failed!</h6>
                    <RadzenText TextStyle="TextStyle.Body2">
                        :( something broke when trying to update the agent.
                    </RadzenText>
                }
                break;
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => { dialogService.Close(false); })" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Close" Style="width: 90px" Disabled="@(UpdateStatus == UpdateStatusType.UpdatingNow)" />
        <RadzenButton Click="@RunUpdate" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Update" Style="width: 100px" Disabled="@((UpdateStatus != UpdateStatusType.UpdateAvailable && UpdateStatus != UpdateStatusType.AlreadyUpdated) || UpdateStatus == UpdateStatusType.UpdateSuccess)" />
    </RadzenStack>
</RadzenStack>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public VersionCheck? Version;

    public string SelectedVersionType = "Release";
    public string[] VersionTypes = new string[]
    {
        "Release",
        "Development"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                string Test = await Program.Http.GetStringAsync("https://devspacesmtp.fluxpoint.dev/version");
                Version = Newtonsoft.Json.JsonConvert.DeserializeObject<VersionCheck>(Test);
                string? ServerVersion = Server?.GetWebSocket()?.Discover?.Version;
                if (ServerVersion != Version!.AgentVersion)
                    UpdateStatus = UpdateStatusType.UpdateAvailable;
                else
                    UpdateStatus = UpdateStatusType.AlreadyUpdated;
            }
            catch
            {
                UpdateStatus = UpdateStatusType.CheckFailed;
            }
            StateHasChanged();
        }
    }

    async Task RunUpdate()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (Server == null || Member == null || !Member.HasServerPermission(Team, Server, ServerPermission.ServerAdministrator))
            return;

        UpdateStatus = UpdateStatusType.UpdatingNow;

        SocketResponse<ContainerInspectResponse?> Result = await Server.RunJsonAsync<ContainerInspectResponse>(Notifications, new DockerEvent(DockerEventType.ControlContainer, "devspace-agent", containerType: ControlContainerType.Inspect));

        if (!Result.IsSuccess || Result.Data == null)
        {
            UpdateStatus = UpdateStatusType.UpdateFailed;
            return;
        }

        string? UpdatePath = Result.Data.HostConfig.Binds.FirstOrDefault(x => x.Contains(":/app/Data"));
        if (string.IsNullOrEmpty(UpdatePath))
        {
            UpdateStatus = UpdateStatusType.UpdateFailed;
            return;
        }

        List<string> Volumes = new List<string>();
        foreach(var i in Result.Data.Mounts)
        {
            if (i.Type == "volume")
            {
                Volumes.Add($"{i.Name}:{i.Destination}" + (i.RW == false ? ":ro" : null));
            }
            else
            {
                if (i.Destination == "/app" || i.Destination == "/usr/bin/docker" || i.Destination == "/usr/libexec/docker/cli-plugins/docker-compose")
                    continue;

                Volumes.Add($"{i.Source}:{i.Destination}" + (i.RW == false ? ":ro" : null));
            }
        }

        string HostPort = Result.Data.HostConfig.PortBindings.First().Value.First().HostPort;

        string RunCommand = "docker run -d \\ " +
        $"-p {HostPort}:5555 \\ " +
        "--name devspace-agent-new \\ " +
        "--pull always \\ " +
        "--restart on-failure:3 \\ -v " +
        string.Join(" \\ -v ", Volumes) + " \\ " +
        "ghcr.io/fluxpointdev/devspace/agent:" + (SelectedVersionType == "Release" ? "latest" : "master");

        string Compose = @"services:
  devspace-agent-updater:
    container_name: devspace-agent-updater
    image: docker:dind
    command: sh -c ""docker container stop devspace-agent && docker rm -f devspace-agent-new && " + RunCommand + @" && docker rm -f devspace-agent && docker container rename devspace-agent-new devspace-agent""
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
    network_mode: bridge
    dns:
      - 1.1.1.2
      - 1.0.0.2";

        Console.WriteLine("Compose: " + Compose);

        SocketResponse<DockerStackCreate?> res = await Server.RunJsonAsync<DockerStackCreate>(Notifications, new DockerEvent(DockerEventType.CreateStack)
        {
            Data = JObject.FromObject(new CreateStackEvent
            {
                Name = "devspace-agent-updater-" + ObjectId.GenerateNewId().ToString(),
                PullImage = true,
                Content = Compose,
                IsAdministrator = true
            })
        });

        await Server.RecieveJsonAsync<object>(new DockerEvent(DockerEventType.ControlStack, res.Data.Id, stackType: ControlStackType.Start));

        _ = Task.Run(async () =>
            {
                await Task.Delay(new TimeSpan(0, 0, 3));
                bool IsSuccess = Server.IsConnected;
                if (!IsSuccess)
                {
                    await Task.Delay(new TimeSpan(0, 0, 3));
                    IsSuccess = Server.IsConnected;
                }
                if (!IsSuccess)
                {
                    await Task.Delay(new TimeSpan(0, 0, 3));
                    IsSuccess = Server.IsConnected;
                }
                if (!IsSuccess)
                {
                    await Task.Delay(new TimeSpan(0, 0, 3));
                    IsSuccess = Server.IsConnected;
                }

                if (IsSuccess)
                {
                    UpdateStatus = UpdateStatusType.UpdateSuccess;

                    try
                    {
                        await Server.RecieveJsonAsync<object>(new DockerEvent(DockerEventType.ControlContainer, "devspace-agent-updater", containerType: ControlContainerType.ForceRemove));
                    }
                    catch { }

                    try
                    {
                        await Server.RecieveJsonAsync<object>(new DockerEvent(DockerEventType.ControlStack, res.Data.Id, stackType: ControlStackType.Remove));
                    }
                    catch { }
                }
                else
                {
                    UpdateStatus = UpdateStatusType.UpdateFailed;
                }
                

            InvokeAsync(StateHasChanged);
        });
    }

    public bool CheckingUpdate = true;

    public void Dispose()
    {
        CheckingUpdate = false;
    }

    UpdateStatusType UpdateStatus; 

    public enum UpdateStatusType
    {
        Checking, CheckFailed, UpdateAvailable, AlreadyUpdated, UpdatingNow, UpdateFailed, UpdateSuccess
    }
}
