@using DevSpaceShared.Data
@using DevSpaceShared.Events.Docker
@using DevSpaceWeb.Agents
@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using DevSpaceWeb.Models.Setup
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json.Linq
@using System.Net
@using global::Docker.DotNet.Models
@inject UserManager<AuthUser> UserManager
@inject DialogService Dialogs
@inject NotificationService Notifications
@inject IJSRuntime JS

<PageTitle>Server Setup | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        @if (Member == null || Team == null || !Member.HasServerPermission(Team, null, ServerPermission.CreateServerResource))
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                You do not have permission for Create Server Resources
            </RadzenAlert>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.Body1" class="ml-2">Automatically setup servers by running this command.</RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" style="padding: 8px; padding-top: 0px !important; padding-bottom: 16px !important; background-color: var(--rz-input-background-color);">
                <span style="display: block;">docker run -d --name devspace-agent \ </span>
                <span style="display: block;">--pull always \ </span>
                <span style="display: block;">--restart on-failure:3 \ </span>
                <span style="display: block;">-e EDGE_HOST=@_Data.Config.Instance.PublicDomain \ </span>
                <span style="display: block;">-e EDGE_TEAM=@Team.Id.ToString() \ </span>
                <span style="display: block;">-e EDGE_ONBOARD=@Team.EdgeOnboardKey \ </span>
                <span style="display: block;">-v devspace_agent:/app/Data \ </span>
                <span style="display: block;">-v /var/run/docker.sock:/var/run/docker.sock:ro \ </span>
                <span style="display: block;">-v /var/lib/docker/volumes/portainer_data/_data/custom_templates:/var/lib/docker/volumes/portainer_data/_data/custom_templates:ro \ </span>
                <span style="display: block;">ghcr.io/fluxpointdev/devspace/agent:latest</span>
            </RadzenText>
            <br />
            <RadzenButton ButtonStyle="@(IsCopied ? ButtonStyle.Success: ButtonStyle.Info)" Shade="Shade.Dark" Text="Copy Command" Click="@CopyCommand" />
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => { Dialogs.Close(false); })" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Close" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public TeamData? Team => Session.Selected.Team?.Data;
    public TeamMemberData? Member => Session.Selected.Member;
    public ServerData? Server => Session.Selected.Server;

    public string GetEdgeConnectionCommand()
    {
        return ("docker run -d --name devspace-agent \\ " +
 "--pull always \\ " +
 "--restart on-failure:3 \\ " +
 "-e EDGE_HOST={0} \\ " +
 "-e EDGE_TEAM={1} \\ " +
 "-e EDGE_ONBOARD={2} \\ " +
 "-v devspace_agent:/app/Data \\ " +
 "-v /var/run/docker.sock:/var/run/docker.sock:ro \\ " +
 "-v /var/lib/docker/volumes/portainer_data/_data/custom_templates:/var/lib/docker/volumes/portainer_data/_data/custom_templates:ro \\ " +
 "ghcr.io/fluxpointdev/devspace/agent:latest"
        ).Replace("{0}", _Data.Config.Instance.PublicDomain)
        .Replace("{1}", Team.Id.ToString())
        .Replace("{2}", Team.EdgeOnboardKey);
    }

    public bool IsCopied { get; set; }

    public async Task CopyCommand()
    {
        try
        {
            await JS.InvokeAsync<dynamic>("navigator.clipboard.writeText", GetEdgeConnectionCommand());
        }
        catch { }
        IsCopied = true;
    }
}
