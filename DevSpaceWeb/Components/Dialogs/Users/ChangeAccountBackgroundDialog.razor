@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<PageTitle>Account Change Background | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        <RadzenText TextStyle="TextStyle.Body2">
            Upload an image to use as your Background!
        </RadzenText>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="6px">
            <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Png" />
            <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Jpeg" />
            <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Webp" />
        </RadzenStack>
        <br />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                @(ErrorMessage)
            </RadzenAlert>
        }

        <RadzenUpload id="ddUpload" @ref="uploadDD" Icon="add_photo_alternate" ChooseText="   Click here or drop to upload file" Auto="false" Multiple="false" Url="/upload/background" Accept="image/png, image/webp, image/jpeg" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                      Style="width: 100%" MaxFileCount="1" Complete="@UploadComplete" Error="@UploadError" Disabled="@IsUploadDisabled" />

    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
        <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" Disabled="@(IsUploadDisabled)" />
    </RadzenStack>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public bool RemoveBackground { get; set; }

    RadzenUpload uploadDD = null!;
    public bool IsUploadDisabled { get; set; }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        IsUploadDisabled = true;
        await uploadDD.Upload();
    }

    public string ErrorMessage { get; set; }

    async Task UploadError(UploadErrorEventArgs args)
    {
        ErrorMessage = args.Message;
        IsUploadDisabled = false;
    }

    async Task UploadComplete(UploadCompleteEventArgs args)
    {
        dialogService.Close(true);

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
            return;

        if (Session.CurrentUser != null)
            Session.CurrentUser.ResourceId = user.ResourceId;

        Session.BackgroundUrl = new FileResource("Background", user.ResourceId, user.BackgroundId).Url("webp");

        Session.TriggerChange();
    }
}
