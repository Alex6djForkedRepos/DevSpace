@using DevSpaceWeb.Models.Defaults
@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Components.Forms
@inject UserManager<AuthUser> UserManager
@inject EmailService EmailService
@inject NavigationManager NavigationManager
@inject Radzen.DialogService dialogService

<PageTitle>Account Change Email | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <EditForm Model="@EmailForm" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack>
            @if (IsEmailSent)
            {
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                    An email has been sent to @EmailAddress
                </RadzenAlert>
            }
            else
            {
                <RadzenText TextStyle="TextStyle.Body2">
                    Changing your email address will require verification with the current email address.
                </RadzenText>
                <br />
                <RadzenLabel Text="Email" class="rz-my-05"></RadzenLabel>
                <RadzenTextBox @bind-Value="@EmailForm.Email" Style="width: 100%" aria-label="Email TextBox" AutoCompleteType="AutoCompleteType.Off" autofocus inputmode="email"
                autocapitalize="none" MaxLength="100" />
                <ValidationMessage For="() => EmailForm.Email" style="color: var(--rz-danger);" />

                @if (IsEmailTaken)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                        This email address is already registered.
                    </RadzenAlert>
                }
            }
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public EmailModel EmailForm = new EmailModel();

    public bool IsEmailSent { get; set; }
    public bool IsEmailTaken { get; set; }
    public string EmailAddress { get; set; }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        if (user.Email.Equals(EmailForm.Email, StringComparison.OrdinalIgnoreCase))
        {
            IsEmailTaken = true;
            return;
        }

        AuthUser? FindUser = await UserManager.FindByEmailAsync(EmailForm.Email);
        if (FindUser != null)
        {
            IsEmailTaken = true;
            return;
        }
        string Code = await UserManager.GenerateChangeEmailTokenAsync(user, EmailForm.Email);
        Code = Uri.EscapeDataString(Code);

        string EmailEscape = Uri.EscapeDataString(EmailForm.Email);
        EmailAddress = user.Email;
        await EmailService.SendEmailChangeRequest(user, (NavigationManager.BaseUri + "/user/change_email?email=" + EmailEscape + "&token=" + Code));
        IsEmailSent = true;
    }
}
