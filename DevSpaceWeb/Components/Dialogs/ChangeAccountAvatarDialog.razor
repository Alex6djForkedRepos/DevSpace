@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
        <RadzenStack JustifyContent="JustifyContent.Start">
            <p>Upload an image to use as your Avatar!</p>
            <p>Accepts Png, Jpg or Webp</p>

            <div>
            <RadzenCheckBox @bind-Value="@RemoveAvatar" Name="RemoveAvatarCheckbox" />
            <RadzenLabel Text="Remove Avatar" Component="RemoveAvatarCheckbox" class="rz-ms-2" />
            </div>

        <RadzenUpload id="ddUpload" @ref="uploadDD" ChooseText="Click here or drop to upload file" Auto="false" Multiple="false" Url="/upload/avatar" Accept="image/png, image/webp, image/jpeg" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                      Style="width: 100%" MaxFileCount="1" Complete="@UploadComplete" />
            
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public bool RemoveAvatar { get; set; }

    RadzenUpload uploadDD;

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
            return;

        uploadDD.Disabled = true;

        if (RemoveAvatar)
        {
            if (!user.HasAvatar)
            {
                dialogService.Close(false);
                return;
            }

            File.Delete(user.Avatar.Path("webp"));
            File.Delete(user.Avatar.Path("png"));
            user.AvatarId = null;

            await UserManager.UpdateAsync(user);

            user.UpdatePartial();

            dialogService.Close(true);
        }
        else
        {

            await uploadDD.Upload();
        }
    }

    async Task UploadComplete(UploadCompleteEventArgs args)
    {
        dialogService.Close(true);
    }
}
