@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <EditForm Model="@UsernameForm" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack JustifyContent="JustifyContent.Start">
            <p>Your username must be unique and is visible to everyone in your teams.</p>

            <br />

            <RadzenLabel Text="Username" class="rz-my-0"></RadzenLabel>
            <RadzenTextBox @bind-Value="@UsernameForm.Username" Style="width: 100%" aria-label="Username TextBox" autocomplete="off" autofocus
                autocapitalize="none" MaxLength="32" />
            <ValidationMessage For="() => UsernameForm.Username" style="color: var(--rz-danger);" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public UsernameModel UsernameForm = new UsernameModel();

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null || user.UserName.Equals(UsernameForm.Username, StringComparison.OrdinalIgnoreCase))
            return;

        var Result = await UserManager.SetUserNameAsync(user, UsernameForm.Username);
        if (Result.Succeeded)
        {
            Session.TriggerChange();
            _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
            dialogService.Close(true);
        }

    }
}
