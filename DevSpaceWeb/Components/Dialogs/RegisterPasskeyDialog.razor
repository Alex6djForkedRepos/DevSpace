@using DevSpaceWeb.Fido2
@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using Microsoft.Extensions.Caching.Distributed
@inject AuthenticatorTokenProvider<AuthUser> Authenticator
@inject UserManager<AuthUser> UserManager
@inject IJSRuntime JS
@inject Radzen.DialogService dialogService
@inject IMemoryCache Cache

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <EditForm Model="@RegisterModel" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack>
            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                Passkey uses device authentication using Windows hello, Apple id, Android or Yubikey to verify yourself as a 2FA (Two-factor authentication) method.
            </RadzenAlert>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    @ErrorMessage
                </RadzenAlert>
            }

            <RadzenLabel Text="Device Name" class="rz-my-0"></RadzenLabel>
            <RadzenTextBox @bind-Value="@RegisterModel.DeviceName" Style="width: 100%" aria-label="Device Name TextBox" autocomplete="false" MaxLength="100" />
            <ValidationMessage For="() => RegisterModel.DeviceName" style="color: var(--rz-danger);" />

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" Disabled="@IsLoading" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public string ErrorMessage { get; set; }
    public bool IsLoading { get; set; }

    public AccountRegisterAuthenticatorModel RegisterModel = new AccountRegisterAuthenticatorModel
        {
            Code = "dummy"
        };

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        IsLoading = true;

        AuthUser? user = await Session.GetCurrentUserAsync();
        if (user == null)
        {
            IsLoading = false;
            ErrorMessage = "Failed to load your account.";
            return;
        }

        if (user.Mfa.Passkeys.Any(x => x.Name.Equals(RegisterModel.DeviceName)))
        {
            IsLoading = false;
            ErrorMessage = "This device name is already registered, try another one.";
            return;
        }

        if (user.Mfa.PasskeyId == null)
        {
            user.Mfa.PasskeyId = MongoDB.Bson.ObjectId.GenerateNewId();
            await UserManager.UpdateAsync(user);
        }

        bool IsSuccess = false;
        string? PasskeyRequestId = Guid.NewGuid().ToString();
        Cache.Set("passkey-" + PasskeyRequestId, new AuthRequest(user.Id, false), new TimeSpan(0, 5, 0));

        try
        {
            IsSuccess = await JS.InvokeAsync<bool>("window.Passkey.passkeyStartRegister", RegisterModel.DeviceName, PasskeyRequestId);
        }
        catch { }
        user = await Session.GetCurrentUserAsync();

        AuthRequest? Data = Cache.Get<AuthRequest>("passkey-" + PasskeyRequestId);
        if (!IsSuccess || Data == null || user == null || Data.UserId != user.Id || !Data.IsSuccess)
        {
            IsLoading = false;
            ErrorMessage = "Failed passkey verification.";
            return;
        }

        _DB.TriggerSessionEvent(user.Id, SessionEventType.AccountUpdate);
        dialogService.Close();
        await dialogService.ShowInfoAsync("Passkey Added", $"The passkey for {RegisterModel.DeviceName} has been added to your account.");
        IsLoading = false;
    }
}