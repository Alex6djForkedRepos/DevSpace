@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack>
        <p>Enter your current password then confirm the new password.</p>
        <RadzenLabel Text="Current Password" class="rz-my-0"></RadzenLabel>
        <RadzenTextBox @bind-Value="CurrentPassword" Style="width: 100%" aria-label="Current Password TextBox" autofocus autocomplete="current-password" />

        <br style="margin-bottom: 20px;" />

        <RadzenLabel Text="New Password" class="rz-my-0"></RadzenLabel>
        <RadzenPassword @bind-Value="@NewPassword" Style="width: 100%" aria-label="New Password TextBox" autocomplete="new-password" />

        <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
        <RadzenPassword Style="width: 100%" aria-label="Confirm Password TextBox" autocomplete="new-password" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
        <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public string CurrentPassword { get; set; }

    public string NewPassword { get; set; }

    public bool FormValid { get; set; }

    async Task Submit()
    {
        if (!FormValid)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        var User = await Session.GetCurrentUserAsync();
        var CheckPassword = await UserManager.CheckPasswordAsync(User, CurrentPassword);
        if (!CheckPassword)
            return;

        User.Auth.PasswordChangedAt = DateTimeOffset.UtcNow;
        await UserManager.ChangePasswordAsync(User, CurrentPassword, NewPassword);

        dialogService.Close(true);
    }

    private string PasswordMatch(string arg)
    {
        if (NewPassword != arg)
            return "Passwords don't match";
        return null;
    }
}
