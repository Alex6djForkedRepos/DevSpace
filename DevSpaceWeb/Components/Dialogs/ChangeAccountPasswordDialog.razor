@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Forms
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<PageTitle>Account Change Password | @_Data.Config.Instance.Name</PageTitle>
<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <EditForm Model="@ChangePasswordForm" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />

        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Body2">
                Enter your current password then confirm the new password.
            </RadzenText>
            @if (IsCurrentPasswordInvalid)
            {
                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                    Current password is incorrect
                </RadzenAlert>
            }
            else
            {
                <br />
            }

            <RadzenLabel Text="Current Password" class="rz-my-0"></RadzenLabel>
            <RadzenPassword @bind-Value="@ChangePasswordForm.CurrentPassword" Style="width: 100%" aria-label="Current Password TextBox" autofocus maxlength="100"
            AutoCompleteType="AutoCompleteType.CurrentPassword" />
            <ValidationMessage For="() => ChangePasswordForm.CurrentPassword" style="color: var(--rz-danger);" />

            <br style="margin-bottom: 20px;" />

            <RadzenLabel Text="New Password" class="rz-my-0"></RadzenLabel>
            <RadzenPassword @bind-Value="@ChangePasswordForm.NewPassword" Style="width: 100%" aria-label="New Password TextBox" AutoCompleteType="AutoCompleteType.NewPassword" maxlength="100" />
            <ValidationMessage For="() => ChangePasswordForm.NewPassword" style="color: var(--rz-danger);" />

            <br style="margin-bottom: 20px;" />

            <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
            <RadzenPassword @bind-Value="@ChangePasswordForm.RepeatPassword" Style="width: 100%" aria-label="Confirm Password TextBox" AutoCompleteType="AutoCompleteType.NewPassword" />
            <ValidationMessage For="() => ChangePasswordForm.RepeatPassword" style="color: var(--rz-danger);" />

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public AccountChangePasswordWithCurrentModel ChangePasswordForm = new AccountChangePasswordWithCurrentModel
        {
            Email = "dummy@email.com"
        };

    public bool IsCurrentPasswordInvalid { get; set; }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        AuthUser User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        bool CheckPassword = await UserManager.CheckPasswordAsync(User, ChangePasswordForm.CurrentPassword);
        if (!CheckPassword)
        {
            IsCurrentPasswordInvalid = true;
            return;
        }

        IsCurrentPasswordInvalid = false;

        User.Account.PasswordChangedAt = DateTime.UtcNow;
        User.Account.PasswordStrength = Utils.GetPasswordStrength(ChangePasswordForm.NewPassword);
        await UserManager.ChangePasswordAsync(User, ChangePasswordForm.CurrentPassword, ChangePasswordForm.NewPassword);

        dialogService.Close(true);
    }
}
