@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject UserManager<AuthUser> UserManager

<MudDialog>
    <DialogContent>
        <MudText>Enter your current password then confirm the new password.</MudText>
        <br />
        <MudForm @bind-IsValid="@FormValid">
            <MudTextField @bind-Value="CurrentPassword" Required="true" ShrinkLabel="true" Label="Current Password" Variant="Variant.Filled" Underline="false"></MudTextField>
            <br />
            <br />
            <MudTextField T="string" Label="New Password" HelperText="Choose a strong password" @bind-Value="NewPassword"
                          InputType="InputType.Password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                          Validation="@(new Func<string, IEnumerable<string>>(Validation.PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />

            <br style="margin-bottom: 20px;" />

            <MudTextField T="string"
                          Label="Confirm Password" HelperText="Repeat the password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel </MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Text" OnClick="@Submit" Disabled="!FormValid">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public string CurrentPassword { get; set; }

    public string NewPassword { get; set; }

    public bool FormValid { get; set; }

    async Task Submit()
    {
        if (!FormValid)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        var User = await Session.GetCurrentUserAsync();
        var CheckPassword = await UserManager.CheckPasswordAsync(User, CurrentPassword);
        if (!CheckPassword)
            return;

        User.Auth.PasswordChangedAt = DateTimeOffset.UtcNow;
        await UserManager.ChangePasswordAsync(User, CurrentPassword, NewPassword);

        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();

    private string PasswordMatch(string arg)
    {
        if (NewPassword != arg)
            return "Passwords don't match";
        return null;
    }
}
