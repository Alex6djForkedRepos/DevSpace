@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Distributed
@inject UserManager<AuthUser> UserManager
@inject EmailService Email
@inject NavigationManager NavigationManager
@inject AuthenticatorTokenProvider<AuthUser> Authenticator
@inject Radzen.DialogService dialogService
@inject IJSRuntime JS
@inject IMemoryCache Cache

<PageTitle>2FA Verify | @_Data.Config.Instance.Name</PageTitle>

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack>
        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
            Two-factor authentication is required!
        </RadzenAlert>
        @switch (AuthType)
        {
            case TwoFactorSelector.Menu:
                {
                    if (User != null)
                    {
                        if (User.Mfa.IsTwoFactorEnabled)
                        {
                            <div class="twofactor-item twofactor-item-disabled">
                                <span class="iconify" data-icon="mdi:cloud-key"></span>
                                <h6>Email Code</h6>
                                <p>Disabled with more secure options</p>
                            </div>
                            <div class="twofactor-item @(User.Mfa.AuthenticatorDevices.Any(x => x.Value == true) ? "" : "twofactor-item-disabled")" @onclick="(() => { if (User.Mfa.AuthenticatorDevices.Any(x => x.Value == true)) { AuthType = TwoFactorSelector.AuthCode; } })">
                                <span class="iconify" data-icon="mdi:mobile-phone-key"></span>
                                <h6>Authenticator</h6>
                            </div>

                            <div class="twofactor-item @(User.Mfa.Passkeys.Any() ? "" : "twofactor-item-disabled")" @onclick="(() => { if (User.Mfa.Passkeys.Any()) { AuthType = TwoFactorSelector.WebAuth; VerifyPasskey(); } })">
                                <span class="iconify" data-icon="mdi:key-chain"></span>
                                <h6>Passkey, Webauth or Yubikey</h6>
                            </div>

                            <div class="twofactor-item @(!string.IsNullOrEmpty(User.Mfa.RecoveryCode) ? "" : "twofactor-item-disabled")" @onclick="@(() => { if (!string.IsNullOrEmpty(User.Mfa.RecoveryCode)) { AuthType = TwoFactorSelector.RecoveryCode; } })">
                                <span class="iconify" data-icon="mdi:file-key"></span>
                                <h6>Recovery Code</h6>
                            </div>
                        }
                        else
                        {
                            <div class="twofactor-item" @onclick="(() => { AuthType = TwoFactorSelector.EmailCode; })">
                                <span class="iconify" data-icon="mdi:cloud-key"></span>
                                <h6>Email Code</h6>
                            </div>
                            <div class="twofactor-item twofactor-item-disabled">
                                <span class="iconify" data-icon="mdi:mobile-phone-key"></span>
                                <h6>Authenticator</h6>
                                <p>Disabled: Not setup</p>
                            </div>
                            <div class="twofactor-item twofactor-item-disabled">
                                <span class="iconify" data-icon="mdi:key-chain"></span>
                                <h6>Passkey, Webauth or Yubikey</h6>
                                <p>Disabled: Not setup</p>
                            </div>
                            <div class="twofactor-item twofactor-item-disabled">
                                <span class="iconify" data-icon="mdi:file-key"></span>
                                <h6>Recovery Code</h6>
                                <p>Disabled: Not setup</p>
                            </div>
                        }
                    }
                }
                break;
            case TwoFactorSelector.WebAuth:
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Passkey Verification</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Verify your fingerprint, security key or passkey account.
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenIcon Icon="fingerprint" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'wght' 600;" />
                        <RadzenIcon Icon="security_key" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'FILL' 1;" />
                        <RadzenIcon Icon="Passkey" IconColor="@Colors.Info" Style="font-size: 2rem;" />
                    </RadzenStack>
                    <br />
                    <RadzenButton Click="@VerifyPasskey" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" Disabled="@IsVerifyingAuth" IsBusy="@IsVerifyingAuth" />
                }
                break;
            case TwoFactorSelector.EmailCode:
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Email Code</RadzenText>
                    @if (!IsEmailSent)
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            Click Send to recieve an email code to your @(Session.CurrentUser.Email.Split('@').Last().Split('.').First()) account.
                        </RadzenText>
                        <RadzenIcon Icon="mail" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'FILL' 1;" />
                        <br />
                        <RadzenButton Click="@SendEmail" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Text="Send" Disabled="@IsVerifyingAuth" IsBusy="@IsVerifyingAuth" />
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Body2">
                            We have sent an email to your @(Session.CurrentUser.Email.Split('@').Last().Split('.').First()) account, this code will expire in 5 minutes.
                        </RadzenText>
                        <RadzenIcon Icon="forward_to_inbox" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'FILL' 1;" />
                        <div>
                            <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@CodeInput" @onpaste="@CheckPaste" Change="@(() => { if (CodeInput.Length == 6) VerifyEmail(); })" Count="6" Gap="6px" aria-label="Email Code" autofocus />
                        </div>
                        <br />
                        <RadzenButton Click="@VerifyEmail" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" Disabled="@IsVerifyingAuth" IsBusy="@IsVerifyingAuth" />
                    }

                }
                break;
            case TwoFactorSelector.AuthCode:
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Auth Code</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Open your mobile Authenticator App or Password Manager.
                    </RadzenText>
                    <RadzenIcon Icon="screen_lock_portrait" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'FILL' 1;" />
                    <div>
                        <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@CodeInput" @onpaste="@CheckPaste" Change="@(() => { if (CodeInput.Length == 6) VerifyAuthenticator(); })" Count="6" Gap="6px" aria-label="Auth Code" autofocus />
                    </div>
                    <br />
                    <RadzenButton Click="@VerifyAuthenticator" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" Disabled="@IsVerifyingAuth" IsBusy="@IsVerifyingAuth" />
                }
                break;
            case TwoFactorSelector.RecoveryCode:
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Recovery Code</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        Enter your account recovery code that you have previously downloaded.
                    </RadzenText>
                    <RadzenIcon Icon="key" IconColor="@Colors.Info" Style="font-size: 2rem; font-variation-settings: 'FILL' 1;" />
                    <RadzenTextBox @bind-Value="CodeInput" MaxLength="60" Style="width: 100%" aria-label="Recovery Code TextBox" autofocus />
                    <br />
                    <RadzenButton Click="@VerifyRecoveryCode" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" Disabled="@IsVerifyingAuth" IsBusy="@IsVerifyingAuth" />
                }
                break;
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        @if (AuthType != TwoFactorSelector.Menu)
        {
            <RadzenButton Click="@(() => { AuthType = 0; CodeInput = string.Empty; })" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Back" Style="width: 90px" />
        }
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Warning" Text="Cancel" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>

<style>
    .twofactor-item .iconify {
        color: #0bba83 !important;
        width: 32px;
        height: 32px;
        float: left;
        margin-right: 10px;
    }

    .twofactor-item {
        display: block !important;
        height: 52px;
        margin-bottom: 6px;
        background-color: #272731 !important;
        border-radius: 16px;
        padding: 6px;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 8px;
        cursor: pointer;
    }

        .twofactor-item h4 {
            margin-top: 0px !important;
        }

        .twofactor-item p {
            margin-top: -14px !important;
        }

    .twofactor-item-disabled {
        opacity: 0.5;
        background-color: rgba(39,40,49,0.4) !important;
        color: rgb(130,129,129) !important;
        cursor: default !important;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    [Parameter] public bool LogUsage { get; set; }

    public AuthUser? User { get; set; }

    public string? CodeInput { get; set; }
    public TwoFactorSelector AuthType = TwoFactorSelector.Menu;
    public enum TwoFactorSelector
    {
        Menu, WebAuth, EmailCode, AuthCode, RecoveryCode
    }


    protected override async Task OnInitializedAsync()
    {
        User = await Session.GetCurrentUserAsync();
    }

    public bool IsEmailSent;
    public bool IsVerifyingAuth;

    public async Task SendEmail()
    {
        if (!Email.CanSendEmail())
        {
            await dialogService.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }

        IsVerifyingAuth = true;
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        string? VerifyCache = Cache.Get<string>("2fa-verify-" + User.Id.ToString());
        if (string.IsNullOrEmpty(VerifyCache))
        {
            string Code = Email.RandomCodeGenerator();
            Cache.Set("2fa-verify-" + User.Id.ToString(), Code, new TimeSpan(0, 5, 0));
            bool IsEmailSent = await Email.SendAccessCode(User, "2FA Verification", Code);
            if (LogUsage)
            {
                User = await Session.GetCurrentUserAsync();
                if (User == null)
                    return;

                User.Mfa.EmailCodeLastSentAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
            if (!IsEmailSent)
            {
                await dialogService.ShowInfoAsync("Email Error", "Failed to send email.");                
            }
        }
        IsEmailSent = true;
        IsVerifyingAuth = false;
        StateHasChanged();
    }

    public async Task VerifyEmail()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        IsVerifyingAuth = true;
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        string? VerifyCache = Cache.Get<string>("2fa-verify-" + User.Id.ToString());
        if (string.IsNullOrEmpty(VerifyCache) || !VerifyCache.Equals(CodeInput))
        {
            await dialogService.ShowInfoAsync("Email Code Failed", $"Failed to verify your email code.");
            IsVerifyingAuth = false;
            StateHasChanged();
        }
        else
        {
            Cache.Remove("2fa-verify-" + User.Id.ToString());
            if (LogUsage)
            {
                User = await Session.GetCurrentUserAsync();
                if (User == null)
                {
                    Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
                    return;
                }
                User.Mfa.EmailCodeLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
            dialogService.Close(true);
        }

    }

    public void CheckPaste()
    {
        if (string.IsNullOrEmpty(CodeInput))
        {
            dialogService.ShowInfoAsync("Paste Failed", $"Your pasted text contains invalid characters or blank spaces at the end.");
        }
    }

    public async Task VerifyAuthenticator()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (!User.Mfa.AuthenticatorDevices.Any(x => x.Value == true))
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AuthenticatorNoDevices);
            return;
        }

        IsVerifyingAuth = true;
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        bool Test = await Authenticator.ValidateAsync("", CodeInput, UserManager, User);
        if (Test)
        {
            if (LogUsage)
            {
                User.Mfa.AuthenticatorLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
            dialogService.Close(true);
        }
        else
        {
            await dialogService.ShowInfoAsync("Authenticator Failed", $"Failed to verify authenticator code.");
            IsVerifyingAuth = false;
            StateHasChanged();
        }
        
    }

    public async Task VerifyPasskey()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        IsVerifyingAuth = true;
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        if (!User.Mfa.Passkeys.Any())
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.PasskeysNoDevices);
            return;
        }



        bool DetectPasskeyAllow = false;
        try
        {
            DetectPasskeyAllow = await JS.InvokeAsync<bool>("window.Passkey.isPasskeySupported");
        }
        catch { }
        if (!DetectPasskeyAllow)
        {
            await dialogService.ShowInfoAsync("Passkey Info", "This device does not support passkeys.");
            IsVerifyingAuth = false;
            StateHasChanged();
            return;
        }

        bool Result = await Session.TestPasskey(LogUsage);
        if (Result)
            dialogService.Close(true);
        else
        {
            await dialogService.ShowInfoAsync("Passkey Failed", $"Failed to verify your passkey.");
            IsVerifyingAuth = false;
            StateHasChanged();

        }

    }

    public async Task VerifyRecoveryCode()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        IsVerifyingAuth = true;
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        if (string.IsNullOrEmpty(User.Mfa.RecoveryCode))
            return;



        PasswordVerificationResult Result = Utils.Hasher.VerifyHashedPassword(User, User.Mfa.RecoveryCode, CodeInput);
        if (Result.HasFlag(PasswordVerificationResult.Success))
        {
            if (LogUsage)
            {
                User.Mfa.RecoveryCodeLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }

            dialogService.Close(true);
        }
        else
        {
            await dialogService.ShowInfoAsync("Recovery Code Failed", $"Failed to verify your recovery code.");
            IsVerifyingAuth = false;
            StateHasChanged();
        }
        
    }
}
