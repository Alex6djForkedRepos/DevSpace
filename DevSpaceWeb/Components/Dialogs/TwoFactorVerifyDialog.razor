@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Distributed
@inject UserManager<AuthUser> UserManager
@inject EmailService Email
@inject NavigationManager NavigationManager
@inject AuthenticatorTokenProvider<AuthUser> Authenticator
@inject Radzen.DialogService dialogService
@inject IJSRuntime JS
@inject IMemoryCache Cache

<PageTitle>2FA Verify | @_Data.Config.Instance.Name</PageTitle>
<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack>
        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
            Two-factor authentication is required!
        </RadzenAlert>
        <br />
        @if (AuthType == 0)
        {
            if (User != null)
            {
                if (User.Mfa.IsTwoFactorEnabled)
                {
                    <div class="twofactor-item twofactor-item-disabled">
                        <span class="iconify" data-icon="mdi:cloud-key"></span>
                        <h4>Email Code</h4>
                        <p>Disabled with more secure options</p>
                    </div>
                    <div class="twofactor-item @(User.Mfa.AuthenticatorDevices.Any(x => x.Value == true) ? "" : "twofactor-item-disabled")" @onclick="(() => AuthType = 2)">
                        <span class="iconify" data-icon="mdi:mobile-phone-key"></span>
                        <h4>Authenticator</h4>
                    </div>

                    <div class="twofactor-item @(User.Mfa.Passkeys.Any() ? "" : "twofactor-item-disabled")" @onclick="VerifyPasskey">
                        <span class="iconify" data-icon="mdi:key-chain"></span>
                        <h4>Passkey, Webauth or Yubikey</h4>
                    </div>

                    <div class="twofactor-item @(!string.IsNullOrEmpty(User.Mfa.RecoveryCode) ? "" : "twofactor-item-disabled")" @onclick="@(() => AuthType = 3)">
                        <span class="iconify" data-icon="mdi:file-key"></span>
                        <h4>Recovery Code</h4>
                    </div>
                }
                else
                {
                    <div class="twofactor-item" @onclick="(() => { ShowEmail(); })">
                        <span class="iconify" data-icon="mdi:cloud-key"></span>
                        <h4>Email Code</h4>
                    </div>
                    <div class="twofactor-item twofactor-item-disabled">
                        <span class="iconify" data-icon="mdi:mobile-phone-key"></span>
                        <h4>Authenticator</h4>
                        <p>Disabled: Not setup</p>
                    </div>
                    <div class="twofactor-item twofactor-item-disabled">
                        <span class="iconify" data-icon="mdi:key-chain"></span>
                        <h4>Passkey, Webauth or Yubikey</h4>
                        <p>Disabled: Not setup</p>
                    </div>
                    <div class="twofactor-item twofactor-item-disabled">
                        <span class="iconify" data-icon="mdi:file-key"></span>
                        <h4>Recovery Code</h4>
                        <p>Disabled: Not setup</p>
                    </div>
                }
            }
        }
        else if (AuthType == 1)
        {
            <RadzenLabel Text="Email Code" class="rz-my-0"></RadzenLabel>
            <div>
                <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@CodeInput" Count="8" Gap="6px" aria-label="Email Code" autofocus />
            </div>
            <br />
            <RadzenButton Click="@VerifyEmail" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
        }
        else if (AuthType == 2)
        {

            <RadzenLabel Text="Auth Code" class="rz-my-0"></RadzenLabel>
            <div>
                <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@CodeInput" Count="6" Gap="6px" aria-label="Auth Code" autofocus />
            </div>
            <br />
            <RadzenButton Click="@VerifyAuthenticator" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
        }
        else if (AuthType == 3)
        {
            <RadzenLabel Text="Recovery Code" class="rz-my-0"></RadzenLabel>
            <RadzenTextBox @bind-Value="CodeInput" Style="width: 100%" aria-label="Email Code TextBox" autofocus />
            <br />
            <RadzenButton Click="@VerifyRecoveryCode" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
        }
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        @if (AuthType != 0)
        {
            <RadzenButton Click="@(() => { AuthType = 0; CodeInput = string.Empty; })" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Back" Style="width: 90px" />
        }
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Warning" Text="Cancel" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>



@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter] public bool LogUsage { get; set; }

    public AuthUser User { get; set; }

    public string CodeInput { get; set; }
    public int AuthType = 0;

    protected override async Task OnInitializedAsync()
    {
        User = await Session.GetCurrentUserAsync();
    }

    public async Task ShowEmail()
    {
        if (!Email.CanSendEmail())
        {
            await dialogService.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }

        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        string? VerifyCache = Cache.Get<string>("2fa-verify-" + User.Id.ToString());
        if (string.IsNullOrEmpty(VerifyCache))
        {
            string Code = Email.RandomCodeGenerator();
            Cache.Set("2fa-verify-" + User.Id.ToString(), Code, new TimeSpan(0, 2, 0));
            await Email.SendAccessCode(User, "2FA Verification", Code);
            if (LogUsage)
            {
                User = await Session.GetCurrentUserAsync();
                User.Mfa.EmailCodeLastSentAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
        }
        AuthType = 1;
    }

    public async Task VerifyEmail()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        string? VerifyCache = Cache.Get<string>("2fa-verify-" + User.Id.ToString());
        if (string.IsNullOrEmpty(VerifyCache) || !VerifyCache.Equals(CodeInput))
            await dialogService.ShowInfoAsync("Email Code Failed", $"Failed to verify your email code.");
        else
        {
            if (LogUsage)
            {
                User = await Session.GetCurrentUserAsync();
                if (User == null)
                {
                    Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
                    return;
                }
                User.Mfa.EmailCodeLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
            dialogService.Close(true);
        }

    }


    public async Task VerifyAuthenticator()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (!User.Mfa.AuthenticatorDevices.Any(x => x.Value == true))
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AuthenticatorNoDevices);
            return;
        }

        

        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        bool Test = await Authenticator.ValidateAsync("", CodeInput, UserManager, User);
        if (Test)
        {
            if (LogUsage)
            {
                User.Mfa.AuthenticatorLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }
            dialogService.Close(true);
        }
        else
            await dialogService.ShowInfoAsync("Authenticator Failed", $"Failed to verify authenticator code.");
    }

    public async Task VerifyPasskey()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        if (!User.Mfa.Passkeys.Any())
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.PasskeysNoDevices);
            return;
        }

        

        bool DetectPasskeyAllow = false;
        try
        {
            DetectPasskeyAllow = await JS.InvokeAsync<bool>("window.Passkey.isPasskeySupported");
        }
        catch { }
        if (!DetectPasskeyAllow)
        {
            await dialogService.ShowInfoAsync("Passkey Info", "This device does not support passkeys.");
            return;
        }

        bool Result = await Session.TestPasskey(LogUsage);
        if (Result)
            dialogService.Close(true);
        else
            await dialogService.ShowInfoAsync("Passkey Failed", $"Failed to verify your passkey.");
    }

    public async Task VerifyRecoveryCode()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        if (string.IsNullOrEmpty(User.Mfa.RecoveryCode))
            return;

        

        PasswordVerificationResult Result = Utils.Hasher.VerifyHashedPassword(User, User.Mfa.RecoveryCode, CodeInput);
        if (Result.HasFlag(PasswordVerificationResult.Success))
        {
            if (LogUsage)
            {
                User.Mfa.RecoveryCodeLastUsedAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(User);
            }

            dialogService.Close(true);
        }
        else
            await dialogService.ShowInfoAsync("Recovery Code Failed", $"Failed to verify your recovery code.");
    }
}
