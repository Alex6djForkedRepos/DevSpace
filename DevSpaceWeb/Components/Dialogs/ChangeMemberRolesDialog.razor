@using DevSpaceWeb.Models.Accounts
@using DevSpaceWeb.Models.Defaults
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inject UserManager<AuthUser> UserManager
@inject Radzen.DialogService dialogService

<RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" Style="height: 100%;">
    <RadzenStack JustifyContent="JustifyContent.Start">
        <RoleSelector @bind-Source="@AllRoles" @bind-Target="@SelectedRoles" Style="height:500px; width:100%;"
        ItemRender="((arg) => ItemRenderAction(arg))"
        TextProperty="@nameof(TeamRoleData.Name)" AllowFiltering="true" Multiple="true" ShowHeader="true"
        ButtonGap="12px" ButtonJustifyContent="JustifyContent.Center" ButtonSize="ButtonSize.Medium" ButtonShade="Shade.Dark"
        ButtonVariant="Variant.Filled">
            <SourceHeader>
                All Roles
            </SourceHeader>
            <TargetHeader>
                Current Roles
            </TargetHeader>
            <Template>
                @if (CurrentRank < context.Position)
                {
                    @context.Name
                }
                else
                {
                    <span class="iconify" data-icon="mdi:lock"></span> @context.Name
                }
            </Template>
        </RoleSelector>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Click="@((args) => dialogService.Close(false))" Variant="Variant.Text" ButtonStyle="ButtonStyle.Base" Text="Cancel" Style="width: 90px" />
        <RadzenButton Click="@Submit" Variant="Variant.Text" ButtonStyle="ButtonStyle.Success" Text="Submit" Style="width: 90px" />
    </RadzenStack>
</RadzenStack>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    [Parameter]
    public TeamData Team { get; set; }

    public int CurrentRank;



    [Parameter]
    public TeamMemberData Member { get; set; }

    public IEnumerable<TeamRoleData> AllRoles { get; set; }

    public IEnumerable<TeamRoleData> SelectedRoles { get; set; }

    protected override void OnParametersSet()
    {
        CurrentRank = Member.GetRank();
        List<TeamRoleData> list = new List<TeamRoleData>();
        foreach(var i in Member.Roles)
        {
            if (Team.CachedRoles.TryGetValue(i, out TeamRoleData role))
                list.Add(role);
        }
        SelectedRoles = list;
        AllRoles = Team.CachedRoles.Values.Except(SelectedRoles).OrderBy(x => x.Position);
    }

    public ListBoxItemRenderEventArgs<object> ItemRenderAction(ListBoxItemRenderEventArgs<object> data)
    {
        TeamRoleData role = data.Item as TeamRoleData;
        data.Disabled = CurrentRank >= role.Position;
        return data;
    }

    async Task Submit()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        if (!Session.Selected.Member.HasTeamPermission(TeamPermission.ManageMembers))
        {
            Session.Notifications.ShowPermissionWarning(TeamPermission.ManageMembers);
            return;
        }

        if (SelectedRoles == null)
        {
            await Member.UpdateAsync(new UpdateDefinitionBuilder<TeamMemberData>().Set(x => x.Roles, new HashSet<ObjectId>()));
            Member.Roles = new HashSet<ObjectId>();
        }
        else
        {
            await Member.UpdateAsync(new UpdateDefinitionBuilder<TeamMemberData>().Set(x => x.Roles, SelectedRoles.Select(x => x.Id).ToHashSet()));
            Member.Roles = SelectedRoles.Select(x => x.Id).ToHashSet();
        }
        
        
        dialogService.Close(true);
        
    }
}
