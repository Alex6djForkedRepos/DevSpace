@page "/login"
@page "/register"
@page "/changepassword"
@using DevSpaceWeb.Data.Auth
@using DevSpaceWeb.Fido2
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions
@using DevSpaceWeb.Controllers
@using DevSpaceWeb.Database
@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Identity
@using MongoDB.Driver
@using System.Text.Json
@using System.Collections.Specialized
@inject SignInManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject HttpContextAccessor HttpContext
@inject IJSRuntime JS
@inject IMemoryCache Cache
@inject NavigationManager NavigationManager
@inject EmailService Email
@inject DialogService Dialog

<div class="dash-box dash-box-content dash-center" style="max-width: 700px !important;">
    <div class="flex-center" style="text-align: center !important;">
        <img src="@_Data.Config.Instance.GetIconOrDefault()" style="height: 40px; width: 40px;" />
        <h6 class="ml-3 mt-2">@_Data.Config.Instance.Name Login</h6>
    </div>
    <br />
    @switch (Page)
    {
        case LoginPageType.Login:
            {
                <PageTitle>Login | @_Data.Config.Instance.Name</PageTitle>
                <RadzenRow Gap="12px" RowGap="12px">
                    <RadzenColumn SizeMD="6" SizeSM="12">
                        <RadzenStack Gap="6px" Orientation="Orientation.Vertical">

                            @if (IsAccountCreated)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                                    Your account has been created, you can now login.
                                </RadzenAlert>
                            }
                            @if (Program.IsPreviewMode)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                                    Preview Mode is enabled, login as a test user.
                                </RadzenAlert>
                            }
                            @if (!string.IsNullOrEmpty(ConnectionLink))
                            {
                                @switch (ConnectionLink)
                                {
                                    case "PreviewMode":
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            Social login is not available in preview mode.
                                        </RadzenAlert>
                                        break;
                                    case "Disabled":
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            Social login is disabled for this instance.
                                        </RadzenAlert>
                                        break;
                                    case "Failed":
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            Social login has failed.
                                        </RadzenAlert>
                                        break;
                                    case "NotConnected":
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            This social login has not been connected to your account, you will need to login first.
                                        </RadzenAlert>
                                        break;
                                    case "EmailMissing":
                                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                            This social is not providing an email address.
                                        </RadzenAlert>
                                        break;
                                }
                            }
                            @if (!_Data.Config.Auth.AllowInternalLogin)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    Internal login has been disabled.
                                </RadzenAlert>    
                            }
                            @if (!_Data.Config.Auth.AllowExternalLogin)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false">
                                    External login has been disabled.
                                </RadzenAlert>    
                            }
                            <EditForm Model="@LoginForm" OnValidSubmit="@Login">
                                <DataAnnotationsValidator />

                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                                    Email
                                </RadzenText>
                                <RadzenTextBox @bind-Value="LoginForm.Email" Style="width: 100%" aria-label="Email" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Email" MaxLength="100"
                                Placeholder="user@gmail.com" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowInternalLogin)" autofocus inputmode="email" autocapitalize="none" />
                                <ValidationMessage For="() => LoginForm.Email" style="color: var(--rz-danger);" />

                                <br style="margin-bottom: 20px;" />

                                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                                    Password
                                </RadzenText>
                                <RadzenPassword @bind-Value="LoginForm.CurrentPassword" Style="width: 100%" aria-label="Password"
                                Disabled="@(FormDisabled || !_Data.Config.Auth.AllowInternalLogin)" maxlength="100" AutoCompleteType="Radzen.Blazor.AutoCompleteType.CurrentPassword" />
                                <ValidationMessage For="() => LoginForm.CurrentPassword" style="color: var(--rz-danger);" />

                                <br />

                                @if (!string.IsNullOrEmpty(LoginErrorMessage))
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                                        @LoginErrorMessage
                                    </RadzenAlert>
                                }
                                else
                                {
                                    <br style="margin-bottom: 10px;" />
                                }

                                <RadzenCheckBox @bind-Value="@RememberMe" Name="RememberMe" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowInternalLogin)" />
                                <RadzenLabel Text="Remember Me" Component="RememberMe" class="rz-ms-2" />

                                <br style="margin-bottom: 10px;" />

                                @if (RememberMe)
                                {
                                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                                        <div>This will keep you signed in on this computer.</div>
                                    </RadzenAlert>
                                }

                                <div class="flex" style="margin-top: 20px;">
                                    <RadzenButton Text="Login" IsBusy="@FormDisabled" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowInternalLogin)" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />

                                </div>

                            </EditForm>
                            <br style="margin-bottom: 4px;" />
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn SizeMD="6" SizeSM="12" Style="padding-left: 20px; padding-right: 20px;">
                        <RadzenStack Gap="10px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                            <RadzenButton Disabled="@FormDisabled" Style="min-width: 180px; text-align: left !important;" ButtonStyle="ButtonStyle.Success" Variant="Variant.Text" Shade="Shade.Default" Click="@(() => { if (!Program.IsPreviewMode) { RegisterForm.Email = LoginForm.Email; } Page = LoginPageType.Register; })">
                                <span class="iconify" data-icon="mdi:register"></span> Register Account
                            </RadzenButton>
                            <RadzenButton Disabled="@FormDisabled" Style="min-width: 180px; text-align: left !important;" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.ChangePassword; })">
                                <span class="iconify" data-icon="mdi:password-reset"></span> Change Password
                            </RadzenButton>
                            @if (!string.IsNullOrEmpty(_Data.Config.Instance.Email))
                            {
                                <a href="@("mailto:" + _Data.Config.Instance.Email)">
                                    <RadzenButton Style="min-width: 180px; text-align: left !important;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark">
                                        <span class="iconify" data-icon="mdi:question-mark"></span> Email Support
                                    </RadzenButton>
                                </a>
                            }
                            @if (Program.ShowDemoLink)
                            {
                                <a href="https://devspace-demo.fluxpoint.dev">
                                    <RadzenButton Style="min-width: 180px; text-align: left !important;" ButtonStyle="ButtonStyle.Base" Variant="Variant.Text" Shade="Shade.Dark">
                                        <span class="iconify" data-icon="mdi:test-tube"></span> Demo Version
                                    </RadzenButton>
                                </a>
                            }
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <form id="login-external-form" action="/auth/login/external" method="post" style="display: hidden;" hidden>
                    <InputText name="provider" @bind-value="@Provider" />
                    <InputText name="requestId" @bind-value="@RequestId" />
                    <InputText name="rememberMe" @bind-value="@RememberMeString" />
                </form>
                <RadzenStack Gap="6px" Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" class="mt-3">
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Fluxpoint.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Fluxpoint.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("fluxpoint"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://fluxpoint.dev/img/icons/fluxpoint.png"> Fluxpoint
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Apple.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Apple.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("apple"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/apple.webp?v=1"> Apple
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Discord.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Discord.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("discord"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/discord.webp"> Discord
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Google.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Google.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("google"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.GitHub.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.GitHub.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("github"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/github.webp" class="icon-github"> GitHub
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.GitLab.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.GitLab.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("gitlab"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/gitlab.webp"> GitLab
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Microsoft.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Microsoft.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("microsoft"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/microsoft.webp"> Microsoft
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Slack.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Slack.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("slack"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/slack.webp"> Slack
                        </RadzenButton>
                    }
                    @if (Program.IsPreviewMode || _Data.Config.Providers.Twitter.IsConfigured())
                    {
                        <RadzenButton Disabled="Program.IsPreviewMode || _Data.Config.Providers.Twitter.IsDisabled || !_Data.Config.Auth.AllowExternalLogin || FormDisabled" Click="@(() => LoginExternal("twitter"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Outlined">
                            <img src="https://cdn.fluxpoint.dev/icons/twitter.webp"> Twitter
                        </RadzenButton>
                    }

                </RadzenStack>
            }
            break;
        case LoginPageType.Register:
            {
                <PageTitle>Register | @_Data.Config.Instance.Name</PageTitle>
                @if (Program.IsPreviewMode)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Preview Mode is enabled, you can't register an account.
                    </RadzenAlert>
                }
                else if (!_Data.Config.Auth.AllowRegister)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Account registration has been disabled.
                    </RadzenAlert>
                }
                else if (!string.IsNullOrEmpty(ConnectionLink) && ConnectionLink == "Register")
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        You need to create an account to connect your social login.
                    </RadzenAlert>
                }
                <EditForm Model="@RegisterForm" OnValidSubmit="@RegisterAccount">
                    <DataAnnotationsValidator />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                        Username
                    </RadzenText>
                    <RadzenTextBox @bind-Value="RegisterForm.Username" Style="width: 100%" aria-label="Username" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Username"
                    Placeholder="user" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowRegister || Program.IsPreviewMode)" autocapitalize="none" MaxLength="32" />
                    <ValidationMessage For="() => RegisterForm.Username" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                        Email
                    </RadzenText>
                    <RadzenTextBox @bind-Value="RegisterForm.Email" Style="width: 100%" aria-label="Email" MaxLength="100"
                    Placeholder="user@gmail.com" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowRegister || Program.IsPreviewMode)" inputmode="email" autocapitalize="none" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Email" />
                    <ValidationMessage For="() => RegisterForm.Email" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                    <br />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                        Password
                    </RadzenText>
                    <RadzenPassword @bind-Value="RegisterForm.Password" Style="width: 100%" aria-label="Password" AutoCompleteType="Radzen.Blazor.AutoCompleteType.NewPassword"
                    Disabled="@(FormDisabled || !_Data.Config.Auth.AllowRegister || Program.IsPreviewMode)" maxlength="100" />
                    <ValidationMessage For="() => RegisterForm.Password" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                        Confirm Password
                    </RadzenText>
                    <RadzenPassword @bind-Value="@RegisterForm.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" AutoCompleteType="Radzen.Blazor.AutoCompleteType.NewPassword"
                    Disabled="@(FormDisabled || !_Data.Config.Auth.AllowRegister || Program.IsPreviewMode)" maxlength="100" />
                    <ValidationMessage For="() => RegisterForm.RepeatPassword" style="color: var(--rz-danger);" />


                    @if (!string.IsNullOrEmpty(RegisterErrorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                            @RegisterErrorMessage
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">
                        <RadzenButton Text="Register" IsBusy="@FormDisabled" Disabled="@(FormDisabled || !_Data.Config.Auth.AllowRegister || Program.IsPreviewMode)" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />
                        <RadzenButton Text="Login" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.Login; })" />
                    </div>
                </EditForm>
            }
            break;
        case LoginPageType.ChangePassword:
            {
                <PageTitle>Change Password | @_Data.Config.Instance.Name</PageTitle>
                @if (Program.IsPreviewMode)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Preview Mode is enabled, you can't change password.
                    </RadzenAlert>
                }
                @if (PasswordChangeSent)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Password change request has been sent to your email address.
                    </RadzenAlert>
                }

                <EditForm Model="@ChangePasswordForm" OnValidSubmit="@ChangePassword">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(Token))
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                            Email
                        </RadzenText>
                        <RadzenTextBox @bind-Value="ChangePasswordForm.Email" Style="width: 100%" aria-label="Email" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Email"
                        Placeholder="user@gmail.com" Disabled="true" />
                        <ValidationMessage For="() => ChangePasswordForm.Email" style="color: var(--rz-danger);" />

                        <br style="margin-bottom: 20px;" />
                        <br />

                        <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                        <br />

                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                            New Password
                        </RadzenText>
                        <RadzenPassword @bind-Value="ChangePasswordForm.NewPassword" Style="width: 100%" aria-label="Password" AutoCompleteType="Radzen.Blazor.AutoCompleteType.NewPassword"
                        Disabled="@FormDisabled" autofocus maxlength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.NewPassword" style="color: var(--rz-danger);" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                            Confirm Password
                        </RadzenText>
                        <RadzenPassword @bind-Value="@ChangePasswordForm.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" AutoCompleteType="Radzen.Blazor.AutoCompleteType.NewPassword"
                        Disabled="@FormDisabled" maxlength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.RepeatPassword" style="color: var(--rz-danger);" />
                    }
                    else
                    {
                        <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">
                            Email
                        </RadzenText>
                        <RadzenTextBox @bind-Value="ChangePasswordForm.Email" Style="width: 100%" aria-label="Email" autocapitalize="none"
                        Placeholder="user@gmail.com" Disabled="@FormDisabled" autofocus inputmode="email" MaxLength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.Email" style="color: var(--rz-danger);" />
                    }

                    @if (!string.IsNullOrEmpty(ChangePasswordErrorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                            @ChangePasswordErrorMessage
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">

                        @if (string.IsNullOrEmpty(Token))
                        {
                            <RadzenButton Text="Request Password Change" IsBusy="@FormDisabled" Disabled="@(FormDisabled || Program.IsPreviewMode)" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@CheckChangePassword" />
                            <RadzenButton Text="Login" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.Login; })" />
                        }
                        else
                        {
                            <RadzenButton Text="Change Password" IsBusy="@FormDisabled" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />
                        }
                    </div>
                </EditForm>

            }
            break;
        case LoginPageType.AlreadyLoggedIn:
            {
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                    You are already logged in, go to your account settings or use the sidebar.
                </RadzenAlert>

                <a href="/user/account"><RadzenButton Text="Account Settings" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" /></a>
                <a href="/logout"><RadzenButton Text="Logout" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Darker" /></a>
            }
            break;
    }
    <p class="mt-5" style="color: white; text-align: center;">Created by Fluxpoint Development - <a href="https://discord.gg/fluxpoint" target="_blank">Discord</a></p>
</div>

<style>
    .rz-button img {
    height: 20px;
    margin-right: 4px;
    }

    .icon-github {
    background-color: white;
    border-radius: 120px;
    padding: 1px;
    }

    .rz-button .iconify {
    height: 24px !important;
    width: 24px !important;
    margin-right: 6px;
    }

    .rz-button.rz-primary.rz-shade-light {
    width: 120px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public LoginPageType Page = LoginPageType.Login;
    public bool FormDisabled { get; set; } = false;

    public string? Token { get; set; }
    public string? ConnectionLink { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Session.State.User.Identity != null && Session.State.User.Identity.IsAuthenticated)
        {
            Page = LoginPageType.AlreadyLoggedIn;
            return;
        }

        NameValueCollection query = NavigationManager.ParseQuery();
        string Path = NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length);

        string? Email = query["email"];

        // This is meant to be here for preview purposes :)
        if (Program.IsPreviewMode)
        {
            LoginForm.Email = "test@test.com";
            LoginForm.CurrentPassword = "@U8FXB5&^2mKWbn";
        }

        ConnectionLink = query["link"];

        if (Path.StartsWith("register", StringComparison.OrdinalIgnoreCase))
        {
            string? Username = query["username"];
            if (!string.IsNullOrEmpty(Username))
                RegisterForm.Username = Uri.UnescapeDataString(Username);

            if (!string.IsNullOrEmpty(Email))
                RegisterForm.Email = Uri.UnescapeDataString(Email);

            Page = LoginPageType.Register;
        }
        else if (Path.StartsWith("changepassword", StringComparison.OrdinalIgnoreCase))
        {
            Token = query["token"];
            if (!string.IsNullOrEmpty(Token))
                Token = Uri.UnescapeDataString(Token);

            if (!string.IsNullOrEmpty(Email))
                ChangePasswordForm.Email = Uri.UnescapeDataString(Email);

            Page = LoginPageType.ChangePassword;
        }
        else
        {
            if (!string.IsNullOrEmpty(Email))
            {
                LoginForm.Email = Uri.UnescapeDataString(Email);
            }
        }
    }

    public AccountRegisterModel RegisterForm = new AccountRegisterModel();
    public string? RegisterErrorMessage { get; set; }

    public AccountLoginModel LoginForm = new AccountLoginModel();
    public string? LoginErrorMessage { get; set; }

    public AccountChangePasswordModel ChangePasswordForm = new AccountChangePasswordModel();
    public string? ChangePasswordErrorMessage { get; set; }

    private bool _rememberMe;
    bool RememberMe { get { return _rememberMe; } set { _rememberMe = value; RememberMeString = value.ToString(); } }
    string RememberMeString { get; set; } = "False";

    public bool IsAccountCreated { get; set; }

    public async Task RegisterAccount()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        if (!_Data.Config.Auth.AllowRegister)
        {
            await Dialog.ShowInfoAsync("Register Disabled", "You can't create an account on this dev space instance.");
            return;
        }
        if (string.IsNullOrEmpty(RegisterForm.Username))
            return;
        if (string.IsNullOrEmpty(RegisterForm.Password))
            return;
        if (string.IsNullOrEmpty(RegisterForm.Email))
            return;

        FormDisabled = true;
        AuthUser User = new AuthUser
            {
                UserName = RegisterForm.Username.ToLower(),
                Email = RegisterForm.Email
            };
        IdentityResult result = await UserManager.UserManager.CreateAsync(User, RegisterForm.Password);

        if (result.Errors.Any())
        {
            if (result.Errors.Count() == 1 && result.Errors.First().Code == "DuplicateEmail")
            {
                IsAccountCreated = true;
                Page = LoginPageType.Login;
            }
            else
            {
                RegisterErrorMessage = result.Errors.First().Description;
            }
        }
        else
        {
            _DB.Users.Add(User.Id, new PartialUserData(User));
            IsAccountCreated = true;
            Page = LoginPageType.Login;
        }
        FormDisabled = false;
    }

    public enum LoginPageType
    {
        Login, Register, ChangePassword, AlreadyLoggedIn
    }

    public bool PasswordChangeSent = false;

    public async Task CheckChangePassword()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        FormDisabled = true;

        AuthUser? User = await UserManager.UserManager.FindByEmailAsync(ChangePasswordForm.Email);
        if (User == null)
        {
            PasswordChangeSent = true;
            return;
        }
        string Token = await UserManager.UserManager.GeneratePasswordResetTokenAsync(User);
        await Email.SendPasswordChangeRequest(User, (NavigationManager.BaseUri + $"changePassword?email={Uri.EscapeDataString(ChangePasswordForm.Email)}&token=" + Uri.EscapeDataString(Token)));
        PasswordChangeSent = true;
    }

    public async Task Login()
    {
        if (string.IsNullOrEmpty(LoginForm.Email))
            return;

        if (Program.IsPreviewMode)
        {
            if (!LoginForm.Email.Equals("test@test.com", StringComparison.OrdinalIgnoreCase))
            {
                _ = Dialog.ShowInfoAsync("Login Disabled", "You can't login with other accounts in preview mode.");
                return;
            }
        }
        else if (LoginForm.Email.Equals("test@test.com", StringComparison.OrdinalIgnoreCase))
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.PreviewNotEnabled);
            return;
        }

        if (!_Data.Config.Auth.AllowInternalLogin)
        {
            _ = Dialog.ShowInfoAsync("Login Disabled", "Internal login as been disabled.");
            return;
        }

        FormDisabled = true;
        UserSessionJson SessionInfo = await JS.InvokeAsync<UserSessionJson>("window.Auth.getSessionInfo");
        string RequestId = Guid.NewGuid().ToString();
        SessionInfo.Email = LoginForm.Email;
        Cache.Set("login-" + RequestId, SessionInfo, new TimeSpan(0, 5, 0));

        string Result = await JS.InvokeAsync<string>("window.Auth.accountLogin", LoginForm.Email, LoginForm.CurrentPassword, RememberMe, RequestId);

        if (Result == "ok")
        {
            NavigationManager.Refresh(true);
            return;
        }
        else if (Result == "ratelimit")
            LoginErrorMessage = "You have been locked out for 1 hour due to repeated failed login attempts.";
        else
            LoginErrorMessage = "Failed to login, check your email and password is correct.";

        FormDisabled = false;
    }

    public string? Provider { get; set; }
    public string? RequestId { get; set; }

    public async Task LoginExternal(string provider)
    {
        if (Program.IsPreviewMode)
            return;

        if (!_Data.Config.Auth.AllowExternalLogin)
        {
            _ = Dialog.ShowInfoAsync("Login Disabled", "External login as been disabled on this instance.");
            return;
        }

        if (IsProviderDisabled(provider))
        {
            _ = Dialog.ShowInfoAsync("Login Disabled", $"The {provider} login as been disabled on this instance.");
            return;
        }

        UserSessionJson SessionInfo = await JS.InvokeAsync<UserSessionJson>("window.Auth.getSessionInfo");
        RequestId = Guid.NewGuid().ToString();
        Cache.Set("login-" + RequestId, SessionInfo, new TimeSpan(0, 15, 0));
        Provider = provider;
        StateHasChanged();
        await JS.InvokeAsync<string>("window.Auth.accountLoginExternal");
    }

    public bool IsProviderDisabled(string provider)
    {
        switch (provider)
        {
            case "fluxpoint":
                return _Data.Config.Providers.Fluxpoint.IsDisabled;
            case "apple":
                return _Data.Config.Providers.Apple.IsDisabled;
            case "discord":
                return _Data.Config.Providers.Discord.IsDisabled;
            case "google":
                return _Data.Config.Providers.Google.IsDisabled;
            case "github":
                return _Data.Config.Providers.GitHub.IsDisabled;
            case "gitlab":
                return _Data.Config.Providers.GitLab.IsDisabled;
            case "slack":
                return _Data.Config.Providers.Slack.IsDisabled;
            case "twitter":
                return _Data.Config.Providers.Twitter.IsDisabled;
            case "microsoft":
                return _Data.Config.Providers.Microsoft.IsDisabled;
        }

        return true;
    }

    public async Task ChangePassword()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        FormDisabled = true;
        UserSessionJson SessionInfo = await JS.InvokeAsync<UserSessionJson>("window.Auth.getSessionInfo");
        string RequestId = Guid.NewGuid().ToString();
        SessionInfo.Email = ChangePasswordForm.Email;
        Cache.Set("changepass-" + RequestId, SessionInfo, new TimeSpan(0, 5, 0));
        bool Result = await JS.InvokeAsync<bool>("window.Auth.accountChangePassword", ChangePasswordForm.Email, ChangePasswordForm.NewPassword, Token, RequestId);
        if (Result)
        {
            LoginForm.Email = ChangePasswordForm.Email;
            LoginForm.CurrentPassword = ChangePasswordForm.NewPassword;
            Page = LoginPageType.Login;
        }
        else
        {
            ChangePasswordErrorMessage = "Failed to change password for this account";
        }

        FormDisabled = false;
    }
}