@page "/login"
@using DevSpaceWeb.Fido2
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions
@using DevSpaceWeb.Controllers
@using DevSpaceWeb.Database
@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Distributed
@using MongoDB.Driver
@using System.Text.Json
@inject SignInManager<AuthUser> UserManager;
@inject NavigationManager NavigationManager
@inject HttpContextAccessor HttpContext
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IDistributedCache Cache
@inject EmailService Email

<MudGrid Justify="Justify.Center">
    <MudItem>
        <MudPaper Class="pa-4">
            <div class="d-flex justify-center" style="text-align: center !important;">
                <img src="@_Data.Config.Instance.GetIconOrDefault()" style="height: 40px; width: 40px;" />
                <h3 class="ml-3 mt-2">@_Data.Config.Instance.Name Login</h3>
            </div>
            <br />
            @switch (Page)
            {
                case LoginPageType.Default:
                    {

                        @if (_Data.Config.Auth.AllowInternalLogin)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="@(() => Page = LoginPageType.Login)">Internal Auth</MudButton>
                        }
                        <br />
                        <br />
                        <form data-enhance id="login-external-form" action="/auth/external" method="post" class="form-horizontal">
                            <div>
                                <p>
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" ButtonType="ButtonType.Submit" value="google" name="provider">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" ButtonType="ButtonType.Submit" value="discord" name="provider">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Discord
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Info" ButtonType="ButtonType.Submit" value="github" name="provider">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> GitHub
                                    </MudButton>
                                </p>
                            </div>
                        </form>
                    }
                    break;
                case LoginPageType.Login:
                    {
                        @if (IsAccountCreated)
                        {
                            <MudAlert Severity="Severity.Info">Your account has been created, you can now login.</MudAlert>
                            <br />
                        }

                        <MudForm @bind-IsValid="@FormValid" Disabled="@FormDisabled">
                            <MudTextField T="string" Label="Email" Required="true" @bind-Value="EmailField" RequiredError="Email is required!"
                                          Variant="Variant.Filled" Underline="false" ShrinkLabel="true" DebounceInterval="500"
                                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                            <br style="margin-bottom: 20px;" />

                            <MudTextField T="string" Label="Password" @bind-Value="PasswordField"
                                          InputType="InputType.Password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                                          Validation="@(new Func<string, IEnumerable<string>>(Validation.PasswordStrength))" Required="true"
                                          RequiredError="Password is required!" DebounceInterval="500" />

                            <br style="margin-bottom: 20px;" />

                            <div class="d-flex">
                                <MudCheckBox @bind-Value="RememberMe" Color="Color.Info" Label="Remember Me"></MudCheckBox>
                                @if (RememberMe)
                                {
                                    <MudPaper Elevation="2" Class="ml-3 pa-2">
                                        <MudText Typo="Typo.body2">This will keep you signed in.</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Warning">Do not use this for public computers.</MudText>
                                    </MudPaper>
                                }
                            </div>



                            <div class="d-flex align-center justify-space-between" style="margin-top: 30px;">
                                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!FormValid)" OnClick="@Login">Login</MudButton>
                                <MudButton Class="ml-auto" Variant="Variant.Text" OnClick="@(() => { PasswordField = ""; Page = LoginPageType.ChangePassword; })">Forgot Password?</MudButton>
                                <MudButton Class="ml-auto" Variant="Variant.Text" Color="Color.Info" OnClick="@(() => { PasswordField = ""; Page = LoginPageType.Register; })">Register Account</MudButton>
                            </div>
                        </MudForm>
                    }
                    break;
                case LoginPageType.Register:
                    {
                        <MudForm @bind-IsValid="@FormValid" Disabled="@FormDisabled">
                            <MudTextField T="string" Label="Username" Required="true" @bind-Value="UsernameField" RequiredError="Name is required!"
                                          Variant="Variant.Filled" Underline="false" ShrinkLabel="true" DebounceInterval="500" />

                            <br style="margin-bottom: 20px;" />

                            <MudTextField T="string" Label="Email" Required="true" @bind-Value="EmailField" RequiredError="Email is required!"
                                          Variant="Variant.Filled" Underline="false" ShrinkLabel="true" DebounceInterval="500"
                                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                            <br style="margin-bottom: 20px;" />

                            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="PasswordField"
                                          InputType="InputType.Password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                                          DebounceInterval="500"
                                          Validation="@(new Func<string, IEnumerable<string>>(Validation.PasswordStrength))" Required="true"
                                          RequiredError="Password is required!" />

                            <br style="margin-bottom: 20px;" />

                            <MudTextField T="string"
                                          Label="Password" HelperText="Repeat the password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                                          InputType="InputType.Password" DebounceInterval="500" Required="true"
                                          Validation="@(new Func<string, string>(PasswordMatch))" />


                            <div class="d-flex align-center justify-space-between" style="margin-top: 30px;">
                                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!FormValid)" OnClick="RegisterAccount">Register</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" OnClick="@(() => { PasswordField = ""; Page = LoginPageType.Login; })">Login Instead</MudButton>
                            </div>
                        </MudForm>
                    }
                    break;
                case LoginPageType.ChangePassword:
                    {
                        @if (PasswordChangeSent)
                        {
                            <MudAlert Severity="Severity.Info">Password change request has been sent to your email address.</MudAlert>
                            <br />
                        }

                        <MudForm @bind-IsValid="@FormValid" Disabled="@FormDisabled">
                            <MudTextField T="string" Label="Email" Required="true" @bind-Value="EmailField" RequiredError="Email is required!"
                                          Variant="Variant.Filled" Underline="false" ShrinkLabel="true" DebounceInterval="500"
                                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                            @if (!string.IsNullOrEmpty(Token))
                            {
                                <br style="margin-bottom: 20px;" />

                                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="PasswordField"
                                              InputType="InputType.Password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                                              Validation="@(new Func<string, IEnumerable<string>>(Validation.PasswordStrength))" Required="true"
                                              RequiredError="Password is required!" DebounceInterval="500" />

                                <br style="margin-bottom: 20px;" />

                                <MudTextField T="string"
                                              Label="Password" HelperText="Repeat the password" Variant="Variant.Filled" Underline="false" ShrinkLabel="true"
                                              InputType="InputType.Password"
                                              Validation="@(new Func<string, string>(PasswordMatch))" DebounceInterval="500" />

                            }
                            <div class="d-flex align-center justify-space-between" style="margin-top: 30px;">

                                @if (string.IsNullOrEmpty(Token))
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!FormValid)" OnClick="CheckChangePassword">Request Password Change</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" OnClick="@(() => { PasswordField = ""; Page = LoginPageType.Login; })">Login Instead</MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!FormValid)" OnClick="ChangePassword">Change Password</MudButton>

                                }
                            </div>
                        </MudForm>
                    }
                    break;
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .mud-grid-item > .mud-paper {
        min-width: 500px !important;
        margin-top: 20px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public LoginPageType Page = LoginPageType.Default;
    public bool FormValid { get; set; }
    public bool FormDisabled { get; set; } = false;

    public string Token { get; set; }

    LoginForm model = new LoginForm();

    protected override async Task OnInitializedAsync()
    {
        var query = NavigationManager.ParseQuery();
        string Email = query["email"];
        string Username = query["username"];
        Token = query["token"];

        if (!string.IsNullOrEmpty(Email))
        {
            EmailField = Uri.UnescapeDataString(Email);
            Page = LoginPageType.Login;
        }


        if (!string.IsNullOrEmpty(Username))
        {
            UsernameField = Uri.UnescapeDataString(Username);
            Page = LoginPageType.Register;
        }

        if (!string.IsNullOrEmpty(Token))
        {
            Token = Uri.UnescapeDataString(Token);
            Page = LoginPageType.ChangePassword;
        }
    }


    string UsernameField { get; set; }
    string EmailField { get; set; }
    string PasswordField { get; set; }
    bool RememberMe { get; set; }



    public bool IsAccountCreated { get; set; }

    public async Task RegisterAccount()
    {
        FormDisabled = true;
        var result = await UserManager.UserManager.CreateAsync(new AuthUser
            {
                UserName = UsernameField,
                Email = EmailField
            }, PasswordField);

        if (result.Errors.Any())
        {
            if (result.Errors.Count() == 1 && result.Errors.First().Code == "DuplicateEmail")
            {
                IsAccountCreated = true;
                Page = LoginPageType.Login;
            }
        }
        else
        {
            IsAccountCreated = true;
            Page = LoginPageType.Login;
        }

        FormDisabled = false;
    }

    private string PasswordMatch(string arg)
    {
        if (PasswordField != arg)
            return "Passwords don't match";
        return null;
    }

    public enum LoginPageType
    {
        Default, Login, Register, ChangePassword
    }

    public bool PasswordChangeSent = false;

    public async Task CheckChangePassword()
    {
        if (!FormValid)
            return;

        FormDisabled = true;

        var User = await UserManager.UserManager.FindByEmailAsync(EmailField);
        if (User == null)
        {
            PasswordChangeSent = true;
            return;
        }
        var Token = await UserManager.UserManager.GeneratePasswordResetTokenAsync(User);
        await Email.SendPasswordChangeRequest(User, (NavigationManager.BaseUri + $"login?email={Uri.EscapeDataString(EmailField)}&token=" + Uri.EscapeDataString(Token)));
        PasswordChangeSent = true;
    }

    public async Task Login()
    {
        if (!FormValid)
            return;

        string RequestId = Guid.NewGuid().ToString();
        Cache.SetString("login-" + RequestId, EmailField, new DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(2)));
        bool Result = await JS.InvokeAsync<bool>("accountLogin", EmailField, PasswordField, RememberMe, RequestId);
        if (Result)
            NavigationManager.NavigateTo("/", true);
    }

    public async Task ChangePassword()
    {
        if (!FormValid)
            return;
        string RequestId = Guid.NewGuid().ToString();
        Cache.SetString("changepass-" + RequestId, EmailField, new DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(2)));
        bool Result = await JS.InvokeAsync<bool>("accountChangePassword", EmailField, PasswordField, Token, RequestId);
        if (Result)
            NavigationManager.NavigateTo("/", true);
    }
}