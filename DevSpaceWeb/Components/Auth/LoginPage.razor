@page "/login"
@    using DevSpaceWeb.Fido2
@    using Microsoft.AspNetCore.Components;
@    using Microsoft.AspNetCore.Components.Forms;
@    using System.ComponentModel.DataAnnotations;
@    using System.Text.RegularExpressions
@    using DevSpaceWeb.Controllers
@    using DevSpaceWeb.Database
@    using DevSpaceWeb.Services
@    using Microsoft.AspNetCore.Identity
@    using Microsoft.Extensions.Caching.Distributed
@    using MongoDB.Driver
@    using System.Text.Json
@inject SignInManager<AuthUser> UserManager;
@inject NavigationManager NavigationManager
@inject HttpContextAccessor HttpContext
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IDistributedCache Cache
@inject EmailService Email

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Gap="1rem">
    <div class="dash-box dash-box-content">
        <div class="flex-center" style="text-align: center !important;">
            <img src="@_Data.Config.Instance.GetIconOrDefault()" style="height: 40px; width: 40px;" />
            <h3 class="ml-3 mt-2">@_Data.Config.Instance.Name Login</h3>
        </div>
        <br />
        @switch (Page)
        {
            case LoginPageType.Default:
                {

                    @if (_Data.Config.Auth.AllowInternalLogin)
                    {
                        <RadzenButton Click="@(() => Page = LoginPageType.Login)" ButtonStyle="ButtonStyle.Secondary" Text="Internal Auth" />
                    }
                    <br />
                    <br />

                    @if (Program.IsPreviewMode)
                    {
                        <p>
                            <RadzenButton Click="@Session.ShowPreviewModeNotice" value="google" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                            </RadzenButton>
                            <RadzenButton Click="@Session.ShowPreviewModeNotice" value="discord" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Discord
                            </RadzenButton>
                            <RadzenButton Click="@Session.ShowPreviewModeNotice" value="github" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                <img src="https://cdn.fluxpoint.dev/icons/google.webp"> GitHub
                            </RadzenButton>
                        </p>
                    }
                    else
                    {
                        <form data-enhance id="login-external-form" action="/auth/external" method="post" class="form-horizontal">
                            <div>
                                <p>
                                    <RadzenButton ButtonType="ButtonType.Submit" value="google" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                                    </RadzenButton>
                                    <RadzenButton ButtonType="ButtonType.Submit" value="discord" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Discord
                                    </RadzenButton>
                                    <RadzenButton ButtonType="ButtonType.Submit" value="github" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                        <img src="https://cdn.fluxpoint.dev/icons/google.webp"> GitHub
                                    </RadzenButton>
                                </p>
                            </div>
                        </form>
                    }

                }
                break;
            case LoginPageType.Login:
                {
                    @if (IsAccountCreated)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            Your account has been created, you can now login.
                        </RadzenAlert>
                    }
                    @if (Program.IsPreviewMode)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            Preview Mode is enabled, login as a test user.
                        </RadzenAlert>
                    }

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                    <RadzenTextBox @bind-Value="EmailField" Style="width: 100%" aria-label="Email TextBox" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                    <RadzenPassword @bind-Value="PasswordField" Style="width: 100%" aria-label="Password TextBox" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenCheckBox @bind-Value="@RememberMe" Name="CheckBox1" />
                    <RadzenLabel Text="Remember Me" Component="CheckBox1" class="rz-ms-2" Style="color: white;" />

                    @if (RememberMe)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose=false Size="AlertSize.Small">
                            <div>This will keep you signed in.</div>
                            <div>Do not use this for public computers.</div>
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">
                        <RadzenButton Text="Login" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@Login" />
                        <RadzenButton Text="Forgot Password?" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { if (!Program.IsPreviewMode) { PasswordField = ""; } Page = LoginPageType.ChangePassword; })" />
                        <RadzenButton Text="Register Account" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { if (!Program.IsPreviewMode) { PasswordField = ""; } Page = LoginPageType.Register; })" />
                    </div>
                }
                break;
            case LoginPageType.Register:
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Username</RadzenText>
                    <RadzenTextBox @bind-Value="@UsernameField" Style="width: 100%" aria-label="Username TextBox" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                    <RadzenTextBox @bind-Value="@EmailField" Style="width: 100%" aria-label="Email TextBox" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                    <RadzenPassword @bind-Value="@PasswordField" Style="width: 100%" aria-label="Password TextBox" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Confirm Password</RadzenText>
                    <RadzenPassword Style="width: 100%" aria-label="Confirm Password TextBox" />

                    <div class="flex-around" style="margin-top: 30px;">
                        <RadzenButton Text="Register" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@RegisterAccount" />
                        <RadzenButton Text="Login Instead" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { if (!Program.IsPreviewMode) { PasswordField = ""; } Page = LoginPageType.Login; })" />
                    </div>
                }
                break;
            case LoginPageType.ChangePassword:
                {
                    @if (PasswordChangeSent)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose=false>
                            Password change request has been sent to your email address.
                        </RadzenAlert>
                    }

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                    <RadzenTextBox @bind-Value="EmailField" Style="width: 100%" aria-label="Email TextBox" />

                    @if (!string.IsNullOrEmpty(Token))
                    {
                        <br style="margin-bottom: 20px;" />

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                        <RadzenPassword @bind-Value="@PasswordField" Style="width: 100%" aria-label="Password TextBox" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Confirm Password</RadzenText>
                        <RadzenPassword Style="width: 100%" aria-label="Confirm Password TextBox" />
                    }

                    <div class="flex-around" style="margin-top: 30px;">

                        @if (string.IsNullOrEmpty(Token))
                        {
                            <RadzenButton Text="Request Password Change" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@CheckChangePassword" />
                            <RadzenButton Text="Login Instead" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { if (!Program.IsPreviewMode) { PasswordField = ""; } Page = LoginPageType.Login; })" />
                        }
                        else
                        {
                            <RadzenButton Text="Change Password" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@ChangePassword" />

                        }
                    </div>
                }
                break;
        }
    </div>
</RadzenRow>


<style>
    .dash-box {
        min-width: 500px !important;
        margin-top: 20px;
    }

    .rz-button img {
        width: 20px;
        height: 20px;
        margin-right: 4px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public LoginPageType Page = LoginPageType.Default;
    public bool FormValid { get; set; }
    public bool FormDisabled { get; set; } = false;

    public string Token { get; set; }

    LoginForm model = new LoginForm();

    protected override async Task OnInitializedAsync()
    {
        var query = NavigationManager.ParseQuery();
        string Email = query["email"];
        string Username = query["username"];
        Token = query["token"];

        if (!string.IsNullOrEmpty(Email))
        {
            EmailField = Uri.UnescapeDataString(Email);
            Page = LoginPageType.Login;
        }


        if (!string.IsNullOrEmpty(Username))
        {
            UsernameField = Uri.UnescapeDataString(Username);
            Page = LoginPageType.Register;
        }

        if (!string.IsNullOrEmpty(Token))
        {
            Token = Uri.UnescapeDataString(Token);
            Page = LoginPageType.ChangePassword;
        }


        // This is meant to be here for preview purposes :)
        EmailField = "test@test.com";
        PasswordField = "@U8FXB5&^2mKWbn";
        FormValid = true;
    }


    string UsernameField { get; set; }
    string EmailField { get; set; }
    string PasswordField { get; set; }
    bool RememberMe { get; set; }



    public bool IsAccountCreated { get; set; }

    public async Task RegisterAccount()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        FormDisabled = true;
        var result = await UserManager.UserManager.CreateAsync(new AuthUser
            {
                UserName = UsernameField,
                Email = EmailField
            }, PasswordField);

        if (result.Errors.Any())
        {
            if (result.Errors.Count() == 1 && result.Errors.First().Code == "DuplicateEmail")
            {
                IsAccountCreated = true;
                Page = LoginPageType.Login;
            }
        }
        else
        {
            IsAccountCreated = true;
            FormValid = true;
            Page = LoginPageType.Login;
        }

        FormDisabled = false;
    }

    private string PasswordMatch(string arg)
    {
        if (PasswordField != arg)
            return "Passwords don't match";
        return null;
    }

    public enum LoginPageType
    {
        Default, Login, Register, ChangePassword
    }

    public bool PasswordChangeSent = false;

    public async Task CheckChangePassword()
    {
        if (!FormValid)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        FormDisabled = true;

        var User = await UserManager.UserManager.FindByEmailAsync(EmailField);
        if (User == null)
        {
            PasswordChangeSent = true;
            return;
        }
        var Token = await UserManager.UserManager.GeneratePasswordResetTokenAsync(User);
        await Email.SendPasswordChangeRequest(User, (NavigationManager.BaseUri + $"login?email={Uri.EscapeDataString(EmailField)}&token=" + Uri.EscapeDataString(Token)));
        PasswordChangeSent = true;
    }

    public async Task Login()
    {
        if (!Program.IsPreviewMode && !FormValid)
            return;

        string RequestId = Guid.NewGuid().ToString();
        Cache.SetString("login-" + RequestId, EmailField, new DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(2)));
        bool Result = await JS.InvokeAsync<bool>("accountLogin", EmailField, PasswordField, RememberMe, RequestId);
        if (Result)
            NavigationManager.NavigateTo("/", true);
    }

    public async Task ChangePassword()
    {
        if (!FormValid)
            return;

        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        string RequestId = Guid.NewGuid().ToString();
        Cache.SetString("changepass-" + RequestId, EmailField, new DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(2)));
        bool Result = await JS.InvokeAsync<bool>("accountChangePassword", EmailField, PasswordField, Token, RequestId);
        if (Result)
            NavigationManager.NavigateTo("/", true);
    }
}