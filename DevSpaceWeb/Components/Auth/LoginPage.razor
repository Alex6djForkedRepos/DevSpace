@page "/login"
@using DevSpaceWeb.Data.Auth
@using DevSpaceWeb.Fido2
@using DevSpaceWeb.Models
@using DevSpaceWeb.Models.Account
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions
@using DevSpaceWeb.Controllers
@using DevSpaceWeb.Database
@using DevSpaceWeb.Services
@using Microsoft.AspNetCore.Identity
@using MongoDB.Driver
@using System.Text.Json
@inject SignInManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject HttpContextAccessor HttpContext
@inject IJSRuntime JS
@inject IMemoryCache Cache
@inject NavigationManager NavigationManager
@inject EmailService Email


<div class="dash-box dash-box-content dash-center">
    <div class="flex-center" style="text-align: center !important;">
        <img src="@_Data.Config.Instance.GetIconOrDefault()" style="height: 40px; width: 40px;" />
        <h3 class="ml-3 mt-2">@_Data.Config.Instance.Name Login</h3>
    </div>
    <br />
    @switch (Page)
    {
        case LoginPageType.Default:
            {

                @if (_Data.Config.Auth.AllowInternalLogin)
                {
                    <RadzenButton Click="@(() => Page = LoginPageType.Login)" ButtonStyle="ButtonStyle.Secondary" Text="Internal Auth" />
                }
                <br />
                <br />

                @if (Program.IsPreviewMode)
                {
                    <p>
                        <RadzenButton Click="@Session.ShowPreviewModeNotice" value="google" name="provider" ButtonStyle="ButtonStyle.Secondary">
                            <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                        </RadzenButton>
                        <RadzenButton Click="@Session.ShowPreviewModeNotice" value="discord" name="provider" ButtonStyle="ButtonStyle.Secondary">
                            <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Discord
                        </RadzenButton>
                        <RadzenButton Click="@Session.ShowPreviewModeNotice" value="github" name="provider" ButtonStyle="ButtonStyle.Secondary">
                            <img src="https://cdn.fluxpoint.dev/icons/google.webp"> GitHub
                        </RadzenButton>
                    </p>
                }
                else
                {
                    <form id="login-external-form" action="/auth/external" method="post" class="form-horizontal">
                        <div>
                            <p>
                                <RadzenButton ButtonType="ButtonType.Submit" value="google" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                    <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Google
                                </RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Submit" value="discord" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                    <img src="https://cdn.fluxpoint.dev/icons/google.webp"> Discord
                                </RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Submit" value="github" name="provider" ButtonStyle="ButtonStyle.Secondary">
                                    <img src="https://cdn.fluxpoint.dev/icons/google.webp"> GitHub
                                </RadzenButton>
                            </p>
                        </div>
                    </form>
                }

            }
            break;
        case LoginPageType.Login:
            {
                @if (IsAccountCreated)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Your account has been created, you can now login.
                    </RadzenAlert>
                }
                @if (Program.IsPreviewMode)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Preview Mode is enabled, login as a test user.
                    </RadzenAlert>
                }

                <EditForm Model="@LoginForm" OnValidSubmit="@Login">
                    <DataAnnotationsValidator />

                    <RadzenLabel Text="Email" class="rz-my-0"></RadzenLabel>
                    <RadzenTextBox @bind-Value="LoginForm.Email" Style="width: 100%" aria-label="Email" autocomplete="true" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Email" MaxLength="100"
                    Placeholder="user@gmail.com" Disabled="@FormDisabled" autofocus inputmode="email" autocapitalize="none" />
                    <ValidationMessage For="() => LoginForm.Email" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenLabel Text="Password" class="rz-my-0"></RadzenLabel>
                    <RadzenPassword @bind-Value="LoginForm.CurrentPassword" Style="width: 100%" aria-label="Password" autocomplete="true" 
                    Disabled="@FormDisabled" maxlength="100" AutoCompleteType="Radzen.Blazor.AutoCompleteType.CurrentPassword" />
                    <ValidationMessage For="() => LoginForm.CurrentPassword" style="color: var(--rz-danger);" />

                    <br />

                    @if (!string.IsNullOrEmpty(LoginErrorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                            @LoginErrorMessage
                        </RadzenAlert>
                    }
                    else
                    {
                        <br style="margin-bottom: 10px;" />
                    }

                    <RadzenCheckBox @bind-Value="@RememberMe" Name="RememberMe" Disabled="@FormDisabled" />
                    <RadzenLabel Text="Remember Me" Component="RememberMe" class="rz-ms-2" />

                    <br style="margin-bottom: 10px;" />

                    @if (RememberMe)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" Size="AlertSize.Small">
                            <div>This will keep you signed in on this computer.</div>
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">
                        <RadzenButton Text="Login" IsBusy="@FormDisabled" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />
                        <RadzenButton Text="Forgot Password?" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.ChangePassword; })" />
                        <RadzenButton Text="Register Account" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { if (!Program.IsPreviewMode) { RegisterForm.Email = LoginForm.Email; } Page = LoginPageType.Register; })" />
                        <RadzenButton Text="Back" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Light" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.Default; })" />
                    </div>

                </EditForm>

            }
            break;
        case LoginPageType.Register:
            {
                <EditForm Model="@RegisterForm" OnValidSubmit="@RegisterAccount">
                    <DataAnnotationsValidator />

                    <RadzenLabel Text="Username" class="rz-my-0"></RadzenLabel>
                    <RadzenTextBox @bind-Value="RegisterForm.Username" Style="width: 100%" aria-label="Username" autocomplete="false"
                    Placeholder="user" Disabled="@FormDisabled" autocapitalize="none" MaxLength="32" />
                    <ValidationMessage For="() => RegisterForm.Username" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenLabel Text="Email" class="rz-my-0"></RadzenLabel>
                    <RadzenTextBox @bind-Value="RegisterForm.Email" Style="width: 100%" aria-label="Email" autocomplete="true" MaxLength="100"
                    Placeholder="user@gmail.com" Disabled="@FormDisabled" inputmode="email" autocapitalize="none" AutoCompleteType="Radzen.Blazor.AutoCompleteType.Email" />
                    <ValidationMessage For="() => RegisterForm.Email" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                    <br />

                    <RadzenLabel Text="Password" class="rz-my-0"></RadzenLabel>
                    <RadzenPassword @bind-Value="RegisterForm.Password" Style="width: 100%" aria-label="Password" autocomplete="false"
                    Disabled="@FormDisabled" maxlength="100" />
                    <ValidationMessage For="() => RegisterForm.Password" style="color: var(--rz-danger);" />

                    <br style="margin-bottom: 20px;" />

                    <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
                    <RadzenPassword @bind-Value="@RegisterForm.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" autocomplete="false"
                    Disabled="@FormDisabled" maxlength="100" />
                    <ValidationMessage For="() => RegisterForm.RepeatPassword" style="color: var(--rz-danger);" />


                    @if (!string.IsNullOrEmpty(RegisterErrorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                            @RegisterErrorMessage
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">
                        <RadzenButton Text="Register" IsBusy="@FormDisabled" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />
                        <RadzenButton Text="Login" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.Login; })" />
                    </div>
                </EditForm>
            }
            break;
        case LoginPageType.ChangePassword:
            {
                @if (PasswordChangeSent)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                        Password change request has been sent to your email address.
                    </RadzenAlert>
                }

                <EditForm Model="@ChangePasswordForm" OnValidSubmit="@ChangePassword">
                    <DataAnnotationsValidator />



                    @if (!string.IsNullOrEmpty(Token))
                    {
                        <RadzenLabel Text="Email" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="ChangePasswordForm.Email" Style="width: 100%" aria-label="Email" autocomplete="false"
                        Placeholder="user@gmail.com" Disabled="true" />
                        <ValidationMessage For="() => ChangePasswordForm.Email" style="color: var(--rz-danger);" />

                        <br style="margin-bottom: 20px;" />
                        <br />

                        <RadzenText TextStyle="TextStyle.Body2">Password is 8 characters long and requires 1 uppercase letter, 1 lowercase letter and 1 number</RadzenText>

                        <br />

                        <RadzenLabel Text="Password" class="rz-my-0"></RadzenLabel>
                        <RadzenPassword @bind-Value="ChangePasswordForm.NewPassword" Style="width: 100%" aria-label="Password" autocomplete="false"
                        Disabled="@FormDisabled" autofocus maxlength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.NewPassword" style="color: var(--rz-danger);" />

                        <br style="margin-bottom: 20px;" />

                        <RadzenLabel Text="Confirm Password" class="rz-my-0"></RadzenLabel>
                        <RadzenPassword @bind-Value="@ChangePasswordForm.RepeatPassword" Style="width: 100%" aria-label="Confirm Password" autocomplete="false"
                        Disabled="@FormDisabled" maxlength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.RepeatPassword" style="color: var(--rz-danger);" />
                    }
                    else
                    {
                        <RadzenLabel Text="Email" class="rz-my-0"></RadzenLabel>
                        <RadzenTextBox @bind-Value="ChangePasswordForm.Email" Style="width: 100%" aria-label="Email" autocapitalize="none"
                        Placeholder="user@gmail.com" Disabled="@FormDisabled" autofocus inputmode="email" MaxLength="100" />
                        <ValidationMessage For="() => ChangePasswordForm.Email" style="color: var(--rz-danger);" />
                    }

                    @if (!string.IsNullOrEmpty(ChangePasswordErrorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false">
                            @ChangePasswordErrorMessage
                        </RadzenAlert>
                    }

                    <div class="flex-around" style="margin-top: 30px;">

                        @if (string.IsNullOrEmpty(Token))
                        {
                            <RadzenButton Text="Request Password Change" IsBusy="@FormDisabled" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Click="@CheckChangePassword" />
                            <RadzenButton Text="Login" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Shade="Shade.Dark" Click="@(() => { Page = LoginPageType.Login; })" />
                        }
                        else
                        {
                            <RadzenButton Text="Change Password" IsBusy="@FormDisabled" Disabled="@FormDisabled" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" ButtonType="ButtonType.Submit" />
                        }
                    </div>
                </EditForm>

            }
            break;
        case LoginPageType.AlreadyLoggedIn:
            {
                <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false">
                    You are already logged in
                </RadzenAlert>

                <a href="/user/account"><RadzenButton Text="Account Settings" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Dark" /></a>
                <a href="/logout"><RadzenButton Text="Logout" ButtonStyle="ButtonStyle.Warning" Shade="Shade.Dark" /></a>
            }
            break;
    }
</div>

<style>
    .rz-button img {
    width: 20px;
    height: 20px;
    margin-right: 4px;
    }
</style>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public LoginPageType Page = LoginPageType.Default;
    public bool FormDisabled { get; set; } = false;

    public string Token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var query = NavigationManager.ParseQuery();
        string Email = query["email"];
        string Username = query["username"];
        Token = query["token"];

        if (!string.IsNullOrEmpty(Email))
        {
            LoginForm.Email = Uri.UnescapeDataString(Email);
            Page = LoginPageType.Login;
        }


        if (!string.IsNullOrEmpty(Username))
        {
            RegisterForm.Username = Uri.UnescapeDataString(Username);
            Page = LoginPageType.Register;
        }

        if (!string.IsNullOrEmpty(Token))
        {
            Token = Uri.UnescapeDataString(Token);
            ChangePasswordForm.Email = LoginForm.Email;
            Page = LoginPageType.ChangePassword;
        }


        // This is meant to be here for preview purposes :)
        if (Program.IsPreviewMode)
        {
            LoginForm.Email = "test@test.com";
            LoginForm.CurrentPassword = "@U8FXB5&^2mKWbn";
        }

        if (Session.State.User.Identity != null && Session.State.User.Identity.IsAuthenticated)
            Page = LoginPageType.AlreadyLoggedIn;
    }

    public AccountRegisterModel RegisterForm = new AccountRegisterModel();
    public string RegisterErrorMessage { get; set; }

    public AccountLoginModel LoginForm = new AccountLoginModel();
    public string LoginErrorMessage { get; set; }

    public AccountChangePasswordModel ChangePasswordForm = new AccountChangePasswordModel();
    public string ChangePasswordErrorMessage { get; set; }

    bool RememberMe { get; set; }

    public bool IsAccountCreated { get; set; }

    public async Task RegisterAccount()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }
        FormDisabled = true;
        var result = await UserManager.UserManager.CreateAsync(new AuthUser
            {
                UserName = RegisterForm.Username.ToLower(),
                Email = RegisterForm.Email
            }, RegisterForm.Password);

        if (result.Errors.Any())
        {
            if (result.Errors.Count() == 1 && result.Errors.First().Code == "DuplicateEmail")
            {
                IsAccountCreated = true;
                Page = LoginPageType.Login;
            }
            else
            {
                RegisterErrorMessage = result.Errors.First().Description;
            }
        }
        else
        {
            IsAccountCreated = true;
            Page = LoginPageType.Login;
        }
        FormDisabled = false;
    }

    public enum LoginPageType
    {
        Default, Login, Register, ChangePassword, AlreadyLoggedIn
    }

    public bool PasswordChangeSent = false;

    public async Task CheckChangePassword()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        FormDisabled = true;

        var User = await UserManager.UserManager.FindByEmailAsync(ChangePasswordForm.Email);
        if (User == null)
        {
            PasswordChangeSent = true;
            return;
        }
        var Token = await UserManager.UserManager.GeneratePasswordResetTokenAsync(User);
        await Email.SendPasswordChangeRequest(User, (NavigationManager.BaseUri + $"login?email={Uri.EscapeDataString(ChangePasswordForm.Email)}&token=" + Uri.EscapeDataString(Token)));
        PasswordChangeSent = true;
    }

    public async Task Login()
    {
        if (!Program.IsPreviewMode && LoginForm.Email.Equals("test@test.com", StringComparison.OrdinalIgnoreCase))
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.PreviewNotEnabled);
            return;
        }

        FormDisabled = true;
        SessionInfo SessionInfo = await JS.InvokeAsync<SessionInfo>("window.Auth.getSessionInfo");
        string RequestId = Guid.NewGuid().ToString();
        SessionInfo.Email = LoginForm.Email;
        Cache.Set("login-" + RequestId, SessionInfo, new TimeSpan(0, 5, 0));

        string Result = await JS.InvokeAsync<string>("window.Auth.accountLogin", LoginForm.Email, LoginForm.CurrentPassword, RememberMe, RequestId);
        Console.WriteLine("Login Get: " + Result);
        if (Result == "ok")
        {
            NavigationManager.Refresh(true);
            return;
        }
        else if (Result == "ratelimit")
            LoginErrorMessage = "You have been locked out for 1 hour due to repeated failed login attempts.";
        else
            LoginErrorMessage = "Failed to login, check your email and password is correct.";

        FormDisabled = false;
    }

    public async Task ChangePassword()
    {
        if (Program.IsPreviewMode)
        {
            Session.ShowPreviewModeNotice();
            return;
        }

        FormDisabled = true;

        string RequestId = Guid.NewGuid().ToString();
        Cache.Set("changepass-" + RequestId, ChangePasswordForm.Email, new TimeSpan(0, 5, 0));
        bool Result = await JS.InvokeAsync<bool>("window.Auth.accountChangePassword", ChangePasswordForm.Email, ChangePasswordForm.NewPassword, Token, RequestId);
        if (Result)
        {
            LoginForm.Email = ChangePasswordForm.Email;
            LoginForm.CurrentPassword = ChangePasswordForm.NewPassword;
            Page = LoginPageType.Login;
        }
        else
        {
            ChangePasswordErrorMessage = "Failed to change password for this account";
        }

        FormDisabled = false;
    }
}