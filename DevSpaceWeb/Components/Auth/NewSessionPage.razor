@using Microsoft.AspNetCore.Identity
@using System.Globalization
@using DevSpaceWeb.Data.Auth
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject EmailService Email
@inject HttpContextAccessor Http
@inject IJSRuntime JS

<PageTitle>New Session | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content dash-center">
    <div class="dash-box-header">
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Session Security</RadzenText>
    </div>
    <br />
    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
        A new session or IP has been detected for this account, confirm 2FA to get access.
    </RadzenAlert>
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" class="rz-mb-05">Account</RadzenText>
    <RadzenText TextStyle="TextStyle.Body2">
        @Account
    </RadzenText>
    <br />
    <RadzenButton Click="@Check2FA" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
    <a href="/logout"><RadzenButton Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="Logout" /></a>
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }

    public string Account { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var User = await Session.GetCurrentUserAsync();
        Account = User.UserName;
    }

    public async Task Check2FA()
    {
        AuthUser User = await Session.GetCurrentUserAsync();

        bool Result = false;
        if (Program.IsDevMode)
            Result = true;
        else
            Result = await Session.TriggerTwoFactorAuthentication(User, true, true);

        if (Result)
        {

            User = await Session.GetCurrentUserAsync();
            string Ip = Utils.GetUserIpAddress(Http.HttpContext);

            string SessionId = Http.HttpContext.Request.Cookies["DevSpace.SessionId"];
            if (!string.IsNullOrEmpty(SessionId))
            {
                if (User.Account.Sessions.TryGetValue(SessionId, out UserSession session))
                {
                    session.LastLoginAt = DateTime.UtcNow;
                    session.AuthorizedIps.Add(Utils.GetStringSha256Hash(Ip));
                }
                else
                {
                    UserSessionJson Json = await JS.InvokeAsync<UserSessionJson>("window.Auth.getSessionInfo");
                    UserSession Session = UserSession.Create(Json);
                    Session.AuthorizedIps.Add(Utils.GetStringSha256Hash(Ip));
                    User.Account.Sessions.Add(SessionId, Session);
                }
            }
            else
            {
                return;
            }
            await UserManager.UpdateAsync(User);
            if (!Program.IsDevMode && !Program.IsPreviewMode)
                await Email.SendNewSessionIP(User, Ip, CultureInfo.CurrentCulture.Name);
            NavigationManager.Refresh(true);
        }
    }
}
