@using DevSpaceWeb.Data.Users
@using Microsoft.Extensions.Caching.Distributed
@inject IMemoryCache Cache
@inject EmailService Email
@inject DialogService DialogService
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Account Disabled! | @_Data.Config.Instance.Name</PageTitle>
<div class="dash-box dash-box-content dash-center">
    <div class="dash-box-header">
        <div class="dash-box-icon">
            <span class="iconify" data-icon="mdi:warning"></span>
        </div>
        <RadzenText TextStyle="TextStyle.H6">Account Disabled</RadzenText>
    </div>
    @if (Disabled != null)
    {
        switch (Disabled.State)
        {
            case UserDisabledState.User:
                {
                    <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                        You have disabled your account.
                    </RadzenAlert>
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Account</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @AccountUsername
                    </RadzenText>
                    <br />
                    <RadzenText TextStyle="TextStyle.Body2">
                        You can reactive your account with an email code.
                    </RadzenText>
                    <br />
                    <RadzenButton Text="Reactivate Account" ButtonStyle="ButtonStyle.Info" Shade="Shade.Dark" Click="@EnableAccount" />
                    @if (ShowEmailCodeConfirm)
                    {
                        <br />
                        <RadzenLabel Text="Email Code" class="rz-my-0"></RadzenLabel>
                        <div>
                            <RadzenSecurityCode Type="SecurityCodeType.Numeric" @bind-Value="@EmailCode" Count="6" Gap="6px" aria-label="Email Code" autofocus />
                        </div>
                        <br />
                        <RadzenButton Click="@EnableAccountConfirm" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
                    }
                    <a href="/logout"><RadzenButton Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="Logout" /></a>
                }
                break;
            case UserDisabledState.TeamManaged:
                <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                    Your account is managed by a Team and has been disabled.
                </RadzenAlert>
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Account</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @AccountUsername
                </RadzenText>
                @if (!string.IsNullOrEmpty(Reason))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Reason</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @Reason
                    </RadzenText>
                }
                <br />
                <a href="/logout"><RadzenButton Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="Logout" /></a>
                break;
            case UserDisabledState.Instance:
                <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
                    Your account has been disabled by the Dev Space instance admin.
                </RadzenAlert>
                <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Account</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    @AccountUsername
                </RadzenText>
                @if (!string.IsNullOrEmpty(Reason))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-mb-05">Reason</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @Reason
                    </RadzenText>
                }
                <br />
                <a href="/logout"><RadzenButton Shade="Shade.Darker" ButtonStyle="ButtonStyle.Warning" Text="Logout" /></a>
                break;
        }
    }

</div>


@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; } = null!;

    public bool AccountfailedToLoad = false;
    public bool ShowEmailCodeConfirm { get; set; }
    public string? EmailCode { get; set; }

    public UserDisabled? Disabled { get; set; }
    public string? Reason { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthUser? User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            AccountfailedToLoad = true;
            return;
        }
        Disabled = User.Disabled!;
        AccountUsername = User.UserName!;
    }

    public string? AccountUsername { get; set; }


    public async Task EnableAccount()
    {
        if (!Email.CanSendEmail())
        {
            await DialogService.ShowInfoAsync("Email Service", $"The email service has not been setup for this instance.");
            return;
        }
        ShowEmailCodeConfirm = true;
        AuthUser? User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }
        string Code = Email.RandomCodeGenerator();
        Cache.Set("2fa-verify-" + User.Id.ToString(), Code, new TimeSpan(0, 5, 0));
        var IsEmailSent = await Email.SendAccessCode(User, "2FA Verification", Code);
        User.Mfa.EmailCodeLastSentAt = DateTime.UtcNow;
        await UserManager.UpdateAsync(User);
        if (!IsEmailSent)
        {
            await DialogService.ShowInfoAsync("Email Error", "Failed to send email.");
            return;
        }
    }

    public async Task EnableAccountConfirm()
    {
        AuthUser? User = await Session.GetCurrentUserAsync();
        if (User == null)
        {
            Session.Notifications.ShowErrorWarning(NotificationErrorType.AccountLoadFailed);
            return;
        }

        string? VerifyCache = Cache.Get<string>("2fa-verify-" + User.Id.ToString());
        if (string.IsNullOrEmpty(VerifyCache) || !VerifyCache.Equals(EmailCode))
            await DialogService.ShowInfoAsync("Email Code Failed", $"Failed to verify your email code.");
        else
        {

            User.Mfa.EmailCodeLastUsedAt = DateTime.UtcNow;
            User.Disabled = null;
            await UserManager.UpdateAsync(User);
            NavigationManager.Refresh(true);

        }
    }
}
