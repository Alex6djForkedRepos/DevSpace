@using Microsoft.AspNetCore.Identity
@using System.Globalization
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject EmailService Email
@inject HttpContextAccessor Http
@inject IJSRuntime JS

<div class="dash-box dash-box-content dash-center">
    <div class="dash-box-header">
        <RadzenText class="mt-1" TextStyle="TextStyle.H6">Session Security</RadzenText>
    </div>
    <br />
    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Dark" AllowClose="false" ShowIcon="false">
        A new IP Address has been detected for this account, confirm 2FA to get access.
    </RadzenAlert>
    <br />
    <RadzenButton Click="@Check2FA" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Text="Verify" />
</div>

@code {
    [CascadingParameter]
    private SessionProvider Session { get; set; }


    public async Task Check2FA()
    {
        var User = await Session.GetCurrentUserAsync();

        var Result = false;
        if (Program.IsDevMode)
            Result = true;
        else
            Result = await Session.TriggerTwoFactorAuthentication(User, true);

        if (Result)
        {

            User = await Session.GetCurrentUserAsync();
            string Ip = Utils.GetUserIpAddress(Http.HttpContext);
            string SessionId = Http.HttpContext.Request.Cookies["DevSpace.SessionId"];
            if (User.Account.Sessions.TryGetValue(SessionId, out var session))
                session.AuthorizedIps.Add(Utils.GetStringSha256Hash(Ip));
            else
            {
                int Browser = 0;
                try
                {
                    Browser = await JS.InvokeAsync<int>("getBrowser");
                }
                catch { }

                string Country = "Unknown";
                try
                {
                    Country = await JS.InvokeAsync<string>("getCountry");
                }
                catch { }

                bool IsMobile = false;
                try
                {
                    IsMobile = await JS.InvokeAsync<bool>("getIsMobile");
                }
                catch { }

                User.Account.Sessions.TryAdd(SessionId, new UserSession
                {
                    IsMobile = IsMobile,
                    BrowserType = (SessionBrowserType)Browser,
                    Name = Utils.GetBrowserName((SessionBrowserType)Browser),
                    Country = Country,
                    CreatedAt = DateTime.UtcNow,
                    AuthorizedIps = new HashSet<string>
                    {
                        Utils.GetStringSha256Hash(Ip)
                    }
                });
            }
            await UserManager.UpdateAsync(User);
            await Email.SendNewSessionIP(User, Ip, CultureInfo.CurrentCulture.Name);
            NavigationManager.Refresh(true);
        }
    }
}
