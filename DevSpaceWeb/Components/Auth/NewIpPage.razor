@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Identity
@using System.Globalization
@inject IDialogService DialogService
@inject UserManager<AuthUser> UserManager
@inject NavigationManager NavigationManager
@inject EmailService Email

<div class="dash-box dash-box-content" style="padding: 10px; margin-left: auto; margin-right: auto;">
    <div class="dash-box-header">
        <MudText Typo="Typo.h6">Session Security</MudText>
    </div>
    <br />
    <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">A new IP Address has been detected for this account, confirm 2FA to get access.</MudAlert>
    <br />
    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@Check2FA">Verify</MudButton>
</div>

<style>
    .dash-box {
        max-width: 500px !important;
        margin-top: 20px;
    }
</style>

@code {
    [Parameter] public SessionProvider Session { get; set; }


    public async Task Check2FA()
    {
        var User = await Session.GetCurrentUserAsync();
        if (Program.IsPreviewMode)
        {
            User = await Session.GetCurrentUserAsync();
            User.Auth.Sessions.TryAdd(Utils.GetStringSha256Hash(Session.Ip), new AuthUserSession { });
            await UserManager.UpdateAsync(User);
            return;
        }

        var Result = await Session.TriggerTwoFactorAuthentication(User, true);
        if (Result)
        {
            User = await Session.GetCurrentUserAsync();
            User.Auth.Sessions.TryAdd(Utils.GetStringSha256Hash(Session.Ip), new AuthUserSession { });
            await UserManager.UpdateAsync(User);
            await Email.SendNewSessionIP(User, Session.Ip, CultureInfo.CurrentCulture.Name);
            NavigationManager.Refresh(true);
        }
    }
}
